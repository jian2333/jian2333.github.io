<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[输入url之后...]]></title>
    <url>%2F2019%2F05%2F25%2Fafter-input-url%2F</url>
    <content type="text"><![CDATA[最近找工作，发现面试官都会问一个问题：在浏览器输入url之后，会发生什么？那么，在浏览器输入url之后，到底会发生什么呢？接下来，我们一起学习一下 ~主要过程当我们在浏览器地址栏输入url之后，主要会经过下面几个步骤：域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后，发起http请求 –&gt; 服务器响应http请求，发送html代码给浏览器 –&gt; (默认)服务器发送html代码后，发起4次挥手，断开TCP请求 –&gt; 浏览器渲染页面1. 域名解析域名解析，又叫 DNS解析。用于把地址栏的URL解析成服务器的IP地址，进而访问服务器。域名解析按优先级，会有以下几种情况：查询浏览器缓存 ：浏览器会缓存之前拿到的DNS 2-30分钟时间，如果没有找到，继续下一种情况；查询系统缓存 ：检查 hosts 文件，这个文件保存了一些以前访问过的网站的域名和IP的数据。它就像一个本地的数据库，如果找到就可以直接获取目标主机的IP地址了。如果没找到，继续下一种情况；查询路由器缓存 ：路由器有自己的DNS缓存，可能包含了需要查询的内容。如果没有，继续下一种情况；查询ISP DNS 缓存 ：ISP服务商的DNS缓存（本地服务器缓存），那里可能有相关的内容。如果还没有，继续下一种情况；递归查询 ：从 根域名服务器 –&gt; 顶级域名服务器 –&gt; 权限域名服务器 –&gt; 得到服务器IP ；举个(ISP+递归查询)例子，浏览器发起一个DNS的系统调用，首先会先向本地配置的首选DNS服务器(一般是电信运营商提供的，也可以使用像Google提供的DNS服务器)发起域名解析请求。运营商的DNS服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则由运营商的DNS代我们的浏览器发起迭代的DNS解析请求。它首先会找一个 根域的DNS的IP地址 ，找到 根域 的地址后，就会向其发起请求(请问 www.linux178.com 这个域名的IP地址是多少啊？ )，根域 发现这是一个 顶级域com域 的一个域名，就告诉运营商的DNS我不知道这个域名的IP地址，但我知道 com域 的IP地址，你可以去问它，于是运营商的DNS就得到了 com域 的IP地址，又向 com域 的DNS地址发起了请求(请问 www.linux178.com 这个域名的IP地址是多少啊？)，com域 这台服务器告诉运营商DNS，我不知道 www.linux178.com 这个域名的IP地址，但我知道 linxu178.com 这个域的IP地址，你可以去问它，于是运营商的DNS又向 linux178.com 这个域的DNS地址(这个一般就是由域名注册商提供的，像万网、新网等)发送请求(请问 www.linux178.com 这个域名的IP地址是多少啊？)，这个时候 linux178.com域 的DNS服务器一查，诶，果然在我这里，于是就把找到的结果返回给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了 www.linux178.com 这个域名的IP地址了，之后再返回给浏览器，浏览器就得到要访问域名的IP地址了。2. TCP的三次握手第一次握手 ：Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN=1 表示这是一个请求连接或连接接受报文，同时表示这个接受报不能携带数据，seq=x 表示Client自己的初始序号(seq=0 就代表这是第0号包)，这时候Client进入 syn_sent ，表示客户端等待服务器的响应；第二次握手 ：Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的 SYN 和 ACK 都置1，ack=x+1 表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到(ack=1 其实就是 ack=0+1，也就是期望客户端的第1个包)，seq=y 表示Server自己的初始序号(seq=0 就代表这是服务器这边发出的第0号包)。这时服务器进入 syn_rcvd 状态，表示服务器已经收到Client的连接请求，等待Client的确认；第三次握手 ：Client收到确认后还需要再次发送确认，同时携带要发送给Server的数据。ACK=1 表示确认号 ack=y+1 有效(代表收到服务器的第1个包)，Client自己的序号seq=x+1(表示这就是我的第一个包，相对于第0个包来说的)，一旦收到Client的确认后，这个TCP连接就进入了 Established 状态，就可以发起http请求了。为什么要3次握手为了防止已失效的连接请求报文突然又传送到了服务器，进而产生错误。举个例子：“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络节点长时间滞留了，以致延误到连接释放以后的某个时间才到达server。这本来是一个早已失效的报文段，但server收到此报文段后，误认为这是client再出发出的一个新的连接请求。于是就像client发出确认报文段，同意建立连接。假设不采用 三次握手 ，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的连接已经建立了，并一直在等待client发来数据。这样，server的很多资源就白白浪费了。采用 三次握手 的方法就可以防止上述现象的发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。3. 传输数据HTTP请求报文一个HTTP请求报文由 请求行(request line) ，请求头部(header) ，空行 ，请求数据 4个部分组成，下图给出了请求报文的一般格式。请求行请求行分为三个部分：请求方法 ，请求地址 和 协议版本 。请求方法HTTP/1.1 定义的请求方法有8中：GET、POST、PUT、DELETE、PATCH、HEAD、OPTIONS、TRACE 。最常用的两种是 GET 和 POST ，如果是 RESTful 接口的话一般会用到 GET、POST、DELETE、PUT 。请求地址URL：统一资源定位符，是一种资源位置的抽象唯一识别方法。组成如下(端口和路径有时可以省略) ：GET 请求时，有时会带参数。协议版本协议版本的格式为：HTTP/主版本号.次版本号 ，常用的有 HTTP/1.0 和 HTTP/1.1 。请求头部请求头部为请求报文添加了一些附加信息，由 名/值 对组成，每行一对，名和值之间用冒号分隔。常见请求头如下：请求头部的最后会有一个 空行 ，表示请求头部结束，接下来为请求数据。这一行非常重要，必不可少。请求数据可选部分，比如 GET 请求就没有请求数据。下面是一个 POST 方法的请求报文：123456789101112POST /index.php HTTP/1.1 //请求行Host: localhostUser-Agent: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2 //请求头Accept: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8Accept-Language: zh-cn,zh;q=0.5Accept-Encoding: gzip, deflateConnection: keep-aliveReferer: http://localhost/Content-Length：25Content-Type：application/x-www-form-urlencoded //空行username=aa&amp;password=1234 //请求数据HTTP响应报文HTTP响应报文主要由 状态行 ，响应头部 ，空行 和 响应数据 4个部分组成。下图给出了响应报文的一般格式。状态行由3部分组成，分别为：协议版本 ，状态码 ，状态码描述 。其中 协议版本 和请求报文一致，状态码描述 是对状态码的简单描述，所以这里只介绍 状态码 。状态码状态码 为3位数字。1xx ：指示信息——表示请求已接收，继续处理。2xx ：成功——表示请求已被成功接收、理解、接受。3xx ：重定向——表示要完成请求必须进行进一步的操作。4xx ：客户端错误——请求有语法错误或请求无法实现。5xx ：服务器端错误——服务器未能实现合法的请求。下面列举几个常见的：响应头部与 请求头部 类似，为响应报文添加一些附加的信息。常见的 响应头部 如下：响应数据用于存放需要返回给客户端的数据信息。下面是一个响应报文的实例：12345678910111213141516171819202122HTTP/1.1 200 OK //状态行Date: Sun, 17 Mar 2013 08:12:54 GMT //响应头部Server: Apache/2.2.8 (Win32) PHP/5.2.5X-Powered-By: PHP/5.2.5Set-Cookie: PHPSESSID=c0huq7pdkmm5gg6osoe3mgjmm3; path=/Expires: Thu, 19 Nov 1981 08:52:00 GMTCache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0Pragma: no-cacheContent-Length: 4393Keep-Alive: timeout=5, max=100Connection: Keep-AliveContent-Type: text/html; charset=utf-8 //空行&lt;html&gt; 响应数据&lt;head&gt;&lt;title&gt;HTTP响应示例&lt;title&gt;&lt;/head&gt;&lt;body&gt;Hello HTTP!&lt;/body&gt;&lt;/html&gt;4. TCP的四次挥手默认情况下的TCP连接，在服务器发送一次html数据给浏览器后，服务器就会执行 四次挥手 以 断开TCP连接 ，除了下面这种情况：持久连接 ：只要任意一端没有明确的提出断开连接，则保持TCP连接状态。在 请求首部字段 中设置 Connection:keep-alive 即表示使用了持久连接。注意 ：主机1可以是 客户端，也可以是 服务器端 ；默认情况下，主机1是 客户端，即 客户端主动断开连接 的情况 ；若 服务器端 主动断开连接，则主机1是 服务器端 ；过程描述 ：主机1 进程发出连接释放报文，并停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u(等于前面已经传送过来的数据的最后一个字节的序号加1)，此时，主机1 进入 FIN-WAIT-1(终止等待1) 状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。主机2 收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并带上自己的序列号seq=v，此时，主机2就进入了 CLOSE-WAIT(关闭等待) 状态。主机2通知高层的应用程序，主机1 向 主机2 的方向就释放了，这时候处于半关闭状态，即 主机1 已经没有数据要发送了，但是 主机2 若发送数据，主机1 仍然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。主机1 收到 主机2 的确认请求后，此时，主机1 就进入 FIN-WAIT-2(终止等待2) 状态，等待 主机2 发送连接释放报文(在这之前还需要接受 主机2 发送的最后的数据)。主机2 将最后的数据发送完毕后，就向 主机1 发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，主机2 很可能又发送了一些数据，假定此时的序列号为seq=w，此时，主机2 就进入了 LAST-ACK(最后确认) 状态，等待 主机1 的确认。主机1 收到 主机2 的连接释放报文后了，比如发出确认，ACK=1，ack=w+1，而自己的序列号seq=u+1，此时，主机1 就进入了 TIME-WAIT(时间等待) 状态。注意此时TCP链接还没有释放，必须经过 2MSL(最长报文段寿命) 的时间后，当 主机1 撤销相应的TCB后，才进入 CLOSED 状态。主机2 只要接收到了 主机1 发出的确认，就立即进入 CLOSED 状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，主机2 结束TCP连接的时间要比 主机1 早一些。为什么要四次挥手因为三次握手时只是建立一个连接，之后才传递数据，在握手时是没有数据传输的，所以3次即可。而挥手时，主机1 停止向 主机2 传输数据后，主机2 会立刻响应 主机1，先回一个ACK报文，告诉 主机1，”你发的FIN报文我收到了，但只有等我 主机2 的所有报文都发送完毕后，我才能发送FIN报文”，所以挥手的时候 主机2 要分两步，所以挥手需要四次。为什么要等待 2MSL因为网络可能不稳定，最后一个 ACK报文有可能会丢失，所以，TIME-WAIT 状态就是用来重发可能丢失的 ACK报文(第四步的报文)。在四次挥手的过程中，主机2 在 LAST-ACK(最后确认) 状态时，如果没接收到了 主机1 发来的 ACK报文，则不断发送FIN片段。所以 主机1 不能立即关闭，它必须确认 主机2 接收到了该 ACK之后，才关闭连接。所以，主机1 会设置一个计时器，等待 2MSL的时间，如果再次收到FIN，说明之前发送的ACK没有传到 主机2，于是会重新发一个ACK给 主机2；如果等待 2MSL后没有收到FIN，说明 主机2 已收到ACK且已关闭，于是 主机1 也关闭，TCP连接结束。5. 渲染HTML页面客户端拿到服务器传输过来的文件后，找到 HTML 和 MIME 文件，通过 MIME 文件，浏览器知道要用页面渲染引擎来处理 HTML 文件。页面渲染主要有以下几个步骤：1. 解析html源码，创建一个DOM树在 DOM 树中，每一个 HTML 标签都有一个对应的节点，并且每一个文本也都会有一个对应的文本节点。2. 解析CSS代码，计算出最终的样式数据，形成css对象模型CSSOM首先会忽略非法的CSS代码，然后按 浏览器默认设置——用户设置——外链样式——内联样式——style样式 的顺序进行渲染。3. 利用DOM和CSSOM构建一个渲染树（rendering tree）渲染树和 DOM 树有点像，但是是有区别的。DOM 树完全和 HTML标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如 head、display:none 的元素等。而且一大段文本中的每一行在渲染树中都是一个独立的节点。渲染树中的每一个节点都存储有对应的css属性。4. 浏览器根据渲染树，直接把页面绘制到屏幕上注意点JS和图片会阻塞 DOM 的加载和渲染。CSS不会阻塞 DOM 的加载，但会阻塞 DOM 的渲染(即浏览器控制台可以打印 DOM 节点了，但页面还是空白，没有渲染)。CSS会阻塞JS的加载和执行。加载JS时，添加 defer 参数，脚本会立即下载但不执行，在 DOM 加载完成后再执行。多个 defer 的脚本会按顺序执行。加载JS时，添加 async参数，脚本会异步加载再执行，执行的时候还是会阻塞 DOM 的加载。多个 async 的脚本不会按顺序执行。实际情况下，有时候多个 defer 时加载完后不一定会按顺序执行，所以建议，尽量合并成一个JS再使用 defer。关于 defer 和 async ，可以查看下图：参考链接1. 一次完整的HTTP请求过程2. 在浏览器输入URL并按回车后都发生了什么?3. 一次完整的HTTP请求过程4. 服务端主动终止连接的情况分析5. TCP的三次握手和四次挥手理解及面试题（很全面）6. defer和async的区别]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[浅谈浏览器内核]]></title>
    <url>%2F2019%2F05%2F23%2Fbrowser-kernel%2F</url>
    <content type="text"><![CDATA[内核简介一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：渲染引擎 和 js引擎 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 渲染引擎 。渲染引擎 ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 排版引擎 ，我们常说的浏览器内核主要指的就是 渲染引擎 。js引擎 ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。5 大主流浏览器(按时间顺序)IE 浏览器IE 是微软其下的浏览器，IE4~IE11 使用的都是 Trident 内核。Windows10 发布后，IE 将其内置浏览器命名为 Edge，使用新内核 EdgeHTML 。IE 从版本11开始，初步支持 WebGL 技术。IE8 的js引擎是 jscript ，IE9开始使用 Chakra ，这两个版本差别很大，Chakra 无论是速度还是标准化方面都很出色。Edge的JS引擎是 Chakra。Opera 浏览器Opera 是挪威 Opera Software ASA 公司其下的浏览器。1995年，Opera 公司发布第一版 Opera 浏览器，并使用 Presto 内核。2016年奇虎360和昆仑万维收购了 Opera 浏览器，并改用当时 Google 开源的 webkit 内核。之后 Opera 又跟随 Google 将浏览器内核改为 Blink 。Safari 浏览器Safari 是 Apple 公司自研的浏览器，主要用于 Apple 自身的产品。第二次浏览器大战也是从苹果公司发布 Safari 开始的。2003年，苹果公司在苹果手机上开发 Safari 浏览器，利用自己得天独厚的手机市场份额使 Safari 浏览器迅速成为世界主流浏览器。Safari 是最早使用 webkit 内核的浏览器，后来升级为 webkit2 内核，也是现在苹果默认的浏览器。Safari 的JS引擎是 JavaScriptCore 。Firefox 浏览器Firefox 是 Mozilla 公司旗下的浏览器，也就是 网景 公司后来的浏览器。网景被收购后，网景人员创办了 Mozilla 基金会，这是一个非营利性的组织，他们在2004年推出自己的浏览器 Firefox。Firefox 采用 Gecko 内核。Firefox 的JS引擎是 SpiderMonkey 。Gecko 是一个开源的项目，代码完全公开，因此受到很多人的青睐。Chrome 浏览器Chrome 是 Google 公司的浏览器。Chrome 最开始使用 webkit 分支出的 Chromium 内核，后来升级为 Blink 内核。Chrome 的JS引擎是 V8 。浏览器与JS引擎5 大内核Trident 内核也就是俗称的 IE内核 。Trident 内核迭代列表使用该内核的浏览器有：IE浏览器，多核浏览器。Presto(Opera前内核)(已废弃)Opera12.17及更早版本曾使用此内核，现已停止开发并废弃。Opera在2013年2月宣布放弃 Prosto，转而跟随 Chrome 使用 webkit 的分支 Chromium 引擎作为其核心。在 Chrome 与 2013年推出 Blink 核心后，Opera 也紧跟随其脚步使用 Blink 核心。Webkit 内核苹果公司研发的内核，后来升级为 webkit2。webkit内核包括：WebCore渲染引擎 和 JavaScriptCore解析引擎，均是从 KDE 的 KHTML 和 KJS 衍生而来的。2008年，Google 发布了 Chrome 浏览器，浏览器使用的内核叫做 Chromium 。Chromium fork 自开源引擎 Webkit ，Google 还研发了自己的JS引擎，即 V8引擎 ，极大的提高了 JavaScript 的运行速度。使用该内核的浏览器有：Safari，Android 默认浏览器，多核浏览器。Gecko 内核Netscape6 开始采用的内核，后来的 Mozilla Firefox 也采用了相同的内核。使用该内核的浏览器有：Mozilla Firefox，Mozilla SeaMonkey，Flock(早期版本)，K-Meleon 。Blink 内核2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 是一个由 Google 和 Opera Software 开发的浏览器 渲染引擎，Google 计划将这个渲染引擎作为 Chromium 计划的一部分。这一渲染引擎是开源引擎 WebKit 中WebCore 组件的一个分支，并且在 Chrome（28及往后版本）、Opera（15及往后版本）和 Yandex 浏览器中使用此外，Mozilla 与三星也达成合作协议开发”下一代”浏览器渲染引擎Servo。使用该内核的浏览器：Chrome，Opera，多核浏览器。补充：什么是 Chromium 计划Chromium 是 Google 为发展自家的浏览器 Google Chrome（以下简称Chrome）而开启的计划，所以 Chromium 相当于 Chrome 的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在 Chromium 上实现，待验证后才会应用在 Chrome 上，故 Chrome 的功能会相对落后但较稳定。所以，Chromium 和 Chrome 都是浏览器，Chromium 是开发版本，相比起 Chrome 更新速度快很多，有时数个小时就有一个新版本，不过普通人一般用 Chrome 就可以了。补充：为什么要搞一个新的 Blink 内核Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎。后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。EdgeHTML 内核Windows10后，IE内置浏览器 Edge 使用的内核。JS引擎为 Chakra 。使用该内核的浏览器：Edge。国内其他浏览器上面说到的5大主流浏览器(IE，Edge，Opera，Safari，Firefox，Chrome)，都是单核浏览器。相比较，国内很多浏览器则是双核或多核。即由1个 Trident + N个其他核心 组成的。常见的国内浏览器核心如下：360安全浏览器（1.0-5.0为 Trident，6.0为 Trident+Webkit ，7.0为 Trident+Blink ）360极速浏览器（7.5之前为 Trident+Webkit ，7.5为 Trident+Blink）猎豹安全浏览器（1.0-4.2版本为 Trident+Webkit，4.3及以后版本为 Trident+Blink）傲游浏览器（傲游1.x、2.x为 Trident，3.x为 Trident+Webkit）世界之窗浏览器（最初为 Trident，2013年采用 Trident+Chromium）搜狗高速浏览器（1.x为 Trident，2.0及以后版本为 Trident+Webkit）UC浏览器（ Blink+Trident）对于多核浏览器，Trident 指 兼容模式，而 其他内核 指 高速浏览模式 。最后参考文章：1. 浏览器内核-渲染引擎、js引擎2. 五大主流浏览器与四大内核3. 聊聊浏览器内核]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每天一个Linux命令]]></title>
    <url>%2F2019%2F05%2F16%2FLinux-Command%2F</url>
    <content type="text"><![CDATA[最近在学一个系列，每天一个 Linux 命令由于之前的笔记是写在 旧版博客 上的所以这里就不重新整理一份了，hahaha ~直接，传送门(๑•̀ㅂ•́)و✧]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于 hexo 的一次踩坑之旅]]></title>
    <url>%2F2019%2F05%2F14%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[关于 hexo 的一次踩坑之旅。之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。npm 权限问题因为之前安装 node 的时候自动安装了 npm ， 然后 Mac 下 npm 是默认安装在 /usr/local/ 路径下的，而该路径下很多目录和文件时 只读的 ，然后在安装 hexo 的时候，会报权限错误；12// 此处会报权限错误npm install -g hexo-cli解决方法网上找了一下，主要有四种解决方法：方法一为当前用户添加 npm安装目录 下所有文件的写权限。1sudo chown -R (whoami)(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;注意 ：如果路径是 /usr/local/ 的话不推荐这种方式，因为改权限会弄乱系统的权限，以后可能导致奇怪的错误(比如无法跟当前系统的其他用户共享)。方法二把 npm 卸载，并安装在一个有读写权限的路径下；推荐 ~/.npm-global 路径下；1.新建一个全局安装的路径；1mkdir ~/.npm-global2.配置 npm 使用新的路径；1npm config set prefix '~/.npm-global'3.打开或者新建 ~/.profile ，加入下面一行；1export PATH=~/.npm-global/bin:$PATH4.重新启动终端；1source ~/.profile5.测试：安装一个全局包试试12345npm install -g jslint[luncher@localhost aaa]$ ls ~/.npm-global/bin/jshint[luncher@localhost aaa]$方法三(推荐)使用 nvm 。nvm 可以在一台电脑上管理不同版本的 node，并且使用 nvm 安装 npm 后，npm 默认的安装路径是有读写权限的，也就是说，以后 npm 安装任何包都不用再使用 sudo 参数了。官网的解决方案：https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally；这里有个细节要注意：如果你本地已经安装了npm，你得先把本地的npm卸载，再安装nvm，再使用nvm安装npm；1.卸载已安装到全局的 node/npmnode 命令在 /usr/local/bin/node，npm 命令在 /usr/local/lib/node_modules/npm 下；查看已经安装的全局模块，以便卸载后再按不同的 node 版本重新安装；1npm ls -g --depth=0123sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录sudo rm /usr/local/bin/node #删除 nodecd /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm #删除全局 node 模块注册的软链2.安装 nvm1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash方法四借助第三方工具安装 nodemac 系统借助 brew 安装 node1brew install nodecentos 系统借助 yum 安装 node1yum install node部署分支问题由于 hexo 部署(hexo d) 的原理是，把站点上的所有静态文件删除，并把本地待部署的全部静态站点文件(/public/目录下) push 到远程库上，即完全覆盖；所以 hexo 官方文档有这样一句话 建议使用 master 作为写作分支，新建一个 public 分支作为发布分支。在按照这样创建分支后，发现网站打不开，然后在 github pages 的文档里看到这样几句话：Reponsitory 必须以 username.github.io 命令，这个 username 为 github 的账户名，网站部署成功后，使用 https://username.github.io 进行访问；必须使用 master 分支管理网站静态文件。注意这句话，必须使用 master 分支。emmmmm….. 就是这么坑。所以，github的建议是：使用 master 作为发布分支，使用 hexo 作为写作分支。Hexo 的使用Hexo 的使用流程一般如下：官方文档1.安装 hexo1npm install -g hexo-cli2.创建 项目123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install3.新建 文章1hexo new [layout] &lt;title&gt;4.生成静态文件123hexo g// orhexo generate5.本地预览123hexo s// or hexo server6.部署到服务器123hexo d// or hexo deploy关于主题主题的使用很简单，以下几个步骤即可：1.clone 主题到本地12cd your_blog_dirgit clone https://github.com/DIYgod/hexo-theme-sagiri.git themes/sagiri2.修改 hexo 配置文件使用主题12## Themes: https://hexo.io/themes/theme: sagiri3.修改 主题配置文件，进行个性化设置1// 路径为：your_blog_dir/themes/sagiri/_config.yml推荐主题搜集了一些比较好看的主题：sagiri ：https://diygod.meMaterial X ：https://xaoxuu.comInside ：https://blog.oniuo.comNext ：https://blog.tolvyou.cn旧版博客最后，就是巨丑的旧版博客了…….]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搬家啦]]></title>
    <url>%2F2019%2F05%2F13%2FMigrate-Blog%2F</url>
    <content type="text"><![CDATA[博客搬家啦新博客使用 hexo + github pages 来搭建关于旧博客，对，就是巨丑的那个 ~~点我！点我就能看 ….(づ｡◕‿‿◕｡)づ————————– 分 割 线 ————————–补充一下由于旧博客不是用 博客框架 ( Hexo，Jekyll，Wordpress )搭建的所以很多文章不是用 markdown 写的，部分用 markdown 写的文章也由于内容太长然后，迁移起来就比较麻烦…o(╯□╰)o所以，就直接给个链接代替了..hahaha ~]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
