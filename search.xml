<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[浅谈浏览器内核]]></title>
    <url>%2F2019%2F05%2F23%2Fbrowser-kernel%2F</url>
    <content type="text"><![CDATA[内核简介一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：渲染引擎 和 js引擎 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 渲染引擎 。渲染引擎 ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 排版引擎 ，我们常说的浏览器内核主要指的就是 渲染引擎 。js引擎 ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。5 大主流浏览器(按时间顺序)IE 浏览器IE 是微软其下的浏览器，IE4~IE11 使用的都是 Trident 内核。Windows10 发布后，IE 将其内置浏览器命名为 Edge，使用新内核 EdgeHTML 。IE 从版本11开始，初步支持 WebGL 技术。IE8 的js引擎是 jscript ，IE9开始使用 Chakra ，这两个版本差别很大，Chakra 无论是速度还是标准化方面都很出色。Edge的JS引擎是 Chakra。Opera 浏览器Opera 是挪威 Opera Software ASA 公司其下的浏览器。1995年，Opera 公司发布第一版 Opera 浏览器，并使用 Presto 内核。2016年奇虎360和昆仑万维收购了 Opera 浏览器，并改用当时 Google 开源的 webkit 内核。之后 Opera 又跟随 Google 将浏览器内核改为 Blink 。Safari 浏览器Safari 是 Apple 公司自研的浏览器，主要用于 Apple 自身的产品。第二次浏览器大战也是从苹果公司发布 Safari 开始的。2003年，苹果公司在苹果手机上开发 Safari 浏览器，利用自己得天独厚的手机市场份额使 Safari 浏览器迅速成为世界主流浏览器。Safari 是最早使用 webkit 内核的浏览器，后来升级为 webkit2 内核，也是现在苹果默认的浏览器。Safari 的JS引擎是 JavaScriptCore 。Firefox 浏览器Firefox 是 Mozilla 公司旗下的浏览器，也就是 网景 公司后来的浏览器。网景被收购后，网景人员创办了 Mozilla 基金会，这是一个非营利性的组织，他们在2004年推出自己的浏览器 Firefox。Firefox 采用 Gecko 内核。Firefox 的JS引擎是 SpiderMonkey 。Gecko 是一个开源的项目，代码完全公开，因此受到很多人的青睐。Chrome 浏览器Chrome 是 Google 公司的浏览器。Chrome 最开始使用 webkit 分支出的 Chromium 内核，后来升级为 Blink 内核。Chrome 的JS引擎是 V8 。浏览器与JS引擎5 大内核Trident 内核也就是俗称的 IE内核 。Trident 内核迭代列表使用该内核的浏览器有：IE浏览器，多核浏览器。Presto(Opera前内核)(已废弃)Opera12.17及更早版本曾使用此内核，现已停止开发并废弃。Opera在2013年2月宣布放弃 Prosto，转而跟随 Chrome 使用 webkit 的分支 Chromium 引擎作为其核心。在 Chrome 与 2013年推出 Blink 核心后，Opera 也紧跟随其脚步使用 Blink 核心。Webkit 内核苹果公司研发的内核，后来升级为 webkit2。webkit内核包括：WebCore渲染引擎 和 JavaScriptCore解析引擎，均是从 KDE 的 KHTML 和 KJS 衍生而来的。2008年，Google 发布了 Chrome 浏览器，浏览器使用的内核叫做 Chromium 。Chromium fork 自开源引擎 Webkit ，Google 还研发了自己的JS引擎，即 V8引擎 ，极大的提高了 JavaScript 的运行速度。使用该内核的浏览器有：Safari，Android 默认浏览器，多核浏览器。Gecko 内核Netscape6 开始采用的内核，后来的 Mozilla Firefox 也采用了相同的内核。使用该内核的浏览器有：Mozilla Firefox，Mozilla SeaMonkey，Flock(早期版本)，K-Meleon 。Blink 内核2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 博客，称将与苹果的开源浏览器核心 Webkit 分道扬镳，在 Chromium 项目中研发 Blink 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。Blink 是一个由 Google 和 Opera Software 开发的浏览器 渲染引擎，Google 计划将这个渲染引擎作为 Chromium 计划的一部分。这一渲染引擎是开源引擎 WebKit 中WebCore 组件的一个分支，并且在 Chrome（28及往后版本）、Opera（15及往后版本）和 Yandex 浏览器中使用此外，Mozilla 与三星也达成合作协议开发”下一代”浏览器渲染引擎Servo。使用该内核的浏览器：Chrome，Opera，多核浏览器。补充：什么是 Chromium 计划Chromium 是 Google 为发展自家的浏览器 Google Chrome（以下简称Chrome）而开启的计划，所以 Chromium 相当于 Chrome 的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在 Chromium 上实现，待验证后才会应用在 Chrome 上，故 Chrome 的功能会相对落后但较稳定。所以，Chromium 和 Chrome 都是浏览器，Chromium 是开发版本，相比起 Chrome 更新速度快很多，有时数个小时就有一个新版本，不过普通人一般用 Chrome 就可以了。补充：为什么要搞一个新的 Blink 内核Blink 其实是 WebKit 的分支，如同 WebKit 是 KHTML 的分支。Google 的 Chromium 项目此前一直使用 WebKit(WebCore) 作为渲染引擎。后来，由于苹果推出的 WebKit2 与 Chromium 的沙箱设计存在冲突，所以 Chromium 一直停留在 WebKit，并使用移植的方式来实现和主线 WebKit2 的对接。这增加了 Chromium 的复杂性，且在一定程度上影响了 Chromium 的架构移植工作。基于以上原因，Google 决定从 WebKit 衍生出自己的 Blink 引擎（后由 Google 和 Opera Software 共同研发），将在 WebKit 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 WebKit 的影响，创造一个完全独立的 Blink 引擎。EdgeHTML 内核Windows10后，IE内置浏览器 Edge 使用的内核。JS引擎为 Chakra 。使用该内核的浏览器：Edge。国内其他浏览器上面说到的5大主流浏览器(IE，Edge，Opera，Safari，Firefox，Chrome)，都是单核浏览器。相比较，国内很多浏览器则是双核或多核。即由1个 Trident + N个其他核心 组成的。常见的国内浏览器核心如下：360安全浏览器（1.0-5.0为 Trident，6.0为 Trident+Webkit ，7.0为 Trident+Blink ）360极速浏览器（7.5之前为 Trident+Webkit ，7.5为 Trident+Blink）猎豹安全浏览器（1.0-4.2版本为 Trident+Webkit，4.3及以后版本为 Trident+Blink）傲游浏览器（傲游1.x、2.x为 Trident，3.x为 Trident+Webkit）世界之窗浏览器（最初为 Trident，2013年采用 Trident+Chromium）搜狗高速浏览器（1.x为 Trident，2.0及以后版本为 Trident+Webkit）UC浏览器（ Blink+Trident）对于多核浏览器，Trident 指 兼容模式，而 其他内核 指 高速浏览模式 。最后参考文章：浏览器内核-渲染引擎、js引擎五大主流浏览器与四大内核聊聊浏览器内核]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>web前端</tag>
        <tag>浏览器</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[每天一个Linux命令]]></title>
    <url>%2F2019%2F05%2F16%2FLinux-Command%2F</url>
    <content type="text"><![CDATA[最近在学一个系列，每天一个 Linux 命令由于之前的笔记是写在 旧版博客 上的所以这里就不重新整理一份了，hahaha ~直接，传送门(๑•̀ㅂ•́)و✧]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>后端</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[关于 hexo 的一次踩坑之旅]]></title>
    <url>%2F2019%2F05%2F14%2Fhello-hexo%2F</url>
    <content type="text"><![CDATA[关于 hexo 的一次踩坑之旅。之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。npm 权限问题因为之前安装 node 的时候自动安装了 npm ， 然后 Mac 下 npm 是默认安装在 /usr/local/ 路径下的，而该路径下很多目录和文件时 只读的 ，然后在安装 hexo 的时候，会报权限错误；12// 此处会报权限错误npm install -g hexo-cli解决方法网上找了一下，主要有四种解决方法：方法一为当前用户添加 npm安装目录 下所有文件的写权限。1sudo chown -R (whoami)(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;注意 ：如果路径是 /usr/local/ 的话不推荐这种方式，因为改权限会弄乱系统的权限，以后可能导致奇怪的错误(比如无法跟当前系统的其他用户共享)。方法二把 npm 卸载，并安装在一个有读写权限的路径下；推荐 ~/.npm-global 路径下；1.新建一个全局安装的路径；1mkdir ~/.npm-global2.配置 npm 使用新的路径；1npm config set prefix '~/.npm-global'3.打开或者新建 ~/.profile ，加入下面一行；1export PATH=~/.npm-global/bin:$PATH4.重新启动终端；1source ~/.profile5.测试：安装一个全局包试试12345npm install -g jslint[luncher@localhost aaa]$ ls ~/.npm-global/bin/jshint[luncher@localhost aaa]$方法三(推荐)使用 nvm 。nvm 可以在一台电脑上管理不同版本的 node，并且使用 nvm 安装 npm 后，npm 默认的安装路径是有读写权限的，也就是说，以后 npm 安装任何包都不用再使用 sudo 参数了。官网的解决方案：https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally；这里有个细节要注意：如果你本地已经安装了npm，你得先把本地的npm卸载，再安装nvm，再使用nvm安装npm；1.卸载已安装到全局的 node/npmnode 命令在 /usr/local/bin/node，npm 命令在 /usr/local/lib/node_modules/npm 下；查看已经安装的全局模块，以便卸载后再按不同的 node 版本重新安装；1npm ls -g --depth=0123sudo rm -rf /usr/local/lib/node_modules #删除全局 node_modules 目录sudo rm /usr/local/bin/node #删除 nodecd /usr/local/bin &amp;&amp; ls -l | grep "../lib/node_modules/" | awk '&#123;print $9&#125;'| xargs rm #删除全局 node 模块注册的软链2.安装 nvm1curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash方法四借助第三方工具安装 nodemac 系统借助 brew 安装 node1brew install nodecentos 系统借助 yum 安装 node1yum install node部署分支问题由于 hexo 部署(hexo d) 的原理是，把站点上的所有静态文件删除，并把本地待部署的全部静态站点文件(/public/目录下) push 到远程库上，即完全覆盖；所以 hexo 官方文档有这样一句话 建议使用 master 作为写作分支，新建一个 public 分支作为发布分支。在按照这样创建分支后，发现网站打不开，然后在 github pages 的文档里看到这样几句话：Reponsitory 必须以 username.github.io 命令，这个 username 为 github 的账户名，网站部署成功后，使用 https://username.github.io 进行访问；必须使用 master 分支管理网站静态文件。注意这句话，必须使用 master 分支。emmmmm….. 就是这么坑。所以，github的建议是：使用 master 作为发布分支，使用 hexo 作为写作分支。Hexo 的使用Hexo 的使用流程一般如下：官方文档1.安装 hexo1npm install -g hexo-cli2.创建 项目123hexo init &lt;folder&gt;cd &lt;folder&gt;npm install3.新建 文章1hexo new [layout] &lt;title&gt;4.生成静态文件123hexo g// orhexo generate5.本地预览123hexo s// or hexo server6.部署到服务器123hexo d// or hexo deploy关于主题主题的使用很简单，以下几个步骤即可：1.clone 主题到本地12cd your_blog_dirgit clone https://github.com/DIYgod/hexo-theme-sagiri.git themes/sagiri2.修改 hexo 配置文件使用主题12## Themes: https://hexo.io/themes/theme: sagiri3.修改 主题配置文件，进行个性化设置1// 路径为：your_blog_dir/themes/sagiri/_config.yml推荐主题搜集了一些比较好看的主题：sagiri ：https://diygod.meMaterial X ：https://xaoxuu.comInside ：https://blog.oniuo.comNext ：https://blog.tolvyou.cn旧版博客最后，就是巨丑的旧版博客了…….]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>web前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[博客搬家啦]]></title>
    <url>%2F2019%2F05%2F13%2FMigrate-Blog%2F</url>
    <content type="text"><![CDATA[博客搬家啦新博客使用 hexo + github pages 来搭建关于旧博客，对，就是巨丑的那个 ~~点我！点我就能看 ….(づ｡◕‿‿◕｡)づ————————– 分 割 线 ————————–补充一下由于旧博客不是用 博客框架 ( Hexo，Jekyll，Wordpress )搭建的所以很多文章不是用 markdown 写的，部分用 markdown 写的文章也由于内容太长然后，迁移起来就比较麻烦…o(╯□╰)o所以，就直接给个链接代替了..hahaha ~]]></content>
      <categories>
        <category>其他</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub.Quick StartCreate a new post1$ hexo new "My New Post"More info: WritingRun server1$ hexo serverMore info: ServerGenerate static files1$ hexo generateMore info: GeneratingDeploy to remote sites1$ hexo deployMore info: Deployment]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
