<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,Jianww</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jian2333.github.io/"/>
  <updated>2019-09-01T15:17:03.669Z</updated>
  <id>http://jian2333.github.io/</id>
  
  <author>
    <name>Jianww</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>nginx学习（1）</title>
    <link href="http://jian2333.github.io/2019/08/25/nginx-1/"/>
    <id>http://jian2333.github.io/2019/08/25/nginx-1/</id>
    <published>2019-08-25T09:08:41.000Z</published>
    <updated>2019-09-01T15:17:03.669Z</updated>
    
    <content type="html"><![CDATA[<p>因为公司的需要，网站需要接入网关，对域名有校验</p><p>于是研究了一下 <code>nginx</code> 和 <code>代理</code></p><p>发现还挺好玩的。。</p><p>然后，</p><p>就总结了一下这份</p><p><strong>nginx-1 ！</strong></p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>nginx</code> 的功能太多，简单来说就是可以<strong>配置相应的服务器</strong>。</p><p>可以配置包括但不限于：</p><ul><li>代理</li><li>域名过滤</li><li>IP过滤</li><li>等等其他，具体可以参考 <a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">中文文档</a> 以及 <a href="https://docs.nginx.com/nginx/" target="_blank" rel="noopener">英文文档</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>mac 安装 <code>nginx</code> 很简单，先安装 <code>homebrew</code> ，然后安装 <code>nginx</code></p><h4 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 <code>homebrew</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>出现以下 <code>log</code> 表示安装完成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installation successful!</span><br></pre></td></tr></table></figure><p>可以使用以下命令查看 <code>homebrew</code> 的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br><span class="line">Homebrew 2.1.7</span><br><span class="line">Homebrew/homebrew-core (git revision 270f; last commit 2019-07-18)</span><br></pre></td></tr></table></figure><h4 id="常用的-brew-命令"><a href="#常用的-brew-命令" class="headerlink" title="常用的 brew 命令"></a>常用的 <code>brew</code> 命令</h4><ul><li>brew 搜索软件 ：<code>brew search nginx</code></li><li>brew 安装软件 ：<code>brew install nginx</code></li><li>brew 卸载软件 ：<code>brew uninstall nginx</code></li><li>brew 升级 ：<code>sudo brew update</code></li><li>brew 查看安装信息 ：<code>sudo brew info nginx</code></li><li>brew 查看已安装软件 ：<code>brew list</code></li></ul><h4 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 <code>nginx</code></h4><p>安装 <code>nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew install nginx</span><br></pre></td></tr></table></figure><p>启动 <code>nginx</code> 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew services start nginx</span><br></pre></td></tr></table></figure><p>利用 <code>http://localhost:8080</code> 进行访问，如果出现如下页面，说明 <code>nginx</code> 启动成功</p><p><img src="/images/nginx1-1.jpg" alt></p><p><strong>相关 文件地址</strong></p><ul><li><strong>host</strong> ：<code>/private/etc/hosts</code></li><li><strong>nginx</strong> ：<ul><li>文件配置路径：<code>/usr/local/etc/nginx/nginx.conf</code></li><li>服务器默认路径：<code>usr/local/var/www</code></li><li>安装路径：<code>/usr/local/Caller/nginx/1.17.1</code></li></ul></li></ul><h4 id="常用的-nginx-命令"><a href="#常用的-nginx-命令" class="headerlink" title="常用的 nginx 命令"></a>常用的 <code>nginx</code> 命令</h4><p><strong>在任意路径下执行都可以！ 🤪</strong></p><ul><li>启动：<code>nginx</code> / <code>nginx -c /usr/local/etc/nginx/nginx.conf</code></li><li>更新配置文件后重启：<code>nginx -s reload</code></li><li>校验配置文件：<code>nginx -t</code></li><li>停止：<ul><li>快速停止：<code>nginx -s stop</code></li><li>正常停止(执行完当前队列)：<code>nginx -s quit</code></li></ul></li><li>查看是否启动 <code>nginx</code>：<ul><li><code>ps -ef|grep nginx</code> ：查看是否有 <code>master</code> 的进程</li><li>记住 <strong>第二列</strong> 的 <code>pid</code> 号 xxx，可以用来 <strong>杀进程</strong></li></ul></li><li>停止(杀掉进程)：<ul><li>快速停止(立刻)：<code>kill -TERM xxx</code></li><li>正常停止：<code>kill -QUIT xxx</code></li><li>和上面一样：<code>kill -INT xxx</code></li></ul></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>这里主要说下，在公司用到的，<strong>代理</strong></p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><strong>需求</strong></p><p>公司的后端接入了网关，对域名有校验，只有符合规则的域名才能调用网关</p><p>于是，本地开发的时候，如果用 <code>http://localhost:3001</code> 去调开发环境的后端，会失败，因为通过不了网关</p><p>所以，需要做一个代理，代理 <code>xxx.ym</code> 域名，当调用 <code>/</code> 的时候调本地的前端，当调用 <code>/api</code> 的时候调服务器上的后端，这样就能和开发环境的后端连调了</p><p><strong>步骤</strong></p><p>上面说了需求，那如果要实现这样效果，我们要执行以下几个步骤：</p><ul><li>配置 <code>host</code> 文件</li><li>配置 <code>nginx.conf</code> 文件</li><li>启动 <code>nginx</code></li><li>启动 <code>前端开发环境</code></li><li>使用 <code>http://xxx.ym</code> 地址进行测试</li></ul><p><code>配置 host 文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># host 文件</span><br><span class="line">127.0.0.1 xxx.ym</span><br></pre></td></tr></table></figure><p><code>配置 nginx.conf 文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf 文件</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.ym;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3001;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /api &#123;</span><br><span class="line">            proxy_pass   http://10.1.0.67:9523;</span><br><span class="line">            proxy_set_header Host xxx.yy.ym;</span><br><span class="line">            proxy_set_header X-Forward-For $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">        location /oba3/api &#123;</span><br><span class="line">            proxy_pass   http://10.1.0.67:9523;</span><br><span class="line">            proxy_set_header Host xxx.yy.ym;</span><br><span class="line">            proxy_set_header X-Forward-For $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>启动或重启 nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 启动</span><br><span class="line">nginx</span><br><span class="line">// 或重启</span><br><span class="line">nginx -s reload</span><br><span class="line">// 或先校验文件正确性，再重启</span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><code>启动前端环境</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /xxxx</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><code>打开网站</code></p><p>在浏览器输入 <code>http://xxx.ym</code> 打开就可以啦</p><h4 id="搭配-host-文件"><a href="#搭配-host-文件" class="headerlink" title="搭配 host 文件"></a>搭配 <code>host</code> 文件</h4><p>搭配 <code>host</code> 文件，可以在本地 <strong>打开任意域名，跳转到任意想跳转的地址</strong>，包括但不限于跳转到 <code>https://www.google.com</code>，<code>https://www.baidu.com</code>，<code>http://localhost:4000</code> 等任意地址。</p><p>我们可以这样理解：</p><ul><li><p>多个 <code>server块</code> 才会匹配 <code>server_name</code> ，1个话不匹配直接使用</p></li><li><p><code>nginx</code> 是服务器上用的，所以想像成服务器的话，1个服务器有1个ip，但是可以有多个 域名 解析成这个ip，所以当不同的域名访问这个服务器的时候，怎么区分不同的域名呢？，于是， <code>server_name</code> 这个字段就出现了，它可以使用 <strong>正则和通配符</strong> 来匹配域名，决定 <strong>哪个域名使用那个 server块</strong>，进而使用相应的配置。<strong>端口</strong> 相当于二次校验。</p></li><li><p>然后可以使用 <code>location / + prox_pass</code> 进行代理</p></li><li><p>通过配合 <code>host</code> 文件使用，<code>host</code> 文件可以将指定域名映射到指定ip，比如可以把任意网站xxx映射到 <code>127.0.0.1</code> ，我们可以搭配nginx的 <code>server块</code> 的 <code>端口号</code>，然后进行代理，代理到任意 ip上</p></li><li><p>举个🌰，下面的配置可以把 <code>longge666.huiwan</code> 映射成本地的 <code>http://localhost:4000</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># host 文件</span><br><span class="line"># .com域名 chrome会自动转换成 https，跳转不了</span><br><span class="line">127.0.0.1 longge666.huiwan</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf 文件</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  longge666.huiwan;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://localhost:4000;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/nginx1-2.jpg" alt></p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对 <code>nginx</code> 的理解暂时就这么多</p><p>后面有了新的理解再继续补充～ 😋</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为公司的需要，网站需要接入网关，对域名有校验&lt;/p&gt;&lt;p&gt;于是研究了一下 &lt;code&gt;nginx&lt;/code&gt; 和 &lt;code&gt;代理&lt;/code&gt;&lt;/p&gt;&lt;p&gt;发现还挺好玩的。。&lt;/p&gt;&lt;p&gt;然后，&lt;/p&gt;&lt;p&gt;就总结了一下这份&lt;/p&gt;&lt;p&gt;&lt;strong&gt;nginx-1 ！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="http://jian2333.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="nginx" scheme="http://jian2333.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>omp项目总结</title>
    <link href="http://jian2333.github.io/2019/08/18/omp/"/>
    <id>http://jian2333.github.io/2019/08/18/omp/</id>
    <published>2019-08-18T08:15:00.000Z</published>
    <updated>2019-08-18T11:24:13.763Z</updated>
    
    <content type="html"><![CDATA[<p>连续加班1个月了，天天加班10点多，到家11点半，周末也在加班，基本没有哪天是12点以前睡的。明显感觉扛不住了，身体越来越差，一度处于 <strong>猝死的边缘</strong> …..</p><p>好在这个项目终于完成了(其实还没完全结束，还在修bug阶段，然后又被安排去另一个项目了…7天开发时间，1个星期+2个周六，<strong>感觉要猝死了</strong> …..)</p><p>吐槽不要太多</p><p>当然，收获也是很多</p><p>所以，就总结了一哈….</p><a id="more"></a><p><img src="/images/omp-1.jpg" alt></p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><strong>开发周期</strong></p><p>周期没啥好写的，就是1个月，从开发到上线，总共一个月…</p><p><strong>吐槽</strong></p><p>吐槽不要太多…</p><p>开发周期太短，项目太赶了。</p><p>最初计划是1个月时间上线。开发2周，测试联调2周，然而实际情况是，开发和测试同步进行。</p><p>开发1个页面，测试就开始测，然后就是前期测试一直在催，页面开发好了没，开发好了没。。。 这 xx$%^^&amp;*， 开发怎么能赶上测试的进度….</p><p>其次，开发预计时间，安排的极不合理。所有开发预计时间都是最理想状态的。就是没人打扰，不会遇到难点，只做开发一件事的时间。然而实际情况是，有太多的第三方因素会影响开发进度，比如：</p><ul><li>遇到难点：自己或者其他同事遇到难点，解决一个难点就花了2个人一上午的时间</li><li>封装公共组件：这些任务是没有考虑在开发预计时间内的，那个时间只考虑了页面的开发时间…</li><li>其他事情：<ul><li>比如开会，各种会议。</li><li>测试叫去改bug等(测试和开发同步进行的….)</li><li>后端接口有问题，联调的时候一直在等后端的接口正常</li></ul></li></ul><p>总之就是，<strong>时间太赶，2周时间开发根本不够</strong> 。</p><p>然后吧，就是疯狂加班了。。。</p><p>住的离公司近还好，像我这种这么远的，每天10点多下班，回去到家就11点半了，每天要12点多才能睡觉，而且，<strong>长期没有休息</strong>，周末能休息下还好，问题是周末还得加班…..</p><p>再然后吧，身体越来越差了，天天都困的要死，感觉要猝死了。。。</p><p>所以，接下来，要<strong>赶紧改变下当前的状态</strong>，这是当前最重要的事了..</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>ok，吐槽完毕，说下收获吧。</p><p>花费了这么多精力，以及无数个加班。。。收获还是挺多的。。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><h4 id="敏捷开发流程"><a href="#敏捷开发流程" class="headerlink" title="敏捷开发流程"></a>敏捷开发流程</h4><p>项目采用的是敏捷开发，和传统开发最大的区别，就是没有预期的开发时间。</p><p>传统开发会有充足的开发计划，xxxx时间段开发，xxxx时间段测试阶段，然后上线。目的是 按时交付<strong>高质量的产品</strong>。</p><p>而敏捷开发(omp项目就算吧)，是有需求了，立刻开发，并且 <strong>开发和测试同步进行</strong>，目的 <strong>最短时间内</strong> 交付产品。</p><h4 id="git使用规范：git-flow"><a href="#git使用规范：git-flow" class="headerlink" title="git使用规范：git-flow"></a>git使用规范：git-flow</h4><p>项目使用 <code>git-flow</code> 规范来管理代码，常见的分支结构有：</p><ul><li><strong>master</strong> ：用来存储发布后的稳定代码分支，一般会使用 <code>tag</code> 标签进行管理</li><li><strong>hotfix-xxx</strong> ：热修复线上bug的分支，从 <code>master</code> 创建，直接合并到 <code>master</code></li><li><strong>dev</strong> ：开发分支，从 <code>master</code> 创建</li><li><strong>test</strong> ：测试分支，从 <code>master</code> 创建</li><li><strong>release</strong> ：发布分支，从 <code>master</code> 创建</li><li><strong>feature-xxx</strong> ：新需求分支，从 <code>master</code> 创建，合并到 <code>dev</code></li><li><img src="/images/omp-2.jpg" alt></li></ul><p>其中有几点要求：</p><ul><li>一个功能一个分支，一起提交到远程服务器，待稳定后，删除对应的 <code>feature</code> 分支</li><li>流程基本上是：<code>master</code> –&gt; <code>feat-xx</code> –&gt; <code>dev</code> –&gt; <code>test</code> –&gt; <code>release</code> –&gt; <code>master</code></li><li>不能从 <code>dev</code> <code>merge</code> 代码到 <code>feature</code> 分支，如果有依赖其他分支的功能从其他分支直接 <code>merge</code> 到当前分支：<code>feat-A</code> –&gt; <code>feat-B</code></li></ul><h3 id="代码方面"><a href="#代码方面" class="headerlink" title="代码方面"></a>代码方面</h3><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><p><strong>生命周期及钩子函数</strong></p><p><code>vue</code> 的生命周期包含下面8个阶段：</p><ul><li><strong>beforeCreate</strong> ：<code>vue</code> 实例的挂载元素 <code>$el</code> 和数据对象 <code>data</code> 都是 <code>undefined</code>，还未初始化</li><li><strong>created</strong> ：完成了 <code>data</code> 的初始化，<code>el</code> 还未初始化</li><li><strong>beforeMount</strong> ：<code>vue</code> 实例的 <code>$el</code> 和 <code>data</code> 都初始化了，相关的 <code>render</code> 函数首次被调用。实例已完成以下的配置：编译模板，把 <code>data</code> 里面的数据和模板生成 <code>html</code> 。注意此时 <code>html</code> 还没有挂载到页面上</li><li><strong>mounted</strong> ：在 <code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的 <code>html</code> 内容替换 <code>el</code> 属性指向的 <code>DOM对象</code> 。完成模板中的 <code>html</code> 渲染到 <code>html</code> 页面中，此过程中进行 <code>ajax交互</code></li><li><strong>beforeUpdate</strong> ：在数据更新之前调用，发生在虚拟 <code>DOM</code> 重新渲染和打补丁之前调用。可以在该钩子中进一步地更改状态，不会触发附加的渲染状态</li><li><strong>updated</strong> ：在由于数据更改导致的虚拟 <code>DOM</code> 重新渲染和打补丁之后调用。调用时，组件 <code>DOM</code> 已经更新，所以可以依赖与 <code>DOM</code> 的操作。然而在大多数情况下应该避免在此期间更改状态，因为这可能会导致无限循环。该钩子函数在服务器端渲染期间不可用</li><li><strong>beforeDestory</strong> ：在实例销毁之前调用。实例仍然完全可用</li><li><strong>destoryed</strong> ：在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子函数在服务器端渲染期间不被调用</li></ul><p><strong>父子组件的传值</strong></p><ul><li><strong>父 –&gt; 子</strong> ：<ul><li>用 <code>props</code> 传值</li><li>可以设定 <code>类型</code> 和 <code>默认值</code></li><li><code>props</code> 传的值在 <code>data</code> 里不能重复定义</li><li><code>props</code> 传的值默认会双向绑定，及 子页面的值改变了，会导致父页面值的改变，如果期望单向绑定，有2种方法解决这个问题：<ul><li><strong>子页面data里定义 aa: props的值</strong></li><li><strong>子页面使用 <code>computed</code> 的值</strong></li></ul></li></ul></li><li><strong>子 –&gt; 父</strong> ：<ul><li>用 <code>this.$emit(&#39;aa&#39;, params)</code> 传事件</li><li>在父组件使用 <code>@aa = &#39;yy&#39;</code> 来捕获事件</li></ul></li></ul><p><strong>组件的封装</strong></p><p>太多了，后续补充…</p><p><strong>双向绑定的深刻理解（important！！）</strong></p><p><strong>对象的双向绑定</strong></p><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html#检测变化的注意事项" target="_blank" rel="noopener">官网说明</a></p><p><code>vue</code> 中的双向绑定，只有在页面加载时，在 <code>data</code> 里定义了的对象，才能自动双向绑定，如果 <code>data</code> 里没有定义这个对象，直接修改 <code>v-model</code> 的值，对应组件的值(UI)是不会自动修改的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></table></figure><p>如果要双向绑定未在 <code>data</code> 里定义的对象的属性，应该使用下面的方法</p><ul><li><p><strong>添加单个属性</strong> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `Vue.set(object, propertyName, value)`</span></span><br><span class="line">Vue.set(vm.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `this.$set(object, propertyName, value)`，`this.$set` 是 `Vue.set` 的别名</span></span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.someObject, 'b', 2)</span><br></pre></td></tr></table></figure></li><li><p><strong>添加多个属性</strong> ：</p><p>直接使用 <code>Object.assign()</code> 或 <code>_.extend()</code> 添加到对象上的新属性不会触发更新。应该使用 原对象与要混合进去的对象的属性<strong>一起创建一个新的对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替 `Object.assign(this.someObject, &#123;a: 1, b: 2&#125;)`</span></span><br><span class="line"><span class="keyword">this</span>.someObject = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.someObject, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>数组的双向绑定</strong></p><p><a href="https://cn.vuejs.org/v2/guide/list.html#数组更新检测" target="_blank" rel="noopener">官网说明</a></p><p><strong>数组：能双向绑定的情况</strong></p><ul><li><p><strong>变异方法(修改自身数组)</strong> ：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li><li><p><strong>非变异方法/替换数组(返回新数组)</strong> ：</p><ul><li>filter()</li><li>concat()</li><li>slice()</li></ul><p>使用 <code>非变异方法</code> 时，要使用一个新数组替换原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>数组：不能双向绑定的情况</strong></p><p>由于 <code>JavaScript</code> 的限制， <code>Vue</code> <strong>不能</strong> 检测以下数组的变动：</p><ul><li>利用索引直接设置一个数组项的值，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>修改数组的长度，例如：<code>vm.items.length = newLength</code></li></ul><p>举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span><span class="comment">// 不是响应性的</span></span><br><span class="line">vm.items.length = <span class="number">2</span><span class="comment">// 不是响应性的</span></span><br></pre></td></tr></table></figure><p>为了解决第一个问题，可以使用以下两种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// vm.$set</span></span><br><span class="line">vm.$<span class="keyword">set</span>(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure><p>为了解决第二个问题，可以使用 <code>splice</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><h4 id="iview"><a href="#iview" class="headerlink" title="iview"></a>iview</h4><p><strong>Form表单</strong></p><p>心得两点：</p><p><strong>validator 的使用</strong></p><p><img src="/images/omp-3.jpg" alt></p><p><img src="/images/omp-4.jpg" alt></p><p><img src="/images/omp-5.jpg" alt></p><p><img src="/images/omp-6.jpg" alt></p><p><strong>reset 的使用</strong></p><p><img src="/images/omp-7.jpg" alt></p><p><strong>table</strong></p><p>基本就是一些配置吧</p><p>参考 <a href="https://www.iviewui.com/components/table" target="_blank" rel="noopener">iview table</a></p><p><strong>其他</strong></p><p>参考 <a href="https://www.iviewui.com/docs/guide/install" target="_blank" rel="noopener">iview 官网</a></p><h4 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h4><p><code>echarts</code> 要显示图表需要两个步骤</p><ul><li><strong>初始化</strong></li><li><strong>使用 setOption</strong> 方法更新数据</li></ul><p>所以</p><p>对于 <strong>静态图表</strong> 来说，上面2个步骤可以放到一起</p><p>对于 <strong>动态图表</strong> 来说，上面2个步骤则要分开，并且每次获取数据后(获取数据方式不限)需要使用 <code>setOption</code> 方法更新数据</p><p>举个例子</p><ul><li><p><strong>初始化图表</strong></p><p><img src="/images/omp-8.jpg" alt></p></li><li><p><strong>初始化 websocket</strong></p><p><img src="/images/omp-9.jpg" alt></p></li><li><p><strong>websocket获取对象并调用 setOption 方法更新图表</strong></p><p><img src="/images/omp-10.jpg" alt></p><p><img src="/images/omp-11.jpg" alt></p></li></ul><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p><strong>跳转传值</strong></p><ul><li><p>使用 <code>query</code> ：该模式下 <code>to</code> 的地址只能使用 <code>path</code> 而不能使用 <code>name</code></p></li><li><p>使用 <code>params</code> ：无要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = &#123;</span><br><span class="line">  type: <span class="string">'add'</span>, </span><br><span class="line">  code: <span class="string">'aaa'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>: <span class="string">'terminalEdit'</span>, <span class="attr">params</span>: params)</span><br></pre></td></tr></table></figure></li></ul><p><strong>跳转监听事件</strong></p><ul><li><p>使用 <code>watch</code> 监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 跳转到当前页面和离开当前页面都会触发该监听事件</span></span><br><span class="line">    <span class="comment">// 跳转到当前页面时，to.params 是获取的参数</span></span><br><span class="line">    <span class="comment">// 离开当前页面时，from.params 是当前页的参数</span></span><br><span class="line">    <span class="keyword">let</span> params = to.params</span><br><span class="line">    <span class="keyword">if</span> (params &amp;&amp; params.vehicleId) &#123;</span><br><span class="line">      <span class="keyword">this</span>.vehicleId = params.vehicleId</span><br><span class="line">      <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>mounted</code> 的时候也可以添加捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">this</span>.$route.params</span><br><span class="line">  <span class="keyword">if</span> (params &amp;&amp; params.vehicleId) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vehicleId = params.vehicleId</span><br><span class="line">    <span class="keyword">this</span>.init()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p>后续补充….</p><h3 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h3><h4 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h4><p><strong>分支的使用</strong></p><p>互相切换</p><p>合并</p><p>没啥好说的….</p><p><strong>pull注意项</strong></p><p>如果你本地有修改了但未 <code>commit</code> 的代码，这时候 <code>git pull</code> 的话，会提示 <code>pull</code> 下来的代码未提交(自动合并)，这时候，你 <strong>一定要提交 pull 下来的代码！！</strong></p><p><strong>贮藏</strong></p><p>巧用 <strong>贮藏</strong></p><p>把当前未提交的代码贮藏起来，然后去做其他的任务，之后回来，随时启用贮藏的代码</p><p><img src="/images/omp-14.jpg" alt></p><p><strong>重置到之前的提交</strong></p><p>如果 <code>commit</code> 没有 <code>push</code> 到远程服务器，可以 <code>重置到当前提交</code></p><p>如果 <code>commit</code> 已经在 远程服务器上了，<strong>暂时还不知道怎么重置</strong> …..</p><h4 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h4><ul><li><p><strong>eslint 配置</strong> ：</p><p><img src="/images/omp-12.jpg" alt></p></li><li><p><strong>highLighting Level</strong> ：这个不能全局修改，有个替代的方法，把 <code>warning</code> 提示关掉，但并没有从根本上解决问题</p><p><img src="/images/omp-13.jpg" alt></p></li></ul><h2 id="感受及总结"><a href="#感受及总结" class="headerlink" title="感受及总结"></a>感受及总结</h2><h3 id="技能方面"><a href="#技能方面" class="headerlink" title="技能方面"></a>技能方面</h3><p>说下接下来技能方面的计划吧</p><p>感觉官方文档还是很重要的，比如上面说的，<code>vue</code> 中双向绑定无效，<code>iview</code> 中的 <code>validator</code> 和 <code>reset</code> 无效等问题，官网其实都有很好的描述。</p><p>所以，再仔细过一遍官方文档，还是很有必要的。</p><p>so，接下来几个要做的：</p><ul><li><strong>vue-loader 官方文档</strong></li><li><strong>vuex 官方文档</strong></li><li><strong>TypeScript</strong> ：放后一步</li></ul><h3 id="接下来的重心"><a href="#接下来的重心" class="headerlink" title="接下来的重心"></a>接下来的重心</h3><p>这个月基本就是在疯狂加班了，没时间做饭，没时间健身，没时间做任何事…</p><p>所以，接下来有几点要改变的：</p><ul><li>减少加班</li><li>学习新技能</li><li>重新开始健身 (今年前5个月打卡了90天，6月到现在2个半月了吧，打卡不到10天….)</li></ul><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>公司的椅子坐的好舒服。。。</p><p>本来想买个公司同款的椅子(单买1k多一点)，然后卖家只对公，不卖给个人。。。</p><p>然后 <em>一怒之下</em> ，买个了3k的人体工程学椅子。。。</p><p>emmmm…</p><p>少去两次医院就回本了</p><p>少去三次就赚了</p><p>四次就血赚！！…</p><p>然后，终于可以愉快的在家里加班了！…</p><p>(๑•̀ㅂ•́)و✧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;连续加班1个月了，天天加班10点多，到家11点半，周末也在加班，基本没有哪天是12点以前睡的。明显感觉扛不住了，身体越来越差，一度处于 &lt;strong&gt;猝死的边缘&lt;/strong&gt; …..&lt;/p&gt;&lt;p&gt;好在这个项目终于完成了(其实还没完全结束，还在修bug阶段，然后又被安排去另一个项目了…7天开发时间，1个星期+2个周六，&lt;strong&gt;感觉要猝死了&lt;/strong&gt; …..)&lt;/p&gt;&lt;p&gt;吐槽不要太多&lt;/p&gt;&lt;p&gt;当然，收获也是很多&lt;/p&gt;&lt;p&gt;所以，就总结了一哈….&lt;/p&gt;
    
    </summary>
    
      <category term="日记本" scheme="http://jian2333.github.io/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="git" scheme="http://jian2333.github.io/tags/git/"/>
    
      <category term="vue" scheme="http://jian2333.github.io/tags/vue/"/>
    
      <category term="iview" scheme="http://jian2333.github.io/tags/iview/"/>
    
      <category term="webpack" scheme="http://jian2333.github.io/tags/webpack/"/>
    
      <category term="echarts" scheme="http://jian2333.github.io/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Mac下配置多个Git账户</title>
    <link href="http://jian2333.github.io/2019/07/08/multi-git/"/>
    <id>http://jian2333.github.io/2019/07/08/multi-git/</id>
    <published>2019-07-08T13:30:47.000Z</published>
    <updated>2019-07-12T16:28:41.497Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，我们使用 <code>git</code> 都是配置一个全局 <code>user.name</code> 和 <code>user.email</code> ，每次要用时使用该全局参数即可。</p><p>但有时候，我们可能要同时使用多个不同的远程仓库，比如个人用的 <code>github</code> 使用 <code>邮箱a</code> ，公司用的 <code>gitlab/gitea</code> 使用 <code>邮箱b</code> ，等等。</p><p>那么，如何在本地的Mac上配置多个git账户呢。</p><p>我们继续往下看 ～</p><a id="more"></a><p><img src="/images/mg-1.jpg" alt></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>起因很简单，就是因为自己一直用 <code>github</code> ，然后公司现在用 <code>gitea</code> 。</p><p>然后，邮箱还不一样，也就是 <code>生成的密钥</code> 是不一样的，所以要配置多个 <code>git</code> 账号在一台电脑上。</p><p>然后，就有了本文….</p><h4 id="相关细节"><a href="#相关细节" class="headerlink" title="相关细节"></a>相关细节</h4><p>关于 <strong>一台电脑使用多种类型远程仓库(<code>github</code>、<code>gitlab</code>、<code>gitea</code> 等)是否需要配多个git</strong> ，这里有几个细节需要说明：</p><ul><li>邮箱决定生成的密钥key是否一致；</li><li><code>ssh</code> 连接才需要密钥(配置)，<code>http</code> 连接不需要密钥/邮箱(配置)；</li><li>对于未配置 <code>user.name</code> 和 <code>user.email</code> 的 <code>git</code> 账号，<code>git</code> 提交记录里默认使用当前电脑 <code>登陆的用户名</code> 和 <code>电脑名</code> ；</li></ul><p><strong>所以：</strong></p><ul><li>如果使用 <code>http</code> 类型来 <code>pull</code>、<code>push</code> 代码，<strong>不需要配置！！</strong></li><li>如果多种类型的远程仓库，使用的是同一个邮箱，<strong>也不需要配置！！</strong></li><li>如果需要配置的话，<strong>需要配置每个项目的 <code>user.name</code> 和 <code>user.email</code></strong> ，而 <strong>不能配置全局的 <code>user.name</code> 和 <code>user.email</code></strong> 。</li></ul><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><h4 id="清除全局的-user-name-和-user-email"><a href="#清除全局的-user-name-和-user-email" class="headerlink" title="清除全局的 user.name 和 user.email"></a>清除全局的 <code>user.name</code> 和 <code>user.email</code></h4><p>一般情况下，可能之前已使用了以下脚本进行了全局配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxx"</span>// 配置全局用户名，如github上注册的用户名</span><br><span class="line">git config --global user.email <span class="string">"yyy"</span>// 配置全局邮箱，如github上注册的邮箱</span><br></pre></td></tr></table></figure><p>如果不确定是否已经全局配置，可使用下面的命令进行查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><p>如果已经配置了，先删掉全局配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><h4 id="为每个账号生成一对密钥"><a href="#为每个账号生成一对密钥" class="headerlink" title="为每个账号生成一对密钥"></a>为每个账号生成一对密钥</h4><p>首先进入保存密钥的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh// 进入目录，该目录下保存生成的密钥</span><br></pre></td></tr></table></figure><p>然后，根据 <code>账号邮箱</code> 生成 <code>密钥</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"xxx@qq.com"</span></span><br></pre></td></tr></table></figure><p>输入完成后，会有如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/qiu/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>这里要求对密钥进行命名。</p><ul><li>默认的文件名是 <code>id_rsa</code> 。</li><li>为了方便区分，我们可以命名为 <code>id_rsa_github</code> 和 <code>id_rsa_gitea</code> ，接下来一直回车，直到密钥生成。</li><li>每次生成的密钥都是成对的，比如 <code>id_rsa_github</code> 和 <code>id_rsa_github.pub</code> 。其中 <code>id_rsa_github</code> 是私钥，是保存在 <code>本地</code> 用来验证服务器的，不能泄露的；<code>id_rsa_github.pub</code> 是公钥，是添加到 <code>托管网站</code> 上的。</li><li><img src="/images/mg-2.jpg" alt></li></ul><h4 id="私钥添加到本地"><a href="#私钥添加到本地" class="headerlink" title="私钥添加到本地"></a>私钥添加到本地</h4><p><code>SSH</code> 协议的原理，就是在托管网站上使用 <code>公钥</code> ，在本地使用 <code>私钥</code> 。这样本地仓库就可以和远程仓库进行通信了。</p><p>上一步已经生成了 <code>密钥文件</code> ，接下来需要使用 <code>密钥文件</code> 。首先是在本地使用 <code>密钥文件</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github// 将github私钥添加到本地</span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitea// 将gitea私钥添加到本地</span><br></pre></td></tr></table></figure><p>为了校验本地是否添加成功，可以使用 <code>ssh-add -l</code> 命令进行查看</p><h4 id="对本地密钥进行配置"><a href="#对本地密钥进行配置" class="headerlink" title="对本地密钥进行配置"></a>对本地密钥进行配置</h4><p>由于添加了多个 <code>密钥文件</code> ，所以需要对这多个密钥进行管理。在 <code>.ssh</code> 目录下新建一个 <code>config</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure><p>文件中的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host github.com // 网站的别名，随意取</span><br><span class="line">HostName github.com // 托管网站的域名</span><br><span class="line">User xxx // 托管网站上的用户名</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github // 使用的密钥文件</span><br><span class="line">Port zz// 可选，端口</span><br><span class="line"></span><br><span class="line">// Gitea的配置相同</span><br><span class="line">Host git.ym</span><br><span class="line">HostName git.ym</span><br><span class="line">User yyy</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitea</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>config</code> 文件中不允许有任何注释，所以 <code>//</code> 注释<strong>请删掉</strong>！</li><li><code>Host</code> 别名是用来替代 <code>HostName</code> 域名的，所以为了使原来的配置继续生效，建议 <strong><code>Host</code> 设置成和 <code>HostName</code> 一样</strong> 。</li></ul><h4 id="公钥添加到托管网站上"><a href="#公钥添加到托管网站上" class="headerlink" title="公钥添加到托管网站上"></a>公钥添加到托管网站上</h4><p>以 <code>github</code> 为例</p><ul><li>先在本地复制公钥。进入 <code>.ssh</code> 目录，复制 <code>id_rsa_github.pub</code> 里的公钥。</li><li>然后登陆 <code>github</code>，添加复制的公钥。</li><li><img src="/images/mg-3.jpg" alt></li></ul><p>可以使用以下命令来测试，是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="如果是用远程仓库clone下来"><a href="#如果是用远程仓库clone下来" class="headerlink" title="如果是用远程仓库clone下来"></a>如果是用远程仓库clone下来</h4><p><strong>使用 <code>SSH</code> 协议</strong></p><p><del>也不用任何操作？(不确定，待跟进..)</del></p><p><strong>使用 <code>HTTP</code> 协议</strong></p><p>不需要任何操作，<code>git clone</code> 的时候会要求你输入 <code>user.name</code> 和 <code>user.email</code> 。</p><p><strong>PS：</strong>关于保存密码：</p><ul><li>第一次 <code>git clone</code>、<code>git pull</code>、<code>git push</code> 的时候会要求你输入密码，输入之后可以选择 <strong>永久保存</strong> ，如果之后 <code>github/gitlab/gitea</code> 的账号密码修改了，在进行相应操作时会要求你重新输入密码。</li><li>如果点了取消，以后每次 <code>git pull</code>、<code>git push</code> 都要输入用户名和密码，很麻烦…可以通过以下命令记住密码(仅限 <code>http协议</code> )。</li><li>输入 <code>git config credential.helper store</code> ，输入之后下次 <code>git pull</code>、<code>git push</code> 时会要求输入密码，输入一次后 <code>git</code> 就会一直记住了。</li></ul><h4 id="如果是本地已有的仓库"><a href="#如果是本地已有的仓库" class="headerlink" title="如果是本地已有的仓库"></a>如果是本地已有的仓库</h4><p>需要配置每个仓库的 <code>user.name</code> 和 <code>user.email</code> ：</p><p>进入到对应仓库的目录下。</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"xxx"</span></span><br><span class="line">git config user.email <span class="string">"yyy@qq.com"</span></span><br></pre></td></tr></table></figure><p>OK！大功告成 ！</p><hr><p>更新：<code>hexo</code> 中 <code>git</code> 记录正常，但直接部署的脚本 <code>hexo d</code> 异常，该脚本<del>貌似使用全局参数？</del> 就是使用的全局 <code>user.name</code> 和 <code>user.email</code> ….</p><p>关于如何修改 <code>hexo d</code> 使用当前项目的 <code>user.name</code> 和 <code>user.email</code></p><p>参考 <a href="https://github.com/hexojs/hexo/issues/2125" target="_blank" rel="noopener">能否hexo deploy 时指定git账户 #2125</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下，我们使用 &lt;code&gt;git&lt;/code&gt; 都是配置一个全局 &lt;code&gt;user.name&lt;/code&gt; 和 &lt;code&gt;user.email&lt;/code&gt; ，每次要用时使用该全局参数即可。&lt;/p&gt;&lt;p&gt;但有时候，我们可能要同时使用多个不同的远程仓库，比如个人用的 &lt;code&gt;github&lt;/code&gt; 使用 &lt;code&gt;邮箱a&lt;/code&gt; ，公司用的 &lt;code&gt;gitlab/gitea&lt;/code&gt; 使用 &lt;code&gt;邮箱b&lt;/code&gt; ，等等。&lt;/p&gt;&lt;p&gt;那么，如何在本地的Mac上配置多个git账户呢。&lt;/p&gt;&lt;p&gt;我们继续往下看 ～&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://jian2333.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>重排重绘 与性能优化</title>
    <link href="http://jian2333.github.io/2019/06/23/reflow-repaint/"/>
    <id>http://jian2333.github.io/2019/06/23/reflow-repaint/</id>
    <published>2019-06-23T06:46:43.000Z</published>
    <updated>2019-07-08T15:51:14.392Z</updated>
    
    <content type="html"><![CDATA[<p>性能优化是个老生常谈的话题了，重排重绘也是性能优化的一种。</p><p>减少或避免重排重绘，能有效地提升浏览器性能。</p><p>那么，如何减少或避免重排重绘呢？</p><p>本文将从 <code>css</code> 和 <code>js</code> 两个角度来分析 ～</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/images/rr-1.jpg" alt></p><h4 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h4><ul><li>重排又叫 <code>reflow</code> ，指的是为了重新渲染部分或整个页面，重新计算页面元素的 <strong>位置</strong> 和 <strong>几何结构</strong> 的进程。</li><li>简单来说，就是当元素改变的时候，将会影响文档内容或结构，或元素位置，此过程叫做 <code>reflow</code> 。</li><li><code>reflow</code> 是导致 <code>DOM脚本</code> 执行效率低下的关键因素之一。页面上任何一个节点触发了 <code>reflow</code> ，都会导致它的 <strong>子节点</strong> 和 <strong>祖先节点</strong> 重新渲染。</li></ul><p><strong>那么，什么时候会导致 reflow 发生呢</strong></p><ul><li>改变窗口大小</li><li>改变文字大小</li><li>添加/删除样式表</li><li>内容的改变，（用户在输入框中输入内容也会）</li><li>激活伪类，如 <code>:hover</code></li><li>操作 <code>class</code> 属性</li><li>脚本操作 <code>DOM</code></li><li>计算 <code>offsetWidth</code> 和 <code>offsetHeight</code></li><li>设置 <code>style</code> 属性</li></ul><table><thead><tr><th>常见的重排元素</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>width</td><td>height</td><td>padding</td><td>margin</td></tr><tr><td>display</td><td>border-width</td><td>border</td><td>top</td></tr><tr><td>position</td><td>font-size</td><td>float</td><td>bottom</td></tr><tr><td>overflow-y</td><td>font-weight</td><td>over</td><td>left</td></tr><tr><td>font-family</td><td>line-height</td><td>vertical-align</td><td>right</td></tr><tr><td>clear</td><td>white-space</td><td>text-align</td><td>min-height</td></tr></tbody></table><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><ul><li>重绘又叫 <code>repaint</code> ，指的是当元素改变时，将不会影响元素在当前页面中的位置（比如 <code>background-color</code>，<code>border-color</code>，<code>visibility</code>），而仅仅会应用新的样式重绘此元素的过程。</li></ul><p><strong>那么，什么时候会发生 repaint 呢</strong></p><table><thead><tr><th>常见的重绘元素</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>color</td><td>border-style</td><td>visibility</td><td>background</td></tr><tr><td>text-decoration</td><td>background-image</td><td>background-position</td><td>background-repeat</td></tr><tr><td>outline-color</td><td>outline</td><td>outline-style</td><td>border-radius</td></tr><tr><td>outline-width</td><td>box-shadow</td><td>background-size</td></tr></tbody></table><h3 id="js方面的优化"><a href="#js方面的优化" class="headerlink" title="js方面的优化"></a>js方面的优化</h3><p>js方面主要是从 <code>DOM</code> 角度来优化重排重绘。包括以下几方面：</p><ul><li>文档片段</li><li>使用 <code>innerHTML</code></li><li>服务端渲染</li><li>使用事件代理</li><li>减少 <code>HTMLCollection</code> 访问</li><li>尽量不修改影响比较大的 <code>DOM</code></li><li>函数节流</li></ul><p><strong>文档片段</strong></p><ul><li><p>在多次操作 <code>DOM</code> 时，比如给一个 <code>&lt;ul&gt;</code> 元素添加多个 <code>&lt;li&gt;</code> 时，每添加一次 <code>&lt;li&gt;</code> 都会进行一次 <code>现场更新(即reflow)</code> 。</p></li><li><p>使用 <code>文档片段</code> 的话，只会进行一次 <code>现场更新(reflow)</code> 。</p></li><li><p>使用 <code>appendChild()</code> 时，只有 <code>文档片段</code> 的 <code>子节点</code> 会添加到目标，<code>文档片段</code> 本身不会被添加到目标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>),</span><br><span class="line">    fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">    item,</span><br><span class="line">    i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  fragment.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'item'</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">list.appendChild(fragment);</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用 innerHTML</strong></p><ul><li><p>先拼接好要渲染的 <code>html字符串</code> 。</p></li><li><p>然后使用 <code>innerHTML</code> 进行一次渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>),</span><br><span class="line">    html = <span class="string">''</span>,</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  html += <span class="string">'&lt;li&gt;item'</span> + i + <span class="string">'&lt;/li&gt;/br'</span>;</span><br><span class="line">&#125;</span><br><span class="line">list.innerHTML = html;</span><br></pre></td></tr></table></figure></li></ul><p><strong>服务端渲染</strong></p><ul><li>和 <strong>使用 innerHTML</strong> 类似，只是服务端会返回 <strong>拼接好的 html字符串</strong> ，而不需要前端拼接 <code>html字符串</code> 了。</li><li>然后直接使用 <code>innerHTML</code> 进行一次渲染即可。</li></ul><p><strong>使用事件代理</strong></p><ul><li>《JavaScript 高级程序设计》P675。</li><li>页面上的 <code>事件处理程序的数量</code> 和 <code>页面响应用户交互的速度</code> 呈负相关。所以，如果减少 <code>事件处理程序的数量</code> ，那 <code>响应速度</code> 将会更快。</li><li>对于同一个事件，可以在 <code>对应DOM</code> 上定义，也可以在 <code>父元素</code> 上定义一大片事件，后者则是事件代理。</li></ul><p><strong>减少 HTMLCollection 访问</strong></p><ul><li><p>任何时候访问 <code>HTMLCollection</code> 都很耗资源。</p></li><li><p>所以可以把要访问的 <code>HTMLCollectionp[i]</code> 存放到一个变量里，之后要用时直接访问变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>),</span><br><span class="line">    image,</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>,len=images.length;i&lt;len;i++) &#123;</span><br><span class="line">  image = images[i];</span><br><span class="line">  <span class="comment">// 一些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>尽量不修改影响比较大的 DOM</strong></p><ul><li>尽可能限制 <code>reflow</code> 的影响范围，尽可能在低层级的 <code>DOM</code> 上进行操作。</li></ul><p><strong>函数节流</strong></p><ul><li><p><code>函数节流</code> 的基本思想是，不能在没有间断的情况下(比如 <code>onresize</code>)连续重复执行某些代码，因为这可能导致浏览器崩溃。</p></li><li><p>实现过程：第一次调用函数时，会创建一个 <strong>定时器</strong> ，在指定的时间间隔之后再执行代码；第二次调用该函数时，会先清除前一次的 <strong>定时器</strong> 并 <strong>设置另一个</strong> 。</p></li><li><p>目的是 只有在执行函数的请求停止了一段时间后才执行(新函数) 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未使用函数节流</span></span><br><span class="line"><span class="comment">// 频繁的更新DOM，可能导致浏览器崩溃</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用函数节流</span></span><br><span class="line"><span class="comment">// 只有前面函数停止一段时间后，才会执行第二个函数</span></span><br><span class="line"><span class="comment">// 提高了性能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">  clearTimeout(method.Id);</span><br><span class="line">  method.Id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span><br><span class="line">  div.style.height = div.offsetHeight + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  throttle(resizeDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="css方面的优化"><a href="#css方面的优化" class="headerlink" title="css方面的优化"></a>css方面的优化</h3><p><code>css</code> 方面的优化主要是指 <code>非DOM</code> 方面的优化。包括以下几方面：</p><ul><li>尽量使用 <code>className</code> 来一次修改样式，而不是高频的每次只修改一条样式。</li><li>多次修改 <code>DOM</code> 样式时，可以使用 <code>先改成display:none --&gt; 修改n次样式 --&gt; 最后改成display:xxx</code> 。</li><li>为动画的元素使用绝对定位 <code>absolute</code> 或 <code>fixed</code> ，减少附近元素的重排重绘。</li><li>尽量少使用 <code>table</code> 。因为 <code>table</code> 一个单元格样式的改变，会导致整个 <code>table</code> 重排重绘，性能消耗巨大。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;性能优化是个老生常谈的话题了，重排重绘也是性能优化的一种。&lt;/p&gt;&lt;p&gt;减少或避免重排重绘，能有效地提升浏览器性能。&lt;/p&gt;&lt;p&gt;那么，如何减少或避免重排重绘呢？&lt;/p&gt;&lt;p&gt;本文将从 &lt;code&gt;css&lt;/code&gt; 和 &lt;code&gt;js&lt;/code&gt; 两个角度来分析 ～&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
      <category term="性能优化" scheme="http://jian2333.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>水平、垂直和完全居中</title>
    <link href="http://jian2333.github.io/2019/06/22/centered/"/>
    <id>http://jian2333.github.io/2019/06/22/centered/</id>
    <published>2019-06-22T09:20:23.000Z</published>
    <updated>2019-06-22T16:43:58.386Z</updated>
    
    <content type="html"><![CDATA[<p>之前也总结过很多居中方法，但都没有写下来（对，我就是懒，加个书签就完事了…..）..</p><p><del>然后吧</del> 没有然后，每次要看的时候就很麻烦</p><p>再然后吧，还是决定写下来好了…</p><p>╮(╯▽╰)╭</p><p>所以，本文将总结几种常用的水平、垂直和完全居中方法</p><p>ok，正文开始！</p><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文将介绍几种常用的水平、垂直和完全居中方法。</p><p>主要方法有：<code>3种绝对定位</code>、<code>flex</code>、<code>table</code>、<code>伪元素::after</code> 等方法。</p><p><img src="/images/ct-1.jpg" alt></p><p>后面的例子都以此 <code>html</code> 为样本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"centered"</span>&gt;</span></span><br><span class="line">    我是居中文字</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong> <code>绝对定位+负margin</code>、<code>只使用绝对定位</code> 和 <code>绝对定位+transform</code> 对应的9种居中里，有7种 <code>position</code> 值可以是下面任意一种组合。</p><ul><li>父元素为 <code>position: relative</code> ，子元素为 <code>position: absolute</code> 。</li><li>父元素默认 <code>position</code> ，子元素为 <code>position:relative</code> 。</li><li>剩下 <code>只使用绝对定位(垂直居中)</code> 和 <code>只使用绝对定位(完全居中)</code> 两种，<code>position</code> 只能使用 <code>relative + absolute</code> 的第一种方式。</li></ul><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p><strong>内联元素</strong></p><ul><li><p><code>内联元素</code> 直接使用 <code>text-align: center</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模拟table</strong></p><ul><li><p><code>区块元素</code> 模拟成 <code>table</code> ，然后使用 <code>text-align: center</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>flex</strong></p><ul><li><p><code>任何元素</code> 改成 <code>弹性盒子</code> 类型，然后使用 <code>justify-content: center</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位+负margin</strong></p><ul><li><p><strong>设置子元素：</strong>使用 <code>left: 50%</code> 定位到父元素水平中心，然后 <code>margin-left: -xpx</code> 向左偏移子元素 <strong>宽的一半</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;<span class="comment">/* 100px的一半 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>只使用绝对定位</strong></p><ul><li><p><strong>设置子元素</strong> <code>left: 0</code> ，<code>right: 0</code> 和 <code>margin: x auto</code> 来实现水平方向居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;<span class="comment">/* 不确定 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位+translateX</strong></p><ul><li><p><strong>设置子元素：</strong> 使用 <code>left: 50%</code> 定位到父元素的水平中心，然后 <code>transform: translateX(-50%)</code> 向左偏移子元素 <strong>宽的一半</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><p><strong>单行+行高固定</strong></p><ul><li><p>设置 <code>line-height</code> 等于 <code>height</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>行高不固定</strong></p><ul><li><p>设置上下 <code>padding</code> 相等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span></span><br><span class="line">  padding: <span class="number">40px</span>;  <span class="comment">/* 水平方向不能使用auto，即使我们只想设置垂直方向的padding */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>伪元素::before（推荐，技巧）</strong></p><ul><li><p>利用父元素的 <code>vertical-align: middle</code> 属性来实现垂直居中。</p></li><li><p><code>vertical-align</code> 适用于 <code>内联元素</code> ，所以子元素要设置成 <code>display:inline</code> 或 <code>display:inline-block</code> 。</p></li><li><p><code>vertical-align</code> 是相对 <strong>所有子元素垂直居中</strong>，如果有一个子元素的高度为 100%，那就会 <strong>相对父元素垂直居中</strong> 了 。所以，我们可以添加一个高度为100%的伪元素来达到这种效果。</p><p><img src="/images/ct-2.jpg" alt></p><p><img src="/images/ct-3.jpg" alt></p></li><li><p>实现代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> soild pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span>: &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模拟table</strong></p><ul><li><p>把元素模拟成 <code>table</code> ，然后使用 <code>vertical-align: middle</code> 来实现垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>transform</strong></p><ul><li><p>和 <code>水平居中</code> 类似，只是改成垂直方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>flex</strong></p><ul><li><p>利用 <code>align-items: center</code> 来实现 <code>垂直居中</code> 。</p></li><li><p><code>align-self</code> 也可以 <code>垂直居中</code> 。区别是 <code>align-items</code> 设置在 <code>弹性容器</code> 上，<code>align-self</code> 设置在 <code>弹性子元素</code> 上。</p></li><li><p><code>align-content</code> 也可以达到 <code>垂直居中</code> 的效果，但是必须设置 <code>flex-wrap: wrap</code> 或 <code>flex-flow: xx wrap</code> （<code>wrap-reverse</code> 也可）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位</strong></p><ul><li><p>和 <code>水平居中</code> 类似，分为 <code>绝对定位+负margin</code>、<code>只使用绝对定位</code> 和 <code>绝对定位+translateY</code> 三种。</p></li><li><p>最后一种在上面 <code>transform</code> 已经介绍过了，这里只介绍前面两种。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">绝对定位+负margin</span></span><br><span class="line"><span class="comment">适用于 高度确定 的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30px</span>;<span class="comment">/* 60px的一半 */</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">只使用绝对定位</span></span><br><span class="line"><span class="comment">适用于 高度不确定 的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;<span class="comment">/* 不确定 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="完全居中"><a href="#完全居中" class="headerlink" title="完全居中"></a>完全居中</h3><p><code>完全居中</code> 就是把 <code>水平居中</code> 和 <code>垂直居中</code> 组合起来，使用的大部分方法前面都已经介绍过了。</p><h4 id="元素高度确定"><a href="#元素高度确定" class="headerlink" title="元素高度确定"></a>元素高度确定</h4><p><strong>绝对定位+负margin</strong></p><ul><li><p>使用 <code>left: 50%</code> 和 <code>top: 50%</code> 定位到父元素的完全中心，然后使用 <code>margin-left:-xpx</code> 和 <code>margin-top: -ypx</code> 来水平和垂直偏移子元素 <strong>一半的宽高</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="元素高度不确定"><a href="#元素高度不确定" class="headerlink" title="元素高度不确定"></a>元素高度不确定</h4><p><strong>只使用绝对定位</strong></p><ul><li><p>使用 <code>left: 0</code>、<code>top: 0</code>、<code>right:0</code>、<code>bottom: 0</code> 和 <code>margin: auto</code> 来设置成 <code>完全居中</code> 。</p></li><li><p><code>position</code> 只能使用 <code>relative + absolute</code> 这种。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位+translate</strong></p><ul><li><p>使用 <code>left: 50%</code> 和 <code>top: 50%</code> 来定位到父元素的完全中心，然后使用 <code>transform: translate(-50%, -50%)</code> 向左上偏移子元素 <strong>宽高的一半</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-%50, -50%);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模拟table</strong></p><ul><li><p>模拟成 <code>table</code> ，然后使用 <code>text-align: center</code> 和 <code>vertical-align: middle</code> 来达到 <code>完全居中</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>伪元素::before（推荐，技巧）</strong></p><ul><li><p>水平方向使用 <code>dispaly:inline-block</code> 和 <code>text-align: center</code> 来实现。</p></li><li><p>垂直方向使用 <code>::before</code> 伪元素来实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>flex</strong></p><ul><li><p>使用 <code>justify-content: center</code> 来水平居中。</p></li><li><p>使用 <code>align-items: center</code> 来垂直居中。</p></li><li><p><code>align-self</code> 和 <code>align-content</code> 也可用来垂直居中，只是前者要使用在 <code>弹性子容器</code> 上，后者要添加 <code>flex-wrap: wrap</code> （或相关）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也总结过很多居中方法，但都没有写下来（对，我就是懒，加个书签就完事了…..）..&lt;/p&gt;&lt;p&gt;&lt;del&gt;然后吧&lt;/del&gt; 没有然后，每次要看的时候就很麻烦&lt;/p&gt;&lt;p&gt;再然后吧，还是决定写下来好了…&lt;/p&gt;&lt;p&gt;╮(╯▽╰)╭&lt;/p&gt;&lt;p&gt;所以，本文将总结几种常用的水平、垂直和完全居中方法&lt;/p&gt;&lt;p&gt;ok，正文开始！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>初识 webpack</title>
    <link href="http://jian2333.github.io/2019/06/16/webpack/"/>
    <id>http://jian2333.github.io/2019/06/16/webpack/</id>
    <published>2019-06-16T13:22:50.000Z</published>
    <updated>2019-06-16T16:28:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器。</p><p>当使用 webpack 打包时，webpack 会从一个或多个入口处，递归地构建一个 <code>依赖关系图(dependency graph)</code> ，其中包含应用程序所需要的所有模块，然后打包成一个或多个 <code>bundle</code> 文件。</p><p>webpack 可以打包 <code>js</code>、<code>css</code>、<code>sass</code>、<code>less</code> 、<code>typescript</code>、<code>图片</code> 等文件，默认只能打包 <code>js</code> 格式的文件，其他格式的文件需要加载 <code>loader</code> 后再打包。</p><p>编写本文的时候，webpack 的最新版为 <code>v4.34.0</code> 。</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>webpack 可使用 <code>终端/命令行</code> 来执行，当然，webpack 还是 <strong>高度可配置的</strong> 。</p><p>webpack 有以下四个 <strong>核心概念</strong> ：</p><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><p><strong>入口(entry)</strong></p><ul><li><p>webpack 打包时的入口；</p></li><li><p>可以有一个或多个入口；</p></li><li><p>入口会依赖其他文件，webpack 会以此为依据，进而找到其他依赖的文件和关系，然后一起打包成一个或多个 <code>bundle.js</code> 文件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/main.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>出口(output)</strong></p><ul><li><p>用于描述打包后的 <code>bundle.js</code> 文件的存放路径和命名规则，默认值为 <code>./dist</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'public'</span>),</span><br><span class="line">    <span class="comment">// 等效于 path: __dirname + '/public',</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// __dirname 是node.js的一个全局变量，表示当前执行脚本所在的目录</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>loader</strong></p><ul><li><p><code>loader</code> 能够让 webpack 打包那些 <code>非javascript</code> 文件；</p></li><li><p><code>loader</code> 需要单独安装并在 <code>webpack.config.js</code> 中的 <code>modules</code> 关键字下进行配置，<code>loader</code> 的配置包括以下几个方面：</p><ul><li><code>test</code> ：一个用以匹配 <code>loader</code> 所处理文件的扩展名的正则表达式(必须) ；</li><li><del><code>loader</code></del> <code>use</code> ：<code>loader</code> 的名称(必须) ；</li><li><del><code>include/exclude</code> ：手动添加必须处理的文件(文件夹) 或屏蔽不需处理的文件(文件夹) ；</del></li><li><del><code>query</code> ：为 <code>loader</code> 提供额外的处理选项 ；</del></li></ul></li><li><p><a href="https://www.webpackjs.com/concepts/loaders/" target="_blank" rel="noopener">更多信息</a> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>插件(plugins)</strong></p><ul><li><p><code>loader</code> 被用来转换某些类型的模块，而插件则用来执行范围更广的任务；</p></li><li><p>插件的范围包括：打包、优化、压缩、重新定义环境中的变量等其他功能；</p></li><li><p>插件的使用和 <code>loader</code> 类似，先使用 <code>npm</code> 安装，然后在 <code>webpack.config.js</code> 中的 <code>plugins</code> 关键字下添加该插件的一个实例( <code>plugins</code> 是一个数组 )。</p></li><li><p><a href="https://www.webpackjs.com/concepts/plugins/" target="_blank" rel="noopener">更多信息</a> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>:<span class="regexp">/\.css/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>:<span class="regexp">/\.ts/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">'./src/index.html'</span> &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他要点"><a href="#其他要点" class="headerlink" title="其他要点"></a>其他要点</h3><p><strong>webpack 可配置的</strong></p><ul><li><p>可使用 <code>终端/命令行</code> 来执行 webpack，也可配置好 <code>webpack.config.js</code>，然后直接使用 <code>webpack</code> 命令；</p></li><li><p>全局安装的使用 <code>webpack</code> 命令，非全局安装的使用 <code>node_modules/.bin/webpack</code> 命令；</p></li><li><p>这个命令会自动引用 <code>webpack.config.js</code> 文件中的配置选项；</p></li><li><p>如果没有 <code>webpack.config.js</code> 配置文件，也可使用下面的命令来打包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 未配置 webpack.config.js</span><br><span class="line">// npx webpack &#123;入口&#125; -o &#123;出口&#125;</span><br><span class="line">npx webpack app/main.js -o public/bundle.js</span><br><span class="line"></span><br><span class="line">// 已配置 webpack.config.js，未配置 package.json</span><br><span class="line">npx webpack --config webpack.config.js</span><br><span class="line">npx webpack</span><br><span class="line">webpack</span><br><span class="line"></span><br><span class="line">// 已配置 webpack.config.js，已配置 package.json</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></li></ul><p><strong>script 脚本命令</strong></p><ul><li><p>命令配置在 <code>package.json</code> 中的 <code>scripts</code> 关键字中；</p></li><li><p><code>start</code> 是 特殊的脚本命令，使用 <code>npm start</code> 即可，其他脚本 <code>xx</code> ，则需使用 <code>npm run xx</code> 来执行，比如 <code>npm run build</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpackdemo1"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"webpack sample project"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.34.0"</span>,</span><br><span class="line">    <span class="string">"webpack-cli"</span>: <span class="string">"^3.3.4"</span>,</span><br><span class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.7.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/wp-1.jpg" alt></p></li></ul><p><strong>生成 Source Maps （使调试更容易）</strong></p><ul><li><p><code>source maps</code> 提供了一种对应编译文件和源文件的方法，使编译后的代码可读性更高，更容易调试；</p></li><li><p>在 <code>webpack.config.js</code> 中的 <code>devtool</code> 关键字添加 <code>devtool</code> 选项即可，一般使用 <code>source-map</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">"source-map"</span>,</span><br><span class="line">  entry: __dirname + <span class="string">'/app/main.js'</span>,  <span class="comment">// 已多次提到的唯一入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">'/public'</span>,    <span class="comment">// 打包后文件存放的路径</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>   <span class="comment">// 打包后输出的文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.webpackjs.com/configuration/devtool/" target="_blank" rel="noopener">更多信息</a> ；</p></li></ul><p><strong>webpack 构建本地服务器（支持 模块热替换）</strong></p><ul><li><p>webpack 可构建本地服务器，然后可配置一系列相关的设置；</p></li><li><p>本地服务器支持 <strong>模块热替换</strong> 功能，即修改 JS 代码后，浏览器会自动刷新页面；</p></li><li><p>使用方法：</p><ul><li><p>安装 <code>webpack-dev-server</code> 组件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-decv-server</span><br></pre></td></tr></table></figure></li><li><p>在 <code>webpack.config.js</code> 中的 <code>devServer</code> 关键字中进行配置；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./public'</span>,<span class="comment">// 本地服务器所加载的页面所在的目录</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,<span class="comment">// 不跳转</span></span><br><span class="line">    inline: <span class="literal">true</span><span class="comment">// 实时刷新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>package.json</code> 中的 <code>scripts</code> 中添加对应的命令( <code>server</code> 命令 )；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>终端/命令行</code> 输入 <code>npm run server</code> 即可启动服务器；</p><p><img src="/images/wp-2.jpg" alt></p></li></ul></li><li><p>更多信息：</p><ul><li><a href="https://segmentfault.com/a/1190000006178770#articleHeader3" target="_blank" rel="noopener">使用webpack构建本地服务器</a></li><li><a href="https://www.webpackjs.com/guides/development/#使用-webpack-dev-server" target="_blank" rel="noopener">使用 webpack-dev-server</a></li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>新建项目</strong></p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpackdemo</span><br><span class="line"><span class="built_in">cd</span> webpackdemo</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></li></ul><p><strong>安装 webpack 和 webpack-cli</strong></p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure></li></ul><p><strong>配置 webpack</strong></p><ul><li><p>新建 <code>app</code> 文件夹，用来存放 <code>js</code> 源文件；</p></li><li><p>新建 <code>public</code> 文件夹，用来存放 <code>html</code> 文件和打包生成的 <code>bundle.js</code> 文件；</p></li><li><p>当前项目结构如下：</p><p><img src="/images/wp-3.jpg" alt></p></li><li><p>配置 webpack 的 入口和出口，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"source-map"</span>,</span><br><span class="line">    entry: __dirname + <span class="string">'/app/main.js'</span>,  <span class="comment">// 已多次提到的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/public'</span>,    <span class="comment">// 打包后文件存放的路径</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>   <span class="comment">// 打包后输出的文件名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./public'</span>,    <span class="comment">// 本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">false</span>,   <span class="comment">// 不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>    <span class="comment">// 实时刷新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>配置 script 命令</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p><strong>编写代码</strong></p><ul><li><p>在 <code>/app</code> 文件夹中添加 <code>Greeter.js</code> 和 <code>main.js</code> 文件；</p></li><li><p>在 <code>/public</code> 文件夹中添加 <code>index.html</code> 文件；</p></li><li><p>文件内容分别如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Greetet.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    greet.textContent = <span class="string">"Hi there are greetings!"</span>;</span><br><span class="line">    <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 入口文件</span></span><br><span class="line"><span class="keyword">const</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>).appendChild(greeter());</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>运行</strong></p><ul><li><p>打包生成 <code>bundle.js</code> 文件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></li><li><p>启动服务器；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></li></ul><h3 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h3><p><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">1. [推荐]官方文档</a></p><p><a href="https://segmentfault.com/a/1190000006178770#articleHeader5" target="_blank" rel="noopener">2. [版本较旧]入门Webpack，看这篇就够了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack 是一个现代 JavaScript 应用程序的静态模块打包器。&lt;/p&gt;&lt;p&gt;当使用 webpack 打包时，webpack 会从一个或多个入口处，递归地构建一个 &lt;code&gt;依赖关系图(dependency graph)&lt;/code&gt; ，其中包含应用程序所需要的所有模块，然后打包成一个或多个 &lt;code&gt;bundle&lt;/code&gt; 文件。&lt;/p&gt;&lt;p&gt;webpack 可以打包 &lt;code&gt;js&lt;/code&gt;、&lt;code&gt;css&lt;/code&gt;、&lt;code&gt;sass&lt;/code&gt;、&lt;code&gt;less&lt;/code&gt; 、&lt;code&gt;typescript&lt;/code&gt;、&lt;code&gt;图片&lt;/code&gt; 等文件，默认只能打包 &lt;code&gt;js&lt;/code&gt; 格式的文件，其他格式的文件需要加载 &lt;code&gt;loader&lt;/code&gt; 后再打包。&lt;/p&gt;&lt;p&gt;编写本文的时候，webpack 的最新版为 &lt;code&gt;v4.34.0&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://jian2333.github.io/tags/webpack/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Promise 相关简介</title>
    <link href="http://jian2333.github.io/2019/06/14/promise/"/>
    <id>http://jian2333.github.io/2019/06/14/promise/</id>
    <published>2019-06-14T12:30:25.000Z</published>
    <updated>2019-06-23T12:33:33.245Z</updated>
    
    <content type="html"><![CDATA[<p><code>promise</code> 是 <code>ECMAScript6</code> 新加的一个概念。</p><p>本文将使用简洁的文字介绍 <code>promise</code> ，仅介绍大概情况。</p><p>更多详情请参考结尾的推荐文章。</p><p>好了，正文开始 ！</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Promise</code> 是抽象 <code>异步操作</code> 对象以及对其进行一系列操作的组件。</p><p><code>Promise</code> 最大的功能是把 <code>异步操作</code> 变为 <code>同步操作</code> 。即只有 <code>异步操作</code> 完成后，才进行后面的操作。</p><p><code>Promise</code> 定义了一组 <code>上述操作</code> 相关的接口和方法，直接使用即可。</p><p><strong>Promise 状态</strong></p><p>使用 <code>new promise</code> 实例化的 <code>promise对象</code> 有以下三个状态：</p><p><strong>Fulfilled</strong></p><p><code>resolve(成功)</code> 时，此时会调用 <code>onFulfilled</code> 。</p><p><strong>Rejected</strong></p><p><code>reject(失败)</code> 时，此时会调用 <code>onRejected</code> 。</p><p><strong>Pending</strong></p><p>既不是 <code>resolve</code> 也不是 <code>reject</code> 状态，也就是 <code>promise</code> 对象刚被创建后的初始化状态。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>创建 promise 实例</strong></p><p>创建实例有三种方法：</p><ul><li><p><code>new Promise()</code> ；</p></li><li><p><code>Promise.resolve</code> ；</p></li><li><p><code>Promise.reject</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">'11'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'22'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="built_in">Promise</span>.resolve(<span class="string">'1'</span>);</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 </span></span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="built_in">Promise</span>.reject(<span class="string">'2'</span>);</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">null, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="string">'2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>resolve</strong></p><ul><li><code>Promise.resolve</code> ：创建实例；</li><li>返回 <code>promise</code> 对象，主要分下面3种情况：<ul><li>接收参数为 <code>promise</code> 对象：返回的还是接收到的 <code>promise</code> 对象；</li><li>接收参数为 <code>thenable</code> 类型的对象：返回一个新的 <code>promise</code> 对象，这个对象有具有一个 <code>.then</code> 方法。更多 <code>thenable</code> 的信息，<a href="http://liubin.org/promises-book/#ch2-promise-resolve" target="_blank" rel="noopener">点我查看</a> ；</li><li>接收参数为 <code>其他类型</code> ：返回一个将该对象作为值的新的 <code>promise</code> 对象；</li></ul></li></ul><p><strong>reject</strong></p><ul><li><code>Promise.reject</code> ：创建实例；</li><li>返回一个使用了接收到的值进行了 <code>reject</code> 的新的 <code>promise</code> 对象；</li><li>传给 <code>Promise.reject</code> 的值应该是一个 <code>Error</code> 类型的对象；</li><li>另外，和 <code>Promise.resolve</code> 不同的是，即使 <code>Project.reject</code> 接收的是一个 <code>promise</code> 对象，该函数也还是会返回一个全新的 <code>promise</code> 对象；</li></ul><p><strong>then</strong></p><ul><li><p><code>promise.then</code> ：<code>promise</code> 中最常用的方法；</p></li><li><p>在 <code>promise</code> 对象变为 <code>resolve</code> 或 <code>reject</code> 后，执行相应的回调函数；</p></li><li><p><code>then</code> 中 <code>return</code> 的值，作为参数传入 <code>链式方法</code> 里的下一个方法；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'11'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)<span class="comment">// 11</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用 return 的值作为下一个方法的参数</span></span><br><span class="line"><span class="comment">// 见后面 链式方法</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>catch</strong></p><ul><li><p><code>promise.catch</code> ：处理异常的方法，和 <code>reject</code> 类似；</p></li><li><p>包含 <code>promise</code> 对象变为 <code>reject</code> 、手动 <code>throw new Error()</code> 、<code>系统抛出异常</code> 三种情况；</p></li><li><p>推荐使用 <code>catch</code> ，因为对于 <code>then(f1,f2).catch()</code> 这种情况，如果 <code>f1</code> 抛出异常，<code>f2</code> 是捕获不了的，链式方法后面的 <code>catch</code> 才能捕获到，或者改成 <code>then(f1,f2).then(null,f3)</code> 这样，<code>f3</code> 也能捕获到；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"BOOM!"</span>));</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// Error: BOOM!</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于 reject</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 等效于下面的写法，推荐用下面的写法</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐用 catch 的原因： reject 和 catch 都只能捕获上一级的错误</span></span><br><span class="line"><span class="comment">// 如果用 reject 的话，同级的 resolve 中抛出异常的话，reject 就不能捕获了</span></span><br><span class="line"><span class="comment">// 而如果用 catch 话，因为 catch 是链式方法的下一级，所以可以捕获到上一级 resolve 中的异常</span></span><br><span class="line"><span class="comment">// 用链式方法 + reject 的话也行，效果和 catch 一样</span></span><br><span class="line"><span class="comment">// 下面的写法，和上面的 catch 方法效果一样，不过一般不这样写，一般用 catch</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;).then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>all</strong></p><ul><li><p><code>Promise.all</code> ：传入一个 <code>promise</code> 对象的数组作为参数，只有当数组里的 <strong>所有</strong> <code>promise</code> 对象 <strong>全部</strong> 变为 <code>resolve</code> 或 <code>reject</code> 时，才会调用 <code>then</code> 里相应的回调函数方法；</p></li><li><p>数组中的多个 <code>promise</code> 一起 <strong>同时开始，并行执行</strong> 。</p></li><li><p>所以顺序是：<code>arr[0],arr[1+...] --&gt; then</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'2'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'3'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promises = [promise1, promise2, promise3];</span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// ["1", "2", "3"]</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>race</strong></p><ul><li><p><code>Promise.race</code> ：和 <code>Promise.all</code> 类似，区别是 <strong>只要有一个</strong> <code>promise</code> 对象变为 <code>resolve</code> 或 <code>reject</code> 时，就会调用 <code>then</code> 方法；</p></li><li><p><code>then</code> 方法执行完后，数组中后续的 <code>promise</code> 还会继续执行。</p></li><li><p>所以顺序是：<code>arr[0] --&gt; then --&gt; arr[1+...]</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'2'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'3'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promises = [promise1, promise2, promise3];</span><br><span class="line"><span class="built_in">Promise</span>.race(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// 1</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p><strong>catch 和 reject 是一样的</strong></p><ul><li>上面已经说过，<code>catch</code> 和 <code>reject</code> 是一样的，只是写法不同；</li><li>不过从 <code>链式方法</code> 的写法角度来说，<code>catch</code> 写在下一级，能够捕获上一级中 <code>reject</code> 无法捕获的 <code>resolve</code> 中的异常，所以，推荐使用 <code>catch</code> 写法；</li></ul><p><strong>thenable</strong></p><ul><li><code>thenable</code> 指的是一个具有 <code>.then</code> 方法的对象；</li><li><code>Promise.resolve</code> 可以将 <code>thenable</code> 对象转换为 <code>promise</code> 对象，返回的是一个新的 <code>promise</code> 对象；</li><li>更多 <code>thenable</code> 的信息，<a href="http://liubin.org/promises-book/#ch2-promise-resolve" target="_blank" rel="noopener">点我查看</a> ；</li></ul><p><strong>链式方法</strong></p><ul><li><p>由于 <code>then</code> 和 <code>catch</code> 都返回了一个新的 <code>promise</code> 对象，因此它们可以用 <code>.</code> 的方式进行链式调用；</p></li><li><p><code>then</code> 返回的是新的 <code>promise</code> 对象，<code>then</code> 里面的方法返回的是 链式方法中下一个方法的传入参数；</p></li><li><p>更多详情，<a href="http://liubin.org/promises-book/#then-return-new-promise" target="_blank" rel="noopener">点我查看</a> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// then 返回的 bpromise 是一个 promise 对象</span></span><br><span class="line"><span class="comment">// then 里面函数返回的 value1*2 是链式方法中下一个方法的传入参数(value2)</span></span><br><span class="line"><span class="keyword">var</span> apromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> bpromise = apromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value1</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">bpromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value2);<span class="comment">// 200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>使用 ajax + promise 来读取并操作数据</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(xhr.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(xhr.statusText));</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(url).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h3><p><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">[推荐]JavaScript Promise迷你书（中文版）</a></p><p><a href="https://www.w3cschool.cn/vnpqd/vnpqd-sdlo25sr.html" target="_blank" rel="noopener">快来使用ES2015的Promise吧</a></p><p><a href="https://www.runoob.com/w3cnote/es6-promise.html" target="_blank" rel="noopener">ES6 Promise 对象</a></p><p><a href="https://www.runoob.com/w3cnote/javascript-promise-object.html" target="_blank" rel="noopener">JavaScript Promise 对象</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;promise&lt;/code&gt; 是 &lt;code&gt;ECMAScript6&lt;/code&gt; 新加的一个概念。&lt;/p&gt;&lt;p&gt;本文将使用简洁的文字介绍 &lt;code&gt;promise&lt;/code&gt; ，仅介绍大概情况。&lt;/p&gt;&lt;p&gt;更多详情请参考结尾的推荐文章。&lt;/p&gt;&lt;p&gt;好了，正文开始 ！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>严格模式 的特别之处</title>
    <link href="http://jian2333.github.io/2019/06/13/strict-mode/"/>
    <id>http://jian2333.github.io/2019/06/13/strict-mode/</id>
    <published>2019-06-13T01:55:09.000Z</published>
    <updated>2019-06-13T03:36:04.674Z</updated>
    
    <content type="html"><![CDATA[<p><strong>严格模式</strong> 是 <code>ECMAScript5</code> 引入的一个概念。通过严格模式，可以在函数内部选择进行较为严格的全局或局部的错误条件检测。使用严格模式的好处是可以提早知道代码中存在的错误，及时捕获一些可能导致编程错误的 <code>ECMAScript</code> 行为。</p><p>那么，<strong>严格模式</strong> 和 <strong>非严格模式</strong> 有什么区别呢？</p><p>我们一起往下看 ～</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li>使用 <code>&quot;use strict&quot;;</code> (注意后面的分号) ；</li><li>支持 <code>严格模式</code> 的引擎会启动这种模式，不支持 <code>严格模式</code> 的引擎会忽略这个 <strong>编译指示</strong> ；</li><li>可以写在全局作用域(函数外部)，也可以写在函数内部。建议写在函数内部；</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><strong>1. 不允许意外创建变量</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未声明变量</span></span><br><span class="line"><span class="comment">// 非严格模式模式：创建全局变量</span></span><br><span class="line"><span class="comment">// 严格模式：抛出 ReferenceError</span></span><br><span class="line">message = <span class="string">"Hello world"</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 不能对变量调用delete操作符</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line"><span class="comment">// 非严格模式：忽略，静默失败</span></span><br><span class="line"><span class="comment">// 严格模式：抛出 ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">delete</span> color;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 变量名限制</strong></p><ul><li>不能使用 <code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code>、<code>yield</code> 作为变量名；</li><li><code>非严格模式</code> 下可使用；</li></ul><p><strong>4. 操作对象限制</strong></p><ul><li><p>一般来说，<code>非严格模式</code> 下会静默失败，即忽略；<code>严格模式</code> 下会抛出错误；</p></li><li><p>以下情况操作对象的属性会导致错误( <code>严格模式</code> 下) ：</p><ul><li>为 <code>只读属性</code> 赋值会抛出 <code>TypeError</code> ；</li><li>对 <code>不可配置</code> 的属性使用 <code>delete</code> 操作符会抛出 <code>TypeError</code> ；</li><li>对 <code>不可扩展</code> 的对象添加属性会抛出 <code>TypeError</code> ；</li><li>使用 <code>对象字面量</code> 时，属性名要唯一；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名属性</span></span><br><span class="line"><span class="comment">// 非严格模式：没有错误，以第二个为准</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span>,</span><br><span class="line">  name: <span class="string">"Greg"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 函数参数唯一</strong></p><ul><li><p><code>严格模式</code> 下要求命名函数的参数名必须唯一；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名参数</span></span><br><span class="line"><span class="comment">// 非严格模式：没有错误，只能访问第二个参数</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>6. 修改参数的值不会反映到 arguments</strong></p><ul><li><p><code>非严格模式</code> 下修改参数的值会反映到 <code>arguments</code> 对象中，而 <code>严格模式</code> 不会，因为它们是完全独立的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改命名参数的值</span></span><br><span class="line"><span class="comment">// 非严格模式：修改会反映到 arguments 中</span></span><br><span class="line"><span class="comment">// 严格模式：修改不会反映到 arguments 中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  value = <span class="string">"Foo"</span>;</span><br><span class="line">  alert(value);<span class="comment">// "Foo"</span></span><br><span class="line">  alert(<span class="built_in">arguments</span>[<span class="number">0</span>]);<span class="comment">// 非严格模式："Foo"</span></span><br><span class="line">                        <span class="comment">// 严格模式："Hi"</span></span><br><span class="line">&#125;</span><br><span class="line">showValue(<span class="string">"Hi"</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>7. 淘汰了 arguments.callee 和 arguments.caller</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问 arguments.callee</span></span><br><span class="line"><span class="comment">// 非严格模式：没有问题</span></span><br><span class="line"><span class="comment">// 严格模式：抛出 TypeError</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = factorial(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>8. 函数名限制</strong></p><ul><li>不能使用 <code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code>、<code>yield</code> 作为函数名；</li><li><code>非严格模式</code> 下可使用；</li></ul><p><strong>9. if 内不能声明函数</strong></p><ul><li><p><code>严格模式</code> 下，只能在脚本的顶级和函数内部声明函数，也就是说，在 if 语句中声明函数会导致语法错误；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 if 语句中声明函数</span></span><br><span class="line"><span class="comment">// 非严格模式：将函数提升到 if 语句外部</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>10. eval 在包含的上下文中不能再创建变量和函数</strong></p><ul><li><p><code>严格模式</code> 下，<code>eval</code> 内声明的变量只在 <code>eval</code> 表达式内部有效；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 eval() 创建变量</span></span><br><span class="line"><span class="comment">// 非严格模式：弹出对话框显示 10</span></span><br><span class="line"><span class="comment">// 严格模式：调用 alert(x) 时会抛出 ReferenceError </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">"var x=10"</span>);</span><br><span class="line">  alert(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 严格模式：eval() 声明的变量只在 eval 表达式内部有效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"var x=10, y=11, x+y"</span>);</span><br><span class="line">  alert(result);<span class="comment">// 21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>11. 禁止使用 eval 和 arguments 作为标识符，也不能修改它们的值</strong></p><ul><li><p><code>严格模式</code> 下禁止使用 <code>eval</code> 和 <code>arguments</code> 作为标识符，也不允许读取它们的值。</p></li><li><p>以下几种方式都会抛出错误：</p><ul><li>使用 <code>var</code> 声明；</li><li>赋予另一个值( <code>arguments=&quot;xx&quot;</code> 整体赋值会报错，<code>arguments[0]=&quot;yy&quot;</code> 单独赋值不会报错)；</li><li>尝试修改包含的值，如使用 <code>++</code> (也相当于整体赋值了) ；</li><li>用作函数名；</li><li>用作命名的函数参数；</li><li>在 <code>try-catch</code> 语句中用作例外名；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 eval 和 arguments 作为变量引用</span></span><br><span class="line"><span class="comment">// 非严格模式：不报错</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">arguments</span> = <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>12. 抑制this</strong></p><ul><li><p>在 <code>非严格模式</code> 下使用 <code>call()</code> 和 <code>apply()</code> 方法时，<code>null</code> 和 <code>undefined</code> 会自动转换为 <strong>全局对象</strong> ；而在 <code>严格模式</code> 下，函数的 <code>this</code> 的值始终是指定的值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line"><span class="comment">// 非严格模式：访问全局属性</span></span><br><span class="line"><span class="comment">// 严格模式：抛出错误，因为 this 的值为 null</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">displayColor.call(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>13. 抛弃了 with 语句</strong></p><ul><li><p><code>非严格模式</code> 下使用 <code>with</code> 能够改变解析标识符的路径，<code>严格模式</code> 下使用 <code>with</code> 会导致语法错误；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with 的语句用法</span></span><br><span class="line"><span class="comment">// 非严格模式：允许</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line">  alert(href);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>14. 去掉了八进制字面量</strong></p><ul><li><p><code>严格模式</code> 下，八进制字面量已经成为无效的语法了，会抛出异常；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用八进制字面量</span></span><br><span class="line"><span class="comment">// 非严格模式：值为8</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">010</span>;</span><br></pre></td></tr></table></figure></li><li><p>在使用 <code>parseInt()</code> 时，<code>严格模式下</code> 八进制字面量会被当作以 0 开头的十进制字面量；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 parseInt() 解析八进制字面量</span></span><br><span class="line"><span class="comment">// 非严格模式下：值为8</span></span><br><span class="line"><span class="comment">// 严格模式下：值为10</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">parseInt</span>(<span class="string">"010"</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;严格模式&lt;/strong&gt; 是 &lt;code&gt;ECMAScript5&lt;/code&gt; 引入的一个概念。通过严格模式，可以在函数内部选择进行较为严格的全局或局部的错误条件检测。使用严格模式的好处是可以提早知道代码中存在的错误，及时捕获一些可能导致编程错误的 &lt;code&gt;ECMAScript&lt;/code&gt; 行为。&lt;/p&gt;&lt;p&gt;那么，&lt;strong&gt;严格模式&lt;/strong&gt; 和 &lt;strong&gt;非严格模式&lt;/strong&gt; 有什么区别呢？&lt;/p&gt;&lt;p&gt;我们一起往下看 ～&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript 高级程序设计》总结</title>
    <link href="http://jian2333.github.io/2019/06/12/professional-js/"/>
    <id>http://jian2333.github.io/2019/06/12/professional-js/</id>
    <published>2019-06-12T01:49:39.000Z</published>
    <updated>2019-06-12T12:59:35.943Z</updated>
    
    <content type="html"><![CDATA[<p>终于把《JavaScript 高级程序设计》看完(假装看完，其实跳过了几章 0.0)了，颇有一些心得，总结一下。</p><p>首先就是，这本书的内容，大而全。Js的各方面都有介绍，内容详细，涉及面广。</p><p>其次，有些内容相对较旧了。毕竟 <code>第三版</code> 是2012年3月发行的，当时 <code>ES6</code> 还没定稿，所以这本书后面有些内容，和现在会稍有不同，主要是最后几章。</p><p>接下来，是看完本书后的部分总结。</p><a id="more"></a><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><h3 id="JS加载"><a href="#JS加载" class="headerlink" title="JS加载"></a>JS加载</h3><p>JS会阻塞 DOM 的加载和渲染。</p><p><code>defer</code> ：</p><ul><li>立即加载JS，但不执行，待DOM渲染完成后再执行JS。</li><li>多个 <code>defer</code> 按顺序执行，但实际上不一定，所以建议只有1个JS使用 <code>defer</code> 参数。</li><li><code>XHTML</code> 下需写成 <code>defer=&quot;defer&quot;</code> 。</li></ul><p><code>async</code> ：</p><ul><li>异步加载JS(不阻塞DOM)，加载完后执行JS(此时会阻塞DOM)，执行完后继续加载/渲染DOM。</li><li>不按顺序执行。</li><li><code>XHTML</code> 下需写成 <code>async=&quot;async&quot;</code> 。</li></ul><p><img src="/images/pj-1.jpg" alt></p><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p><strong>基本类型</strong> ：</p><ul><li><code>typeof</code> 。</li><li>包括 <code>undefined</code>、<code>number</code>、<code>boolean</code>、<code>string</code> ，外加 <code>function</code> 。</li></ul><p><strong>引用类型</strong> ：</p><ul><li><code>instanceof</code> 。</li><li>包括 <code>Object</code>、<code>Array</code>、<code>Date</code>、<code>Regexp</code> 。</li><li>检测 <code>Object</code> 永远返回 <code>true</code> ，检测 <code>基本类型</code> 永远返回 <code>false</code> 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"string"</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span>(str));<span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>垃圾收集主要有 <code>标记清除</code> 和 <code>引用计数</code> 两种方式，其中 <code>标记清除</code> 是现在的主流方式。</p><p><strong>标记清除</strong> ：</p><ul><li>现在5大主流浏览器使用的方式。</li><li>当一个变量进入一个环境(比如函数)时，将该变量标记为 <code>进入环境</code> ，当该变量离开环境(比如函数)时，标记该变量为 <code>离开环境</code> 。</li><li>垃圾收集器会给存储在内存上的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量。最后垃圾收集器销毁那些带标记的值并回收它们所占用的空间。</li><li>不同浏览器垃圾收集的时间间隔不同。</li></ul><p><strong>引用计数</strong> ：</p><ul><li>含义是：跟踪记录每一个值被引用的次数。</li><li>当一个值被一个变量引用时，该值的 <code>引用次数</code> +1，又被另一个变量引用时，<code>引用次数</code> 继续+1，取消引用也类似。</li><li>当 <code>引用次数</code> 为0后，当 <code>垃圾收集器</code> 下次运行时，就会释放这些 <code>引用次数</code> 为0的值所占用的内存。</li><li>这个方法有个严重的 bug ，当循环引用的时候，引用次数就永远不会为0，垃圾收集器也就 <strong>永远不会回收这些循环引用的值/变量</strong> 。</li><li>可以使用 <code>variable = null</code> 这样的方式 <strong>手动清除引用</strong> 。</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>call，apply</strong> ：</p><ul><li><p>第一个参数是 <code>this</code> 的值，同时也是这个函数的环境/作用域；第二个参数是传入函数的参数；</p></li><li><p>利用第一个参数，可以改变函数执行的环境/作用域，<strong>这是最常用且非常巧妙的一种用法！！</strong>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.age + num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入null</span></span><br><span class="line">fun1.apply(<span class="literal">null</span>, [<span class="number">1</span>]);<span class="comment">// 非严格模式下，this为window；严格模式下，this为null，然后会报错。</span></span><br><span class="line"><span class="comment">// 传入this</span></span><br><span class="line">fun1.apply(<span class="keyword">this</span>, [<span class="number">1</span>]);<span class="comment">// this为window，全局作用域，返回11</span></span><br><span class="line"><span class="comment">// 传入obj</span></span><br><span class="line">fun1.apply(obj, [<span class="number">1</span>]);<span class="comment">// this为obj对象，obj作用域，返回19</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>arguments.callee()</strong> ：</p><ul><li><p>指向当前函数，一般 <strong>递归函数</strong> 中使用较多。</p></li><li><p><code>严格模式</code> 下不能使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阶乘函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以改写成以下写法，减少函数的执行与函数名的耦合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);<span class="comment">// 此行改动</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>arguments.caller() </strong>：</p><ul><li><p>指向调用该函数的函数，返回调用函数的源代码。</p></li><li><p><code>严格模式</code> 下不能使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">arguments</span>.callee.caller);</span><br><span class="line">&#125;</span><br><span class="line">outer();<span class="comment">// 返回outer函数的源代码</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p><strong>JSON类型</strong></p><p><strong>简单值</strong> ：</p><ul><li>包含 <code>字符串</code>、<code>数值</code>、<code>布尔值</code> 和 <code>null</code> ( <code>undefined</code> 会自动被忽略 )。</li><li><code>JSON字符串</code> 和 <code>JS字符串</code> 的区别：<ul><li><code>JSON字符串</code> 必须使用双引号，<code>JS字符串</code> 可以使用 <code>双引号</code> 和 <code>单引号</code> ；</li></ul></li></ul><p><strong>对象</strong> ：</p><ul><li><code>JSON对象</code> 和 <code>JS对象</code> 的区别：<ul><li><code>JSON对象</code> 的属性名必须使用 <code>双引号</code> ，<code>JS对象</code> 的属性名 <code>可以加双引号也可以不加引号</code> ；</li><li><code>JSON对象</code> 没有声明变量；</li><li><code>JSON对象</code> 末尾没有 <code>分号</code> ；</li></ul></li></ul><p><strong>数组</strong> ：</p><ul><li><code>JSON数组</code> 和 <code>JS数组</code> 的区别：<ul><li><code>JSON数组</code> 没有声明变量；</li><li><code>JSON数组</code> 末尾没有 <code>分号</code> ；</li></ul></li></ul><p><strong>JSON.stringify(obj, para1, para2)</strong> ：</p><ul><li><code>JS对象</code> =&gt; <code>JSON字符串</code> ；</li><li><strong>para1</strong> ：可选，用于过滤结果，可以是数组或函数；<ul><li>数组 ：只返回数组中的 <code>key</code> ；</li><li>function(key, value) ：重新格式化每个 <code>key</code> 的值；</li></ul></li><li><strong>para2</strong> ：可选，用于指定缩进，可以是数值或字符串；<ul><li>数值：缩进 n 个空格，最大长度为10；</li><li>字符串：缩进字符串，最大长度为10；</li></ul></li></ul><p><strong>JSON.parse(str, para1)</strong> ：</p><ul><li><code>JSON字符串</code> =&gt; <code>JS对象</code> ；</li><li><strong>para1</strong> ：可选，和 <code>JSON.stringify</code> 的 <code>para1</code> 中的 <code>fucntion</code> 类似，用于还原结果，是一个函数；<ul><li>function(key, value) ：重新格式化每个 <code>key</code> 的值；</li></ul></li></ul><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p><code>Ajax</code> 是一种局部刷新页面的技术，它向服务器请求数据而无需卸载页面，只局部刷新页面。</p><h4 id="原生写法"><a href="#原生写法" class="headerlink" title="原生写法"></a><strong>原生写法</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(type, url, isAsync);</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><p><strong>type</strong> ：<code>post</code> 、<code>get</code> 等；</p></li><li><p><strong>url</strong> ：请求的 url ，<code>get</code> 请求时查询字符串参数必须使用 <code>encodeURIComponent()</code> 进行编码；</p></li><li><p><strong>isAsync</strong> ：是否异步。<code>jQuery</code> 默认为 <code>true</code> ；</p></li><li><p><strong>data</strong> ：一定要填，为空的话写 <code>null</code> ；</p></li><li><p>可以使用表单形式给服务器传数据(结果是键值对，而不是string字符串)，使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData(form);</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">data.append(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line"><span class="comment">// 发送给服务器</span></span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure></li></ul><p><strong>更多信息</strong> ：</p><ul><li>Page 575；</li><li><strong>HTTP头信息</strong> ：可以自定义信息在头部，供服务器读取；</li><li><strong>超时设定</strong> ：<code>xhr.timeout</code> 、<code>xhr.ontimeout=function(){}</code> ；</li><li><strong>进度事件</strong> ：<code>load</code> 、<code>progress</code> ；</li></ul><h4 id="跨域介绍"><a href="#跨域介绍" class="headerlink" title="跨域介绍"></a><strong>跨域介绍</strong></h4><p><code>CORS(Cross-Origin-Resource Sharing)</code> 定义了跨域时，浏览器与服务器该如何通信。</p><p><code>CORS</code> <strong>的基本思路</strong></p><ul><li><code>浏览器</code> =&gt; <code>服务器</code> 的 <code>请求头</code> 中添加：<code>Origin: url</code> ；</li><li><code>服务器</code> =&gt; <code>浏览器</code> 的 <code>响应头</code> 中添加： <code>Access-Control-Allow-Origin: url</code> ；</li><li>这2个 <code>url</code> 必须一致；</li></ul><p><strong>IE8 的跨域</strong></p><ul><li><p>使用 <code>XDR(XDomainRequest)</code> 对象来创建实例(替代 <code>XMLHttpRequest</code> 对象)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">xdr.open(type, url, isAsync);</span><br><span class="line">xdr.send(data);</span><br></pre></td></tr></table></figure></li></ul><p><strong>其他主流浏览器的跨域</strong></p><ul><li><strong>原生支持</strong> ：直接使用 <code>XMLHttpRequest</code> 对象创建实例即可；</li></ul><p><strong>其他跨域技术</strong></p><ul><li><strong>图像Ping</strong> ：单向，<code>浏览器</code> =&gt; <code>服务器</code> ；</li><li><strong>JSONP</strong> ：双向，把 url 添加到 <code>&lt;script&gt;</code> 标签中，然后 <code>&lt;script&gt;</code> 标签添加到 <code>document.body</code> 内；</li><li><strong>Comet</strong> ：长轮询 和 流；</li><li><strong>服务器发送事件</strong> ：SSE ；</li></ul><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a><strong>WebSocket</strong></h4><p>用于在一个单独的持久连接上提供 <strong>全双工、双向通信</strong> 。</p><p><strong>原生写法</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(url);</span><br><span class="line">socket.send(data);</span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 其他3个事件</span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>说明</strong></p><ul><li><strong>url</strong> ：传输协议为 <code>ws://</code> 和 <code>wss://</code> ，分别对应 <code>未加密</code> 和 <code>加密</code> 的协议；</li><li><strong>send</strong> ：<code>data</code> 只能是 <code>字符串</code> ;</li><li><strong>onmessage</strong> ：<code>服务器</code> 返回的数据存放在 <code>event.data</code> 中；</li></ul><p><strong>优缺点</strong></p><p><strong>优点</strong> ：</p><ul><li>能够双向通信，<code>服务器</code> 能主动推送数据给 <code>浏览器</code> ；</li><li>传输数据小，占用资源少，速度快。因为相比较 <code>http/https</code> 的传输协议，<code>ws/wss</code> 的请求头更小，所以每次传输数据，“无效”的请求头数据会更少，对于高频率的请求效果更明显；</li></ul><p><strong>缺点</strong> ：</p><ul><li><strong>h5</strong> 新增的功能，对于某些旧浏览器并不支持；</li><li>需要使用不同的 web服务器(传输协议为 <code>ws/wss</code> ) ；</li></ul><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3><h4 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h4><p><strong>安全的类型检测</strong></p><ul><li><p><code>instanceof</code> 检测时，必须是在同一个全局作用域下才有效(比如一个页面包含多个frame时，在 非构造函数页面 检测会返回false)；</p></li><li><p>利用 <code>原生XX</code> 的构造函数名与全局作用域无关，因此使用 <code>toString()</code> 就能够保证返回一致的值，所以可以创建以下函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测正则表达式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object RegExp]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>作用域安全的构造函数</strong></p><ul><li><p>当使用构造函数创建对象时，忘记使用 <code>new</code> 的情况下；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原理：使用 <code>new</code> 的情况下，<code>this</code> 指向的是 <code>new</code> 出来的新对象；未使用 <code>new</code> 的情况下，<code>this</code> 指向的是 <code>全局对象window</code> ；</p></li></ul><p><strong>惰性载入函数</strong></p><ul><li><p>在某些 <code>if</code> 判断的语句中，<strong>如果第一次怎样，后面每次都会这样</strong>，针对这种情况，可以使用 <code>惰性载入函数</code> ，即 <strong>if里重写原方法</strong>，这样后面执行是就不用判断了；</p></li><li><p><code>惰性载入函数</code> 有两种写法：</p><ul><li><p>第一种是：函数被调用时再处理函数：</p></li><li><p>第二种是：声明函数时就指定适当的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：函数被调用时再处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 改变1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变2</span></span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变3</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种：声明函数时就指定适当的函数</span></span><br><span class="line"><span class="keyword">var</span> createXHR = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变2</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变3</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();<span class="comment">// 改变4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>函数绑定</strong></p><ul><li><p><code>函数绑定</code> 要创建一个函数，可以在特定的 <code>this</code> 环境中以指定参数调用另一个函数；</p></li><li><p>来看下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  message: <span class="string">"Event handler"</span>,</span><br><span class="line">  handlerClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"my-btn"</span>);</span><br><span class="line"><span class="comment">// 返回undefined</span></span><br><span class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, handler.handlerClick);</span><br><span class="line"><span class="comment">// 返回Event handler, </span></span><br><span class="line"><span class="comment">// 传入作为this值的对象，和 call，apply 类似</span></span><br><span class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, handler.handlerClick.bind(handler));</span><br></pre></td></tr></table></figure></li></ul><p><strong>函数柯里化</strong></p><ul><li><p>用于创建已经设置好了一个或多个参数的函数；</p></li><li><p><code>函数柯里化</code> 的基本方法和 <code>函数绑定</code> 是一样的，都是使用一个闭包返回一个函数；</p></li><li><p>两者的区别在于：当函数被调用时，返回的函数还需要设置一些传入的参数；</p></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, finalArgs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化 使用方法1</span></span><br><span class="line"><span class="comment">// 超出参数自动忽略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curriedAdd = curry(add, <span class="number">5</span>);</span><br><span class="line">alert(curriedAdd(<span class="number">3</span>));<span class="comment">// 8</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化 使用方法2</span></span><br><span class="line"><span class="comment">// 超出参数自动忽略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curriedAdd = curry(add, <span class="number">5</span>, <span class="number">13</span>, <span class="number">2</span>);</span><br><span class="line">alert(curriedAdd());<span class="comment">// 18</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h4><p><strong>注意：一旦把对象定义为防篡改，就不可撤销了</strong> 。</p><p><strong>不可扩展对象</strong></p><ul><li>不能添加属性和方法，可删除和修改；</li><li>使用 <code>Object.preventExtensions(obj)</code> 把 <code>obj对象</code> 修改为 <code>不可扩展对象</code> ；</li></ul><p><strong>密封的对象</strong></p><ul><li>不能添加和删除属性和方法，但可修改；</li><li>使用 <code>Object.seal(obj)</code> 把 <code>obj对象</code> 修改为 <code>密封的对象</code> ；</li></ul><p><strong>冻结的对象</strong></p><ul><li>既不可扩展，又是冻结的。即不可新增、修改、删除属性和方法；</li><li>使用 <code>Object.freeze(obj)</code> 把 <code>obj对象</code> 修改为 <code>冻结的对象</code> ；</li></ul><h4 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h4><p><code>setTimeout</code> 和 <code>setInterval()</code> 并不是 <strong>过xx毫秒后执行函数</strong> ，而是 <strong>过xx毫秒后把函数代码添加到代码队列，在浏览器空闲时，将按队列顺序依次执行队列中的代码</strong> 。</p><p><strong>重复的定时器</strong></p><ul><li><p>使用 <code>setInterval()</code> 时，仅当没有该定时器的任何其他代码实例时，才将定时器代码添加到队列中，这确保了队列中的最小时间间隔为指定间隔；</p></li><li><p>当这种 <code>重复定时器</code> 有两个问题：(1)某些间隔会被跳过；(2)多个定时器的代码执行之间的间隔可能会比预期的小；</p></li><li><p>为了解决这种问题，可以使用如下模式的 <code>链式setTimeout()调用</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 处理中</span></span><br><span class="line">  setTimeout(<span class="built_in">arguments</span>.callee, interval);</span><br><span class="line">&#125;, interval);</span><br></pre></td></tr></table></figure></li></ul><p><strong>Yielding Processos</strong></p><ul><li><p>当某个循环占用了大量时间，如果该循环满足 <strong>1无需同步完成，2无需按顺序完成</strong> ，则可使用一种叫做 <code>数组分块</code> 的技术，小块小块的处理数组，通常每次一小块；</p></li><li><p>基本思路：为要处理的数组创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器；</p></li><li><p>看下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 取出下一个项目并处理</span></span><br><span class="line">  <span class="keyword">var</span> item = array.shift();</span><br><span class="line">  process(item);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//若还有条目，再设置另一个定时器</span></span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, process, context</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = array.shift();</span><br><span class="line">    process.call(context, item);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">12</span>,<span class="number">123</span>,<span class="number">23</span>,<span class="number">234</span>,<span class="number">1234</span>,<span class="number">323</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>,<span class="number">777</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printValue</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.innerHTML += item + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk(data, printValue);</span><br></pre></td></tr></table></figure></li></ul><p><strong>函数节流</strong></p><ul><li><p>浏览器中某些操作(比如DOM)非常耗资源，高频率的进行这种操作可能会让浏览器崩溃。为了解决这个问题，可以使用定时器对该函数进行 <strong>节流</strong> ；</p></li><li><p><code>函数节流</code> 背后的思路是：某些代码不可以在没有间断的情况下连续重复执行。第一次调用函数时，会创建一个定时器，在指定的时间间隔后再执行函数；第二次调用时，会先清除前一次的定时器，并设置另外一个，然后重复前面的步骤；</p></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">  clearTimeout(method.tId);</span><br><span class="line">  <span class="keyword">var</span> method.tId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未节流前写法，高频率的更新可能导致浏览器崩溃</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  throttle(resizeDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><ul><li><code>事件</code> 是一种叫做 <code>观察者</code> 的设计模式，这是一种创建松散耦合代码的技术；</li><li><code>观察者模式</code> 由 <code>主体</code> 和 <code>观察者</code> 两部分组成；<ul><li><strong>主体</strong> ：发布事件；</li><li><strong>观察者</strong> ：订阅事件，观察主体；</li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li><code>服务器</code> 生成并返回给 <code>浏览器</code> 的；</li><li>绑定在特定域名下，只在绑定的域名下有效；</li><li>(针对域名) 只要有的话，浏览器每次发数据给 <code>服务器</code> ，一定会带上已经存在的 <code>cookie ；</code></li><li>未设定有效期的 <code>cookie</code> ，浏览器关闭后即失效，设定有效期的 <code>cookie</code>，手动删除或到期前，一直有效；</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p><strong>优化DOM</strong></p><p>在 <strong>JavaScript</strong> 各个方面中，<strong>DOM</strong> 毫无疑问是最慢的一部分。</p><p>当往页面添加多个 <code>&lt;li&gt;</code> 元素时，每添加一次都要进行一次 <code>现场更新</code>，即页面要进行一次 <code>重排重绘</code> ，性能损失非常大。</p><p><strong>最小化更新现场</strong></p><ul><li><p>使用 <code>文档片段</code> 来构建DOM结构，接着将其添加到 <code>List</code> 元素中，这样只会进行一次 <code>现场更新</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">    fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">    item,</span><br><span class="line">    i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">  fragment.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item"</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">list.appendChild(fragment);</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用 innerHTML</strong></p><ul><li><p>创建 <strong>DOM</strong> 节点到另一种方法(前一种是 <code>createElement</code> 、<code>appendChild</code> 之类的)；</p></li><li><p>对于小的 <strong>DOM</strong> 节点更改，两种方法效率差不多，然而对于大的 <strong>DOM</strong> 节点的更改，<code>innerHTML</code> 要比前一种快的多，因为只进行一次 <code>现场更新</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">    html = <span class="string">""</span>,</span><br><span class="line">    i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  html += <span class="string">"&lt;li&gt;Item"</span> + i + <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">list.innerHTML = html;</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用事件代理</strong></p><ul><li>利用 <code>事件冒泡</code> ，在文档级别附加事件处理程序，这样可以处理整个页面的事件；</li></ul><p><strong>注意 HTMLCollection</strong></p><ul><li><p>任何时候要访问 <strong>HTMLCollection</strong> ，不管它是一个属性还是一个方法，都是在文档上进行一个查询，这个查询开销很大；</p></li><li><p>最小化访问 <strong>HTMLCollection</strong> 的次数可以极大的改进脚本的性能；</p></li><li><p>优化 <strong>HTMLCollection</strong> 最重要的地方就是循环了；</p></li><li><p>以下情况会返回 <strong>HTMLCollection</strong> 集合：</p><ul><li>进行了对 <code>getElementsByTagName</code> 的调用 ；</li><li>获取了元素的 <code>ChildNodes</code> 属性 ；</li><li>获取了元素的 <code>attributes</code> 属性 ；</li><li>访问了特殊的集合，比如 <code>document.forms</code>、<code>document.images</code> 等 ；</li></ul></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前</span></span><br><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>),</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, len=images.length;i&lt;len;i++) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后</span></span><br><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>),</span><br><span class="line">    image,</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, len=images.length;i&lt;len;i++) &#123;</span><br><span class="line">  image = images[i];</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>部署</strong></p><p><strong>压缩</strong> ：</p><p>压缩分两部分，即 <code>文件压缩</code> 和 <code>HTTP压缩</code> 。</p><p><code>文件压缩</code> ：</p><ul><li>把开发环境的文件( js、css 等)压缩，然后部署到服务器上；</li><li>删除额外的空白，包括换行；</li><li>删除所有注释；</li><li>缩短变量名；</li></ul><p><code>HTTP压缩</code> ：</p><ul><li>服务器对传输给浏览器的代码进行压缩(服务器要进行配置)；</li><li>浏览器对接收的资源进行解压缩，目前五大 Web浏览器都支持解压缩；；</li><li>可以节省传输的字节，减少带宽消耗，加快响应速度；</li><li><strong>原理</strong> ：一个指定了文件 使用了给定格式 进行了压缩的HTTP头 包含在了服务器响应中。接着浏览器会查看该 HTTP头确定文件是否已被压缩，然后使用合适的格式进行解压缩；</li></ul><h3 id="新API"><a href="#新API" class="headerlink" title="新API"></a>新API</h3><p><strong>requestAnimationFrame()</strong></p><ul><li>早期动画循环；</li></ul><p><strong>Page Visiblity API</strong></p><ul><li><code>document.hidden</code> ：查看页面是否隐藏的布尔值。页面隐藏包括在后台标签页中或最小化浏览器；</li><li><code>document.visibilityState</code> ：表示下列4个可能状态的值：<ul><li>页面在后台标签中或浏览器最小化；</li><li>页面在前台标签页中；</li><li>实际的标签页已经隐藏，但用户可以看到页面的预览(比如win7鼠标移到任务栏的图标上看到的预览)；</li><li>页面在屏幕外执行预渲染处理；</li></ul></li><li><code>visibilitychange</code> 事件：文档从可见变为不可见，或从不可见变为可见时触发；</li></ul><p><strong>Geolocation API</strong></p><ul><li>地理定位 API；</li><li><code>navigator.geolocation</code> 对象；</li><li><code>getCurrentPosition</code> ：获取当前位置；</li><li><code>watchPosition</code> ：跟踪用户位置，与定时调用 <code>getCurrentPosition</code> 效果一样；</li><li><code>clearWatch</code> ：取消跟踪用户位置；</li></ul><p><strong>File API</strong></p><ul><li>能够在浏览器端读取本地文件的信息(文件名称，类型，大小，修改时间，文件内容等)；</li><li>使用 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素，返回对象的 <code>files</code> 属性；</li><li><strong>FileReader 类型</strong><ul><li><code>var reader = new FileReader()</code> ；</li><li><code>readAsText(file, encoding)</code> ：以纯文本形式读取文件，数据保存在 <code>result</code> 属性中；</li><li><code>readAsDataURL(file)</code> ：读取文件并将文件以 URI 的形式保存在 <code>result</code> 属性中；</li></ul></li><li><strong>对象 URL</strong><ul><li>引用保存在 <code>File</code> 或 <code>Blob</code> 中数据的 URL；</li><li><code>window.URL.createObjectURL(file)</code> ：获取 <code>file</code> 的URL；</li></ul></li></ul><p><strong>Web 计时</strong></p><ul><li><code>window.performance</code> ：获取页面的所有度量信息(即时间相关信息)；</li></ul><p><strong>Web Workers</strong></p><ul><li><p><strong>JavaScript</strong> 是单线程的；</p></li><li><p>让 <strong>JavaScript</strong> 在后台运行，类似开了一个后台线程；</p></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"stufftodo.js"</span>);</span><br><span class="line"><span class="comment">// 这行代码会让浏览器下载js，但只有 worker接收到消息才会执行js代码</span></span><br><span class="line"><span class="comment">// 使用 postMessage() 给 workder发送消息，可以是字符串或对象</span></span><br><span class="line">worker.postMessage(<span class="string">"start! "</span>);</span><br><span class="line"><span class="comment">// worker返回到数据保存在 event.data 中</span></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line">worker.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 立即停止 workder 到工作</span></span><br><span class="line">worker.terminate();</span><br></pre></td></tr></table></figure></li></ul><h2 id="跳过的章节"><a href="#跳过的章节" class="headerlink" title="跳过的章节"></a>跳过的章节</h2><p>其中有几章没看跳过了，有些是已经熟悉的，有些是优先级不高暂时跳过了，以后有时间了再补上吧～</p><p>跳过的章节有：</p><ul><li>第8章：BOM；</li><li>第9章：客户端检测；</li><li>第10～12章：DOM；</li><li>第13章：事件；</li><li>第14章：表单；</li><li>第15章：Canvas；</li><li>第18章：JS与XML；</li><li>第19章：E4X；</li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>有关 <code>严格模式</code> 与 <code>非严格模式</code> 的区别，请看下篇文章。</p><p><a href="/2019/06/13/strict-mode">点我查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把《JavaScript 高级程序设计》看完(假装看完，其实跳过了几章 0.0)了，颇有一些心得，总结一下。&lt;/p&gt;&lt;p&gt;首先就是，这本书的内容，大而全。Js的各方面都有介绍，内容详细，涉及面广。&lt;/p&gt;&lt;p&gt;其次，有些内容相对较旧了。毕竟 &lt;code&gt;第三版&lt;/code&gt; 是2012年3月发行的，当时 &lt;code&gt;ES6&lt;/code&gt; 还没定稿，所以这本书后面有些内容，和现在会稍有不同，主要是最后几章。&lt;/p&gt;&lt;p&gt;接下来，是看完本书后的部分总结。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>CSS3 中的Flex</title>
    <link href="http://jian2333.github.io/2019/05/31/flex/"/>
    <id>http://jian2333.github.io/2019/05/31/flex/</id>
    <published>2019-05-31T12:20:37.000Z</published>
    <updated>2019-06-22T03:35:59.668Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3 引入了一种新的布局模式————弹性盒子。</p><p>引入弹性盒子的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>弹性盒子由 <code>弹性容器(Flex container)</code> 和 <code>弹性子元素(Flex item)</code> 组成。<code>弹性容器</code> 通过设置 <code>display</code> 的值为 <code>flex</code> 或 <code>flex-inline</code> ，将其定义为 <code>弹性容器</code> 。<code>弹性容器</code> 内包含一个或多个 <code>弹性子元素</code> 。</p><p><code>弹性容器</code> 外和 <code>弹性子元素</code> 内都是正常渲染，<code>弹性盒子</code> 只定义了 <code>弹性子元素</code> 如何在 <code>弹性容器</code> 内的布局。</p><p><code>Flex</code> 即为 <code>弹性布局</code>。设置为 <code>Flex</code> 布局之后，<code>子元素</code> 的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p><p>接下来，介绍 <code>Flex</code> 常用的几个属性。</p><a id="more"></a><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p><code>flex-direction</code> ：<code>弹性子元素</code> 在 <code>弹性容器</code> 内 <strong>水平方向</strong> 上的排列规则。</p><p><strong>注意，这很重要：</strong></p><ul><li><code>flex-direction</code> 方向不同( <code>row</code> ，<code>column</code> )，会导致其他6个 flex 属性( <code>flex-wrap</code>，<code>felx-flow</code>，<code>justify-content</code>，<code>align-content</code>，<code>align-items</code>，<code>align-self</code> )的方向也不同！！</li><li>后面6个 flex 属性的例子中，<code>flex-direction</code> 都为 <code>row</code> 。</li><li>如果 <code>flex-direction</code> 改成 <code>column</code> ，会导致方向与现在的例子相反。即 <code>水平xx</code> 的都会变成 <code>垂直xx</code> ，而 <code>垂直xx</code> 的会变成 <code>水平xx</code> 。</li></ul><p><br></p><p>主要有以下几个值：<code>row</code>、<code>row-reverse</code>、<code>column</code>、<code>column-reverse</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>row</strong></p><ul><li><strong>默认值</strong> ；水平方向，从左往右正常排列。</li><li><img src="/images/flex-fd-1.jpg" alt></li></ul><p><strong>row-reverse</strong></p><ul><li>水平方向，从右往左排列。</li><li><img src="/images/flex-fd-2.jpg" alt></li></ul><p><strong>column</strong></p><ul><li>垂直方向，从上往下排列。</li><li><img src="/images/flex-fd-3.jpg" alt></li></ul><p><strong>column-reverse</strong></p><ul><li>垂直方向，从下往上排列。</li><li><img src="/images/flex-fd-4.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置改属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p><code>flex-wrap</code> ：规定 <code>弹性子元素</code> 是一行还是多行显示在 <code>弹性盒子</code> 内。即 <code>弹性子元素</code> 是否换行。</p><p>主要有以下几个值：<code>nowrap</code>、<code>wrap</code>、<code>wrap-reverse</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>nowrap</strong></p><ul><li><strong>默认值</strong> ； <code>弹性子元素</code> 不换行，宽度会改变(压缩)。</li><li><img src="/images/flex-fw-2.jpg" alt></li></ul><p><strong>wrap</strong></p><ul><li><code>弹性子元素</code> 换行，宽度不会改变。</li><li><img src="/images/flex-fw-1.jpg" alt></li></ul><p><strong>wrap-reverse</strong></p><ul><li><code>弹性子元素</code> 换行，宽度不会改变，且从右往左排序。</li><li><img src="/images/flex-fw-3.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p><code>flex-flow</code> ：<code>flex-direction</code> 和 <code>flex-wrap</code> 的组合，第一个参数为 <code>flex-direction</code> ，第二个参数为 <code>flex-wrap</code> 。</p><p><strong>row-reverse wrap</strong></p><ul><li>反向排序，且换行。</li><li><img src="/images/flex-ff-1.jpg" alt></li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p><code>justify-content</code> ：<code>弹性子元素</code> 关于 <code>弹性盒子</code> 垂直轴，在水平方向上的分布规则。</p><p>主要有以下几个值：<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>space-between</code>、<code>space-around</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>flex-start</strong></p><ul><li><strong>默认值</strong> ；不拆分，紧贴 <code>弹性容器</code> 的左边框。</li><li><img src="/images/flex-jc-1.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li>不拆分，紧贴 <code>弹性容器</code> 的右边框。</li><li><img src="/images/flex-jc-2.jpg" alt></li></ul><p><strong>center</strong></p><ul><li>不拆分，在 <code>弹性容器</code> 内居中显示。</li><li><img src="/images/flex-jc-3.jpg" alt></li></ul><p><strong>space-between</strong></p><ul><li>拆分，分别紧贴 <code>弹性容器</code> 的左、右边框， <code>弹性子元素</code> 之间由 <strong>空白</strong> 分隔。</li><li><img src="/images/flex-jc-4.jpg" alt></li></ul><p><strong>space-around</strong></p><ul><li>拆分，每个 <code>弹性子元素</code> 由宽度相同的 <strong>空白</strong> 围绕。所以 <code>弹性子元素到边框</code> 的距离是 <code>弹性子元素到弹性子元素</code> 距离到一半。</li><li><img src="/images/flex-jc-5.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p><code>align-content</code> ：<code>弹性子元素</code> 关于 <code>弹性盒子</code> 水平轴，在垂直方向上的分布规则。</p><p><strong>提示：</strong> 使用该参数时必须同时使用 <code>flex-wrap: wrap</code> 或 <code>flex-flow: xxx wrap</code> (<code>wrap-reverse</code> 也可)。</p><p>主要有以下几个值：<code>stretch</code>、<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>space-between</code>、<code>space-around</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>stretch</strong> ：</p><ul><li><strong>默认值</strong> ；拆分，<code>弹性子元素</code> 被拉伸以适应 <code>弹性容器</code> 。</li><li><img src="/images/flex-ac-1.jpg" alt></li></ul><p><strong>flex-start</strong></p><ul><li>不拆分，<code>弹性子元素</code> 紧贴 <code>弹性容器</code> 的上边框。</li><li><img src="/images/flex-ac-2.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li>不拆分，<code>弹性子元素</code> 紧贴 <code>弹性容器</code> 的下边框。</li><li><img src="/images/flex-ac-3.jpg" alt></li></ul><p><strong>center</strong></p><ul><li>不拆分，在 <code>弹性容器</code> 内居中显示。</li><li><img src="/images/flex-ac-4.jpg" alt></li></ul><p><strong>space-between</strong></p><ul><li>拆分，分别紧贴 <code>弹性容器</code> 的上、下边框，<code>弹性子元素</code> 之间由 <strong>空白</strong> 分隔。</li><li><img src="/images/flex-ac-5.jpg" alt></li></ul><p><strong>space-around</strong></p><ul><li>拆分，每个 <code>弹性子元素</code> 由宽度相同的 <strong>空白</strong> 围绕。所以 <code>弹性子元素到边框</code> 的距离是 <code>弹性子元素到弹性子元素</code> 距离到一半。</li><li><img src="/images/flex-ac-6.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p><code>align-items</code> ：设置 <code>弹性容器</code> 内的 <strong>所有</strong> 的 <code>弹性子元素</code> 的对齐方式。</p><p>主要有以下几个值：<code>stretch</code>、<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>baseline</code>、<code>initial</code>、<code>inherit</code></p><p><strong>stretch</strong></p><ul><li><strong>默认值</strong> ；拉伸 <code>弹性子元素</code> 以适应 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-1.jpg" alt></li></ul><p><strong>flex-start</strong></p><ul><li><code>弹性子元素</code> 向上对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-2.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li><code>弹性子元素</code> 向下对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-3.jpg" alt></li></ul><p><strong>center</strong></p><ul><li><code>弹性子元素</code> 居中对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-4.jpg" alt></li></ul><p><strong>baseline</strong></p><ul><li><code>弹性子元素</code> 对齐 <code>弹性容器</code> 的基线(基本等效于 <code>flex-start</code> )。</li><li><img src="/images/flex-ai-5.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p><code>align-items</code> ：设置 <code>弹性容器</code> 内的 <strong>单个</strong> <code>弹性子元素</code> 的对齐方式。</p><p>主要有以下几个值：<code>auto</code>、<code>stretch</code>、<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>baseline</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>auto</strong></p><ul><li><strong>默认值</strong> ；继承它的父容器 (<code>弹性容器</code>) 的 <code>align-items</code> 属性，如果没有父容器则该值为 <code>stretch</code> 。</li><li><img src="/images/flex-as-1.jpg" alt></li></ul><p><strong>stretch</strong></p><ul><li>拉伸 <code>弹性子元素</code> 以适应 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-2.jpg" alt></li></ul><p><strong>flex-start</strong></p><ul><li><code>弹性子元素</code> 向上对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-3.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li><code>弹性子元素</code> 向下对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-4.jpg" alt></li></ul><p><strong>center</strong></p><ul><li><code>弹性子元素</code> 居中对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-5.jpg" alt></li></ul><p><strong>baseline</strong></p><ul><li><code>弹性子元素</code> 对齐 <code>弹性容器</code> 的基线(基本等效于 <code>flex-start</code> )。</li><li><img src="/images/flex-as-6.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/d9373a86b748" target="_blank" rel="noopener">css display:flex 属性</a></p><p><a href="https://www.w3cschool.cn/cssref/css3-pr-flex.html" target="_blank" rel="noopener">CSS flex 属性</a></p><p><a href="https://www.w3cschool.cn/css3/2h6g5xoy.html" target="_blank" rel="noopener">CSS3 弹性盒子(Flex Box)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3 引入了一种新的布局模式————弹性盒子。&lt;/p&gt;&lt;p&gt;引入弹性盒子的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。&lt;/p&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;弹性盒子由 &lt;code&gt;弹性容器(Flex container)&lt;/code&gt; 和 &lt;code&gt;弹性子元素(Flex item)&lt;/code&gt; 组成。&lt;code&gt;弹性容器&lt;/code&gt; 通过设置 &lt;code&gt;display&lt;/code&gt; 的值为 &lt;code&gt;flex&lt;/code&gt; 或 &lt;code&gt;flex-inline&lt;/code&gt; ，将其定义为 &lt;code&gt;弹性容器&lt;/code&gt; 。&lt;code&gt;弹性容器&lt;/code&gt; 内包含一个或多个 &lt;code&gt;弹性子元素&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;&lt;code&gt;弹性容器&lt;/code&gt; 外和 &lt;code&gt;弹性子元素&lt;/code&gt; 内都是正常渲染，&lt;code&gt;弹性盒子&lt;/code&gt; 只定义了 &lt;code&gt;弹性子元素&lt;/code&gt; 如何在 &lt;code&gt;弹性容器&lt;/code&gt; 内的布局。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Flex&lt;/code&gt; 即为 &lt;code&gt;弹性布局&lt;/code&gt;。设置为 &lt;code&gt;Flex&lt;/code&gt; 布局之后，&lt;code&gt;子元素&lt;/code&gt; 的 &lt;code&gt;float&lt;/code&gt;、&lt;code&gt;clear&lt;/code&gt; 和 &lt;code&gt;vertical-align&lt;/code&gt; 属性将失效。&lt;/p&gt;&lt;p&gt;接下来，介绍 &lt;code&gt;Flex&lt;/code&gt; 常用的几个属性。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>输入url之后...</title>
    <link href="http://jian2333.github.io/2019/05/25/after-input-url/"/>
    <id>http://jian2333.github.io/2019/05/25/after-input-url/</id>
    <published>2019-05-25T13:54:02.000Z</published>
    <updated>2019-05-27T01:18:43.462Z</updated>
    
    <content type="html"><![CDATA[<p>最近找工作，发现面试官都会问一个问题：在浏览器输入url之后，会发生什么？</p><p>那么，在浏览器输入url之后，到底会发生什么呢？</p><p>接下来，我们一起学习一下 ~</p><a id="more"></a><h3 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h3><p>当我们在浏览器地址栏输入url之后，主要会经过下面几个步骤：</p><p>域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后，发起http请求 –&gt; 服务器响应http请求，发送html代码给浏览器 –&gt; (默认)服务器发送html代码后，发起4次挥手，断开TCP请求 –&gt; 浏览器渲染页面</p><h4 id="1-域名解析"><a href="#1-域名解析" class="headerlink" title="1. 域名解析"></a>1. 域名解析</h4><p>域名解析，又叫 <strong>DNS解析</strong>。用于把地址栏的URL解析成服务器的IP地址，进而访问服务器。</p><p>域名解析按优先级，会有以下几种情况：</p><p><strong>查询浏览器缓存</strong> ：浏览器会缓存之前拿到的DNS 2-30分钟时间，如果没有找到，继续下一种情况；</p><p><strong>查询系统缓存</strong> ：检查 <strong>hosts</strong> 文件，这个文件保存了一些以前访问过的网站的域名和IP的数据。它就像一个本地的数据库，如果找到就可以直接获取目标主机的IP地址了。如果没找到，继续下一种情况；</p><p><strong>查询路由器缓存</strong> ：路由器有自己的DNS缓存，可能包含了需要查询的内容。如果没有，继续下一种情况；</p><p><strong>查询ISP DNS 缓存</strong> ：ISP服务商的DNS缓存（<strong>本地服务器缓存</strong>），那里可能有相关的内容。如果还没有，继续下一种情况；</p><p><strong>递归查询</strong> ：从 <code>根域名服务器</code> –&gt; <code>顶级域名服务器</code> –&gt; <code>权限域名服务器</code> –&gt; <code>得到服务器IP</code> ；</p><p>举个(ISP+递归查询)例子，浏览器发起一个DNS的系统调用，首先会先向本地配置的首选DNS服务器(一般是电信运营商提供的，也可以使用像Google提供的DNS服务器)发起域名解析请求。运营商的DNS服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则由运营商的DNS代我们的浏览器发起迭代的DNS解析请求。</p><p>它首先会找一个 <code>根域的DNS的IP地址</code> ，找到 <code>根域</code> 的地址后，就会向其发起请求(请问 <code>www.linux178.com</code> 这个域名的IP地址是多少啊？ )，<code>根域</code> 发现这是一个 <code>顶级域com域</code> 的一个域名，就告诉运营商的DNS我不知道这个域名的IP地址，但我知道 <code>com域</code> 的IP地址，你可以去问它，于是运营商的DNS就得到了 <code>com域</code> 的IP地址，又向 <code>com域</code> 的DNS地址发起了请求(请问 <code>www.linux178.com</code> 这个域名的IP地址是多少啊？)，<code>com域</code> 这台服务器告诉运营商DNS，我不知道 <code>www.linux178.com</code> 这个域名的IP地址，但我知道 <code>linxu178.com</code> 这个域的IP地址，你可以去问它，于是运营商的DNS又向 <code>linux178.com</code> 这个域的DNS地址(这个一般就是由域名注册商提供的，像万网、新网等)发送请求(请问 <code>www.linux178.com</code> 这个域名的IP地址是多少啊？)，这个时候 <code>linux178.com域</code> 的DNS服务器一查，诶，果然在我这里，于是就把找到的结果返回给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了 <code>www.linux178.com</code> 这个域名的IP地址了，之后再返回给浏览器，浏览器就得到要访问域名的IP地址了。</p><h4 id="2-TCP的三次握手"><a href="#2-TCP的三次握手" class="headerlink" title="2. TCP的三次握手"></a>2. TCP的三次握手</h4><p><img src="/images/aiu-1.jpg" alt></p><p><strong>第一次握手</strong> ：Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN=1 表示这是一个请求连接或连接接受报文，同时表示这个接受报不能携带数据，seq=x 表示Client自己的初始序号(seq=0 就代表这是第0号包)，这时候Client进入 <code>syn_sent</code> ，表示客户端等待服务器的响应；</p><p><strong>第二次握手</strong> ：Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的 SYN 和 ACK 都置1，ack=x+1 表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到(ack=1 其实就是 ack=0+1，也就是期望客户端的第1个包)，seq=y 表示Server自己的初始序号(seq=0 就代表这是服务器这边发出的第0号包)。这时服务器进入 <code>syn_rcvd</code> 状态，表示服务器已经收到Client的连接请求，等待Client的确认；</p><p><strong>第三次握手</strong> ：Client收到确认后还需要再次发送确认，同时携带要发送给Server的数据。ACK=1 表示确认号 ack=y+1 有效(代表收到服务器的第1个包)，Client自己的序号seq=x+1(表示这就是我的第一个包，相对于第0个包来说的)，一旦收到Client的确认后，这个TCP连接就进入了 <code>Established</code> 状态，就可以发起http请求了。</p><h5 id="为什么要3次握手"><a href="#为什么要3次握手" class="headerlink" title="为什么要3次握手"></a>为什么要3次握手</h5><p>为了防止已失效的连接请求报文突然又传送到了服务器，进而产生错误。</p><p><strong>举个例子：</strong></p><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络节点长时间滞留了，以致延误到连接释放以后的某个时间才到达server。这本来是一个早已失效的报文段，但server收到此报文段后，误认为这是client再出发出的一个新的连接请求。于是就像client发出确认报文段，同意建立连接。假设不采用 <code>三次握手</code> ，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的连接已经建立了，并一直在等待client发来数据。这样，server的很多资源就白白浪费了。采用 <code>三次握手</code> 的方法就可以防止上述现象的发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p><h4 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3. 传输数据"></a>3. 传输数据</h4><h5 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h5><p>一个HTTP请求报文由 <code>请求行(request line)</code> ，<code>请求头部(header)</code> ，<code>空行</code> ，<code>请求数据</code> 4个部分组成，下图给出了请求报文的一般格式。</p><p><img src="/images/aiu-4.jpg" alt></p><p><strong>请求行</strong></p><p>请求行分为三个部分：<code>请求方法</code> ，<code>请求地址</code> 和 <code>协议版本</code> 。</p><p><code>请求方法</code></p><p>HTTP/1.1 定义的请求方法有8中：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>PATCH</code>、<code>HEAD</code>、<code>OPTIONS</code>、<code>TRACE</code> 。</p><p>最常用的两种是 <code>GET</code> 和 <code>POST</code> ，如果是 RESTful 接口的话一般会用到 <code>GET</code>、<code>POST</code>、<code>DELETE</code>、<code>PUT</code> 。</p><p><code>请求地址</code></p><p>URL：统一资源定位符，是一种资源位置的抽象唯一识别方法。</p><p>组成如下(端口和路径有时可以省略) ：</p><p><img src="/images/aiu-5.jpg" alt></p><p><code>GET</code> 请求时，有时会带参数。</p><p><code>协议版本</code></p><p>协议版本的格式为：<code>HTTP/主版本号.次版本号</code> ，常用的有 <code>HTTP/1.0</code> 和 <code>HTTP/1.1</code> 。</p><p><strong>请求头部</strong></p><p>请求头部为请求报文添加了一些附加信息，由 <strong>名/值</strong> 对组成，每行一对，名和值之间用冒号分隔。</p><p>常见请求头如下：</p><p><img src="/images/aiu-6.jpg" alt></p><p>请求头部的最后会有一个 <code>空行</code> ，表示请求头部结束，接下来为请求数据。这一行非常重要，必不可少。</p><p><strong>请求数据</strong></p><p>可选部分，比如 <code>GET</code> 请求就没有请求数据。</p><p>下面是一个 <code>POST</code> 方法的请求报文：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST 　/index.php　HTTP/1.1 　　 //请求行</span><br><span class="line"><span class="attribute">Host</span>: localhost</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2　　//请求头</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-cn,zh;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Referer</span>: http://localhost/</span><br><span class="line"><span class="attribute">Content-Length：25</span></span><br><span class="line"><span class="attribute">Content-Type：application/x-www-form-urlencoded</span></span><br><span class="line">　　//空行</span><br><span class="line">username=aa&amp;password=1234　　//请求数据</span><br></pre></td></tr></table></figure><h5 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h5><p>HTTP响应报文主要由 <code>状态行</code> ，<code>响应头部</code> ，<code>空行</code> 和 <code>响应数据</code> 4个部分组成。下图给出了响应报文的一般格式。</p><p><img src="/images/aiu-7.jpg" alt></p><p><strong>状态行</strong></p><p>由3部分组成，分别为：<code>协议版本</code> ，<code>状态码</code> ，<code>状态码描述</code> 。</p><p>其中 <code>协议版本</code> 和请求报文一致，<code>状态码描述</code> 是对状态码的简单描述，所以这里只介绍 <code>状态码</code> 。</p><p><code>状态码</code></p><p><code>状态码</code> 为3位数字。</p><p><strong>1xx</strong> ：指示信息——表示请求已接收，继续处理。</p><p><strong>2xx</strong> ：成功——表示请求已被成功接收、理解、接受。</p><p><strong>3xx</strong> ：重定向——表示要完成请求必须进行进一步的操作。</p><p><strong>4xx</strong> ：客户端错误——请求有语法错误或请求无法实现。</p><p><strong>5xx</strong> ：服务器端错误——服务器未能实现合法的请求。</p><p>下面列举几个常见的：</p><p><img src="/images/aiu-8.jpg" alt></p><p><strong>响应头部</strong></p><p>与 <code>请求头部</code> 类似，为响应报文添加一些附加的信息。</p><p>常见的 <code>响应头部</code> 如下：</p><p><img src="/images/aiu-9.jpg" alt></p><p><strong>响应数据</strong></p><p>用于存放需要返回给客户端的数据信息。</p><p>下面是一个响应报文的实例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK　　//状态行</span><br><span class="line"><span class="attribute">Date</span>: Sun, 17 Mar 2013 08:12:54 GMT　　//响应头部</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.2.8 (Win32) PHP/5.2.5</span><br><span class="line"><span class="attribute">X-Powered-By</span>: PHP/5.2.5</span><br><span class="line"><span class="attribute">Set-Cookie</span>: PHPSESSID=c0huq7pdkmm5gg6osoe3mgjmm3; path=/</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Content-Length</span>: 4393</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=5, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line">　　//空行</span><br><span class="line"></span><br><span class="line">&lt;html&gt;　　响应数据</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;HTTP响应示例&lt;title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello HTTP!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-TCP的四次挥手"><a href="#4-TCP的四次挥手" class="headerlink" title="4. TCP的四次挥手"></a>4. TCP的四次挥手</h4><p>默认情况下的TCP连接，在服务器发送一次html数据给浏览器后，服务器就会执行 <strong>四次挥手</strong> 以 <strong>断开TCP连接</strong> ，除了下面这种情况：</p><p><strong>持久连接</strong> ：只要任意一端没有明确的提出断开连接，则保持TCP连接状态。在 <code>请求首部字段</code> 中设置 <code>Connection:keep-alive</code> 即表示使用了持久连接。</p><p><img src="/images/aiu-2.jpg" alt></p><p><strong>注意</strong> ：</p><ul><li>主机1可以是 <code>客户端</code>，也可以是 <code>服务器端</code> ；</li><li>默认情况下，主机1是 <code>客户端</code>，即 <strong>客户端主动断开连接</strong> 的情况 ；</li><li>若 <code>服务器端</code> 主动断开连接，则主机1是 <code>服务器端</code> ；</li></ul><p><strong>过程描述</strong> ：</p><ol><li><code>主机1</code> 进程发出连接释放报文，并停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u(等于前面已经传送过来的数据的最后一个字节的序号加1)，此时，<code>主机1</code> 进入 FIN-WAIT-1(终止等待1) 状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li><code>主机2</code> 收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并带上自己的序列号seq=v，此时，<code>主机2</code>就进入了 CLOSE-WAIT(关闭等待) 状态。<code>主机2</code>通知高层的应用程序，<code>主机1</code> 向 <code>主机2</code> 的方向就释放了，这时候处于半关闭状态，即 <code>主机1</code> 已经没有数据要发送了，但是 <code>主机2</code> 若发送数据，<code>主机1</code> 仍然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。</li><li><code>主机1</code> 收到 <code>主机2</code> 的确认请求后，此时，<code>主机1</code> 就进入 FIN-WAIT-2(终止等待2) 状态，等待 <code>主机2</code> 发送连接释放报文(在这之前还需要接受 <code>主机2</code> 发送的最后的数据)。</li><li><code>主机2</code> 将最后的数据发送完毕后，就向 <code>主机1</code> 发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，<code>主机2</code> 很可能又发送了一些数据，假定此时的序列号为seq=w，此时，<code>主机2</code> 就进入了 LAST-ACK(最后确认) 状态，等待 <code>主机1</code> 的确认。</li><li><code>主机1</code> 收到 <code>主机2</code> 的连接释放报文后了，比如发出确认，ACK=1，ack=w+1，而自己的序列号seq=u+1，此时，<code>主机1</code> 就进入了 TIME-WAIT(时间等待) 状态。注意此时TCP链接还没有释放，必须经过 2MSL(最长报文段寿命) 的时间后，当 <code>主机1</code> 撤销相应的TCB后，才进入 CLOSED 状态。</li><li><code>主机2</code> 只要接收到了 <code>主机1</code> 发出的确认，就立即进入 CLOSED 状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，<code>主机2</code> 结束TCP连接的时间要比 <code>主机1</code> 早一些。</li></ol><h5 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h5><p>因为三次握手时只是建立一个连接，之后才传递数据，在握手时是没有数据传输的，所以3次即可。</p><p>而挥手时，<code>主机1</code> 停止向 <code>主机2</code> 传输数据后，<code>主机2</code> 会立刻响应 <code>主机1</code>，先回一个ACK报文，告诉 <code>主机1</code>，”你发的FIN报文我收到了，但只有等我 <code>主机2</code> 的所有报文都发送完毕后，我才能发送FIN报文”，所以挥手的时候 <code>主机2</code> 要分两步，所以挥手需要四次。</p><h5 id="为什么要等待-2MSL"><a href="#为什么要等待-2MSL" class="headerlink" title="为什么要等待 2MSL"></a>为什么要等待 2MSL</h5><p>因为网络可能不稳定，最后一个 ACK报文有可能会丢失，所以，TIME-WAIT 状态就是用来重发可能丢失的 ACK报文(第四步的报文)。</p><p>在四次挥手的过程中，<code>主机2</code> 在 LAST-ACK(最后确认) 状态时，如果没接收到了 <code>主机1</code> 发来的 ACK报文，则不断发送FIN片段。所以 <code>主机1</code> 不能立即关闭，它必须确认 <code>主机2</code> 接收到了该 ACK之后，才关闭连接。所以，<code>主机1</code> 会设置一个计时器，等待 2MSL的时间，如果再次收到FIN，说明之前发送的ACK没有传到 <code>主机2</code>，于是会重新发一个ACK给 <code>主机2</code>；如果等待 2MSL后没有收到FIN，说明 <code>主机2</code> 已收到ACK且已关闭，于是 <code>主机1</code> 也关闭，TCP连接结束。</p><h4 id="5-渲染HTML页面"><a href="#5-渲染HTML页面" class="headerlink" title="5. 渲染HTML页面"></a>5. 渲染HTML页面</h4><p>客户端拿到服务器传输过来的文件后，找到 <strong>HTML</strong> 和 <strong>MIME</strong> 文件，通过 <strong>MIME</strong> 文件，浏览器知道要用页面渲染引擎来处理 <strong>HTML</strong> 文件。</p><p>页面渲染主要有以下几个步骤：</p><p><strong>1. 解析html源码，创建一个DOM树</strong></p><p>在 DOM 树中，每一个 HTML 标签都有一个对应的节点，并且每一个文本也都会有一个对应的文本节点。</p><p><strong>2. 解析CSS代码，计算出最终的样式数据，形成css对象模型CSSOM</strong></p><p>首先会忽略非法的CSS代码，然后按 浏览器默认设置——用户设置——外链样式——内联样式——style样式 的顺序进行渲染。</p><p><strong>3. 利用DOM和CSSOM构建一个渲染树（rendering tree）</strong></p><p>渲染树和 DOM 树有点像，但是是有区别的。</p><p>DOM 树完全和 HTML标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如 head、display:none 的元素等。</p><p>而且一大段文本中的每一行在渲染树中都是一个独立的节点。</p><p>渲染树中的每一个节点都存储有对应的css属性。</p><p><strong>4. 浏览器根据渲染树，直接把页面绘制到屏幕上</strong></p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>JS和图片会阻塞 DOM 的加载和渲染。</li><li>CSS不会阻塞 DOM 的加载，但会阻塞 DOM 的渲染(即浏览器控制台可以打印 DOM 节点了，但页面还是空白，没有渲染)。</li><li>CSS会阻塞JS的加载和执行。</li><li>加载JS时，添加 <code>defer</code> 参数，脚本会立即下载但不执行，在 DOM 加载完成后再执行。多个 <code>defer</code> 的脚本会按顺序执行。</li><li>加载JS时，添加 <code>async</code>参数，脚本会异步加载再执行，执行的时候还是会阻塞 DOM 的加载。多个 <code>async</code> 的脚本不会按顺序执行。</li><li>实际情况下，有时候多个 <code>defer</code> 时加载完后不一定会按顺序执行，所以建议，<strong>尽量合并成一个JS再使用 <code>defer</code></strong>。</li><li>关于 <code>defer</code> 和 <code>async</code> ，可以查看下图：</li></ol><p><img src="/images/aiu-3.jpg" alt></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/engeng/articles/5959335.html" target="_blank" rel="noopener">1. 一次完整的HTTP请求过程</a></p><p><a href="https://www.cnblogs.com/tisikcci/p/5866753.html" target="_blank" rel="noopener">2. 在浏览器输入URL并按回车后都发生了什么?</a></p><p><a href="https://blog.csdn.net/yezitoo/article/details/78193794" target="_blank" rel="noopener">3. 一次完整的HTTP请求过程</a></p><p><a href="https://blog.csdn.net/bit_clearoff/article/details/60884905" target="_blank" rel="noopener">4. 服务端主动终止连接的情况分析</a></p><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="noopener">5. TCP的三次握手和四次挥手理解及面试题（很全面）</a></p><p><a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="noopener">6. defer和async的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近找工作，发现面试官都会问一个问题：在浏览器输入url之后，会发生什么？&lt;/p&gt;&lt;p&gt;那么，在浏览器输入url之后，到底会发生什么呢？&lt;/p&gt;&lt;p&gt;接下来，我们一起学习一下 ~&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://jian2333.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>浅谈浏览器内核</title>
    <link href="http://jian2333.github.io/2019/05/23/browser-kernel/"/>
    <id>http://jian2333.github.io/2019/05/23/browser-kernel/</id>
    <published>2019-05-23T10:23:37.000Z</published>
    <updated>2019-05-26T07:56:13.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内核简介"><a href="#内核简介" class="headerlink" title="内核简介"></a>内核简介</h3><p>一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：<strong>渲染引擎</strong> 和 <strong>js引擎</strong> 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 <strong>渲染引擎</strong> 。</p><p><strong>渲染引擎</strong> ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 <strong>排版引擎</strong> ，我们常说的浏览器内核主要指的就是 <strong>渲染引擎</strong> 。</p><p><strong>js引擎</strong> ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。</p><a id="more"></a><h3 id="5-大主流浏览器-按时间顺序"><a href="#5-大主流浏览器-按时间顺序" class="headerlink" title="5 大主流浏览器(按时间顺序)"></a>5 大主流浏览器(按时间顺序)</h3><h4 id="IE-浏览器"><a href="#IE-浏览器" class="headerlink" title="IE 浏览器"></a>IE 浏览器</h4><p>IE 是微软其下的浏览器，IE4~IE11 使用的都是 <code>Trident</code> 内核。</p><p>Windows10 发布后，IE 将其内置浏览器命名为 <strong>Edge</strong>，使用新内核 <code>EdgeHTML</code> 。</p><p>IE 从版本11开始，初步支持 <code>WebGL</code> 技术。IE8 的js引擎是 <code>jscript</code> ，IE9开始使用 <code>Chakra</code> ，这两个版本差别很大，<code>Chakra</code> 无论是速度还是标准化方面都很出色。</p><p>Edge的JS引擎是 <code>Chakra</code>。</p><h4 id="Opera-浏览器"><a href="#Opera-浏览器" class="headerlink" title="Opera 浏览器"></a>Opera 浏览器</h4><p>Opera 是挪威 Opera Software ASA 公司其下的浏览器。</p><p>1995年，Opera 公司发布第一版 Opera 浏览器，并使用 <code>Presto</code> 内核。</p><p>2016年奇虎360和昆仑万维收购了 Opera 浏览器，并改用当时 Google 开源的 <code>webkit</code> 内核。</p><p>之后 Opera 又跟随 Google 将浏览器内核改为 <code>Blink</code> 。</p><h4 id="Safari-浏览器"><a href="#Safari-浏览器" class="headerlink" title="Safari 浏览器"></a>Safari 浏览器</h4><p>Safari 是 Apple 公司自研的浏览器，主要用于 Apple 自身的产品。</p><p>第二次浏览器大战也是从苹果公司发布 Safari 开始的。</p><p>2003年，苹果公司在苹果手机上开发 Safari 浏览器，利用自己得天独厚的手机市场份额使 Safari 浏览器迅速成为世界主流浏览器。</p><p>Safari 是最早使用 <code>webkit</code> 内核的浏览器，后来升级为 <code>webkit2</code> 内核，也是现在苹果默认的浏览器。</p><p>Safari 的JS引擎是 <code>JavaScriptCore</code> 。</p><h4 id="Firefox-浏览器"><a href="#Firefox-浏览器" class="headerlink" title="Firefox 浏览器"></a>Firefox 浏览器</h4><p>Firefox 是 Mozilla 公司旗下的浏览器，也就是 网景 公司后来的浏览器。</p><p>网景被收购后，网景人员创办了 Mozilla 基金会，这是一个非营利性的组织，他们在2004年推出自己的浏览器 Firefox。</p><p>Firefox 采用 <code>Gecko</code> 内核。</p><p>Firefox 的JS引擎是 <code>SpiderMonkey</code> 。</p><p><code>Gecko</code> 是一个开源的项目，代码完全公开，因此受到很多人的青睐。</p><h4 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h4><p>Chrome 是 Google 公司的浏览器。</p><p>Chrome 最开始使用 <code>webkit</code> 分支出的 <code>Chromium</code> 内核，后来升级为 <code>Blink</code> 内核。</p><p>Chrome 的JS引擎是 <code>V8</code> 。</p><h4 id="浏览器与JS引擎"><a href="#浏览器与JS引擎" class="headerlink" title="浏览器与JS引擎"></a>浏览器与JS引擎</h4><p><img src="/images/bk-2.jpg" alt></p><h3 id="5-大内核"><a href="#5-大内核" class="headerlink" title="5 大内核"></a>5 大内核</h3><h4 id="Trident-内核"><a href="#Trident-内核" class="headerlink" title="Trident 内核"></a>Trident 内核</h4><p>也就是俗称的 <code>IE内核</code> 。</p><p><code>Trident</code> 内核迭代列表</p><p><img src="/images/bk-1.jpg" alt></p><p>使用该内核的浏览器有：IE浏览器，多核浏览器。</p><h4 id="Presto-Opera前内核-已废弃"><a href="#Presto-Opera前内核-已废弃" class="headerlink" title="Presto(Opera前内核)(已废弃)"></a>Presto(Opera前内核)(已废弃)</h4><p>Opera12.17及更早版本曾使用此内核，现已停止开发并废弃。</p><p>Opera在2013年2月宣布放弃 <code>Prosto</code>，转而跟随 Chrome 使用 <code>webkit</code> 的分支 <code>Chromium</code> 引擎作为其核心。</p><p>在 Chrome 与 2013年推出 <code>Blink</code> 核心后，Opera 也紧跟随其脚步使用 <code>Blink</code> 核心。</p><h4 id="Webkit-内核"><a href="#Webkit-内核" class="headerlink" title="Webkit 内核"></a>Webkit 内核</h4><p>苹果公司研发的内核，后来升级为 <code>webkit2</code>。</p><p><code>webkit</code>内核包括：<code>WebCore渲染引擎</code> 和 <code>JavaScriptCore解析引擎</code>，均是从 KDE 的 <code>KHTML</code> 和 <code>KJS</code> 衍生而来的。</p><p>2008年，Google 发布了 Chrome 浏览器，浏览器使用的内核叫做 <code>Chromium</code> 。</p><p><code>Chromium</code> fork 自开源引擎 <code>Webkit</code> ，Google 还研发了自己的JS引擎，即 <code>V8引擎</code> ，极大的提高了 JavaScript 的运行速度。</p><p>使用该内核的浏览器有：Safari，Android 默认浏览器，多核浏览器。</p><h4 id="Gecko-内核"><a href="#Gecko-内核" class="headerlink" title="Gecko 内核"></a>Gecko 内核</h4><p>Netscape6 开始采用的内核，后来的 Mozilla Firefox 也采用了相同的内核。</p><p>使用该内核的浏览器有：Mozilla Firefox，Mozilla SeaMonkey，Flock(早期版本)，K-Meleon 。</p><h4 id="Blink-内核"><a href="#Blink-内核" class="headerlink" title="Blink 内核"></a>Blink 内核</h4><p>2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 <a href="http://blog.chromium.org/2013/04/blink-rendering-engine-for-chromium.html" target="_blank" rel="noopener">博客</a>，称将与苹果的开源浏览器核心 <code>Webkit</code> 分道扬镳，在 Chromium 项目中研发 <code>Blink</code> 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p><p><code>Blink</code> 是一个由 Google 和 Opera Software 开发的浏览器 渲染引擎，Google 计划将这个渲染引擎作为 Chromium 计划的一部分。这一渲染引擎是开源引擎 <code>WebKit</code> 中<code>WebCore</code> 组件的一个分支，并且在 Chrome（28及往后版本）、Opera（15及往后版本）和 Yandex 浏览器中使用<br>此外，Mozilla 与三星也达成合作协议开发”下一代”浏览器渲染引擎Servo。</p><p>使用该内核的浏览器：Chrome，Opera，多核浏览器。</p><h5 id="补充：什么是-Chromium-计划"><a href="#补充：什么是-Chromium-计划" class="headerlink" title="补充：什么是 Chromium 计划"></a>补充：什么是 Chromium 计划</h5><p>Chromium 是 Google 为发展自家的浏览器 Google Chrome（以下简称Chrome）而开启的计划，所以 Chromium 相当于 Chrome 的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在 Chromium 上实现，待验证后才会应用在 Chrome 上，故 Chrome 的功能会相对落后但较稳定。<br>所以，Chromium 和 Chrome 都是浏览器，Chromium 是开发版本，相比起 Chrome 更新速度快很多，有时数个小时就有一个新版本，不过普通人一般用 Chrome 就可以了。</p><h5 id="补充：为什么要搞一个新的-Blink-内核"><a href="#补充：为什么要搞一个新的-Blink-内核" class="headerlink" title="补充：为什么要搞一个新的 Blink 内核"></a>补充：为什么要搞一个新的 Blink 内核</h5><p><code>Blink</code> 其实是 <code>WebKit</code> 的分支，如同 <code>WebKit</code> 是 <code>KHTML</code> 的分支。Google 的 Chromium 项目此前一直使用 <code>WebKit(WebCore)</code> 作为渲染引擎。</p><p>后来，由于苹果推出的 <code>WebKit2</code> 与 <code>Chromium</code> 的沙箱设计存在冲突，所以 <code>Chromium</code> 一直停留在 <code>WebKit</code>，并使用移植的方式来实现和主线 <code>WebKit2</code> 的对接。这增加了 <code>Chromium</code> 的复杂性，且在一定程度上影响了 <code>Chromium</code> 的架构移植工作。</p><p>基于以上原因，Google 决定从 <code>WebKit</code> 衍生出自己的 <code>Blink</code> 引擎（后由 Google 和 Opera Software 共同研发），将在 <code>WebKit</code> 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 <code>WebKit</code> 的影响，创造一个完全独立的 <code>Blink</code> 引擎。</p><h4 id="EdgeHTML-内核"><a href="#EdgeHTML-内核" class="headerlink" title="EdgeHTML 内核"></a>EdgeHTML 内核</h4><p>Windows10后，IE内置浏览器 Edge 使用的内核。</p><p>JS引擎为 <code>Chakra</code> 。</p><p>使用该内核的浏览器：Edge。</p><h3 id="国内其他浏览器"><a href="#国内其他浏览器" class="headerlink" title="国内其他浏览器"></a>国内其他浏览器</h3><p>上面说到的5大主流浏览器(IE，Edge，Opera，Safari，Firefox，Chrome)，都是单核浏览器。相比较，国内很多浏览器则是双核或多核。即由1个 <code>Trident</code> + N个<code>其他核心</code> 组成的。</p><p>常见的国内浏览器核心如下：</p><p>360安全浏览器（1.0-5.0为 <code>Trident</code>，6.0为 <code>Trident+Webkit</code> ，7.0为 <code>Trident+Blink</code> ）<br>360极速浏览器（7.5之前为 <code>Trident+Webkit</code> ，7.5为 <code>Trident+Blink</code>）<br>猎豹安全浏览器（1.0-4.2版本为 <code>Trident+Webkit</code>，4.3及以后版本为 <code>Trident+Blink</code>）<br>傲游浏览器（傲游1.x、2.x为 <code>Trident</code>，3.x为 <code>Trident+Webkit</code>）<br>世界之窗浏览器（最初为 <code>Trident</code>，2013年采用 <code>Trident+Chromium</code>）<br>搜狗高速浏览器（1.x为 <code>Trident</code>，2.0及以后版本为 <code>Trident+Webkit</code>）<br>UC浏览器（ <code>Blink+Trident</code>）</p><p>对于多核浏览器，<code>Trident</code> 指 <code>兼容模式</code>，而 <code>其他内核</code> 指 <code>高速浏览模式</code> 。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考文章：</p><p><a href="https://blog.csdn.net/BonJean/article/details/78453547" target="_blank" rel="noopener">1. 浏览器内核-渲染引擎、js引擎</a></p><p><a href="https://blog.csdn.net/yuyanjing123456789/article/details/78689595" target="_blank" rel="noopener">2. 五大主流浏览器与四大内核</a></p><p><a href="https://segmentfault.com/a/1190000011064695" target="_blank" rel="noopener">3. 聊聊浏览器内核</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内核简介&quot;&gt;&lt;a href=&quot;#内核简介&quot; class=&quot;headerlink&quot; title=&quot;内核简介&quot;&gt;&lt;/a&gt;内核简介&lt;/h3&gt;&lt;p&gt;一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：&lt;strong&gt;渲染引擎&lt;/strong&gt; 和 &lt;strong&gt;js引擎&lt;/strong&gt; 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 &lt;strong&gt;渲染引擎&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;渲染引擎&lt;/strong&gt; ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 &lt;strong&gt;排版引擎&lt;/strong&gt; ，我们常说的浏览器内核主要指的就是 &lt;strong&gt;渲染引擎&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;js引擎&lt;/strong&gt; ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://jian2333.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>每天一个Linux命令</title>
    <link href="http://jian2333.github.io/2019/05/16/Linux-Command/"/>
    <id>http://jian2333.github.io/2019/05/16/Linux-Command/</id>
    <published>2019-05-16T03:56:46.000Z</published>
    <updated>2019-05-17T12:49:59.846Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学一个系列，每天一个 Linux 命令</p><p>由于之前的笔记是写在 旧版博客 上的</p><p>所以</p><p>这里就不重新整理一份了，hahaha ~</p><p>直接，<a href="http://www.jianwill.cn/md/linuxList_2019-4-9.html" target="_blank" rel="noopener">传送门</a></p><p>(๑•̀ㅂ•́)و✧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学一个系列，每天一个 Linux 命令&lt;/p&gt;&lt;p&gt;由于之前的笔记是写在 旧版博客 上的&lt;/p&gt;&lt;p&gt;所以&lt;/p&gt;&lt;p&gt;这里就不重新整理一份了，hahaha ~&lt;/p&gt;&lt;p&gt;直接，&lt;a href=&quot;http://www.jianwill.cn/md/linuxList
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="http://jian2333.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="http://jian2333.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于 hexo 的一次踩坑之旅</title>
    <link href="http://jian2333.github.io/2019/05/14/hello-hexo/"/>
    <id>http://jian2333.github.io/2019/05/14/hello-hexo/</id>
    <published>2019-05-14T11:46:17.000Z</published>
    <updated>2019-05-23T10:08:58.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-hexo-的一次踩坑之旅。"><a href="#关于-hexo-的一次踩坑之旅。" class="headerlink" title="关于 hexo 的一次踩坑之旅。"></a>关于 hexo 的一次踩坑之旅。</h2><p>之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。</p><p>后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。</p><a id="more"></a><h3 id="npm-权限问题"><a href="#npm-权限问题" class="headerlink" title="npm 权限问题"></a>npm 权限问题</h3><p>因为之前安装 node 的时候自动安装了 npm ， 然后 Mac 下 npm 是默认安装在 <code>/usr/local/</code> 路径下的，而该路径下很多目录和文件时 <strong>只读的</strong> ，然后在安装 hexo 的时候，会报权限错误；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 此处会报权限错误</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>网上找了一下，主要有四种解决方法：</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>为当前用户添加 <code>npm安装目录</code> 下所有文件的写权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R (whoami)(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong> ：如果路径是 <code>/usr/local/</code> 的话不推荐这种方式，因为改权限会弄乱系统的权限，以后可能导致奇怪的错误(比如无法跟当前系统的其他用户共享)。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>把 <strong>npm</strong> 卸载，并安装在一个有读写权限的路径下；</p><p>推荐 <code>~/.npm-global</code> 路径下；</p><p>1.新建一个全局安装的路径；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.npm-global</span><br></pre></td></tr></table></figure><p>2.配置 npm 使用新的路径；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">'~/.npm-global'</span></span><br></pre></td></tr></table></figure><p>3.打开或者新建 <code>~/.profile</code> ，加入下面一行；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>4.重新启动终端；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>5.测试：安装一个全局包试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jslint</span><br><span class="line"></span><br><span class="line">[luncher@localhost aaa]$ ls ~/.npm-global/bin/</span><br><span class="line">jshint</span><br><span class="line">[luncher@localhost aaa]$</span><br></pre></td></tr></table></figure><h4 id="方法三-推荐"><a href="#方法三-推荐" class="headerlink" title="方法三(推荐)"></a>方法三(推荐)</h4><p>使用 <strong>nvm</strong> 。nvm 可以在一台电脑上管理不同版本的 node，并且使用 nvm 安装 npm 后，npm 默认的安装路径是有读写权限的，也就是说，以后 npm 安装任何包都不用再使用 <code>sudo</code> 参数了。</p><p>官网的解决方案：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener"><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></a>；</p><p>这里有个细节要注意：如果你本地已经安装了npm，你得先把本地的npm卸载，再安装nvm，再使用nvm安装npm；</p><p><strong>1.卸载已安装到全局的 node/npm</strong></p><p>node 命令在 <code>/usr/local/bin/node</code>，npm 命令在 <code>/usr/local/lib/node_modules/npm</code> 下；</p><p>查看已经安装的全局模块，以便卸载后再按不同的 node 版本重新安装；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node_modules<span class="comment">#删除全局 node_modules 目录</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/node<span class="comment">#删除 node</span></span><br><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/bin &amp;&amp; ls -l | grep <span class="string">"../lib/node_modules/"</span> | awk <span class="string">'&#123;print $9&#125;'</span>| xargs rm <span class="comment">#删除全局 node 模块注册的软链</span></span><br></pre></td></tr></table></figure><p><strong>2.安装 nvm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><p>借助第三方工具安装 node</p><ul><li>mac 系统借助 <strong>brew</strong> 安装 <code>node</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><ul><li>centos 系统借助 <strong>yum</strong> 安装 <code>node</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install node</span><br></pre></td></tr></table></figure><h3 id="部署分支问题"><a href="#部署分支问题" class="headerlink" title="部署分支问题"></a>部署分支问题</h3><p>由于 hexo 部署(<code>hexo d</code>) 的原理是，把站点上的所有静态文件删除，并把本地待部署的全部静态站点文件(/public/目录下) push 到远程库上，即完全覆盖；所以 hexo 官方文档有这样一句话 <strong>建议使用 master 作为写作分支，新建一个 public 分支作为发布分支</strong>。在按照这样创建分支后，发现网站打不开，然后在 <a href="https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages" target="_blank" rel="noopener">github pages</a> 的文档里看到这样几句话：</p><ul><li>Reponsitory 必须以 username.github.io 命令，这个 username 为 github 的账户名，网站部署成功后，使用 <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 进行访问；</li><li>必须使用 <strong>master</strong> 分支管理网站静态文件。注意这句话，必须使用 <strong>master</strong> 分支。emmmmm….. 就是这么坑。</li></ul><p>所以，github的建议是：</p><p>使用 <strong>master</strong> 作为发布分支，使用 <strong>hexo</strong> 作为写作分支。</p><h3 id="Hexo-的使用"><a href="#Hexo-的使用" class="headerlink" title="Hexo 的使用"></a>Hexo 的使用</h3><p>Hexo 的使用流程一般如下：</p><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a></p><p>1.安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.创建 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>3.新建 文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>4.生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">// or</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>5.本地预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">// or </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>6.部署到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">// or </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>主题的使用很简单，以下几个步骤即可：</p><p>1.clone 主题到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_blog_dir</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/DIYgod/hexo-theme-sagiri.git themes/sagiri</span><br></pre></td></tr></table></figure><p>2.修改 hexo 配置文件使用主题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: sagiri</span><br></pre></td></tr></table></figure><p>3.修改 主题配置文件，进行个性化设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 路径为：your_blog_dir/themes/sagiri/_config.yml</span><br></pre></td></tr></table></figure><h3 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h3><p>搜集了一些比较好看的主题：</p><p><a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener"><strong>sagiri</strong></a> ：<a href="https://diygod.me/" target="_blank" rel="noopener">https://diygod.me</a></p><p><a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener"><strong>Material X</strong></a> ：<a href="https://xaoxuu.com" target="_blank" rel="noopener">https://xaoxuu.com</a></p><p><strong><a href="https://github.com/elmorec/hexo-theme-inside" target="_blank" rel="noopener">Inside</a></strong> ：<a href="https://blog.oniuo.com" target="_blank" rel="noopener">https://blog.oniuo.com</a></p><p><strong><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a></strong> ：<a href="https://blog.tolvyou.cn" target="_blank" rel="noopener">https://blog.tolvyou.cn</a></p><h3 id="旧版博客"><a href="#旧版博客" class="headerlink" title="旧版博客"></a>旧版博客</h3><p>最后，就是巨丑的<a href="http://www.jianwill.cn" target="_blank" rel="noopener">旧版博客</a>了…….</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于-hexo-的一次踩坑之旅。&quot;&gt;&lt;a href=&quot;#关于-hexo-的一次踩坑之旅。&quot; class=&quot;headerlink&quot; title=&quot;关于 hexo 的一次踩坑之旅。&quot;&gt;&lt;/a&gt;关于 hexo 的一次踩坑之旅。&lt;/h2&gt;&lt;p&gt;之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。&lt;/p&gt;&lt;p&gt;后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>博客搬家啦</title>
    <link href="http://jian2333.github.io/2019/05/13/Migrate-Blog/"/>
    <id>http://jian2333.github.io/2019/05/13/Migrate-Blog/</id>
    <published>2019-05-13T12:43:06.000Z</published>
    <updated>2019-05-17T05:34:48.644Z</updated>
    
    <content type="html"><![CDATA[<p>博客搬家啦</p><p>新博客使用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> + <a href="https://pages.github.com/" target="_blank" rel="noopener">github pages</a> 来搭建</p><p>关于旧博客，对，就是巨丑的那个 ~~</p><p>点我！<a href="http://www.jianwill.cn" target="_blank" rel="noopener">点我就能看</a> ….</p><p>(づ｡◕‿‿◕｡)づ</p><a id="more"></a><p>————————– 分 割 线 ————————–</p><p>补充一下</p><p>由于旧博客不是用 <code>博客框架</code> ( <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，<a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">Jekyll</a>，<a href="https://zh-cn.wordpress.com/" target="_blank" rel="noopener">Wordpress</a> )搭建的</p><p>所以很多文章不是用 <code>markdown</code> 写的，部分用 <code>markdown</code> 写的文章也由于内容太长</p><p>然后，迁移起来就比较麻烦…</p><p>o(╯□╰)o</p><p>所以，就直接给个链接代替了..</p><p>hahaha ~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客搬家啦&lt;/p&gt;&lt;p&gt;新博客使用 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt; + &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github pages&lt;/a&gt; 来搭建&lt;/p&gt;&lt;p&gt;关于旧博客，对，就是巨丑的那个 ~~&lt;/p&gt;&lt;p&gt;点我！&lt;a href=&quot;http://www.jianwill.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我就能看&lt;/a&gt; ….&lt;/p&gt;&lt;p&gt;(づ｡◕‿‿◕｡)づ&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://jian2333.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jian2333.github.io/2019/05/12/hello-world/"/>
    <id>http://jian2333.github.io/2019/05/12/hello-world/</id>
    <published>2019-05-12T11:46:17.000Z</published>
    <updated>2019-05-17T03:51:51.488Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
