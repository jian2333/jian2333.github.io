<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,Jianww</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jian2333.github.io/"/>
  <updated>2021-01-24T14:13:50.718Z</updated>
  <id>http://jian2333.github.io/</id>
  
  <author>
    <name>Jianww</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>家庭网络的升级之旅(二)</title>
    <link href="http://jian2333.github.io/2021/01/19/home-net-2/"/>
    <id>http://jian2333.github.io/2021/01/19/home-net-2/</id>
    <published>2021-01-19T05:54:59.000Z</published>
    <updated>2021-01-24T14:13:50.718Z</updated>
    
    <content type="html"><![CDATA[<p>你问我(一)在哪里？其实并没有写，因为我懒。。。。。(小声bb)</p><p>那么(一)是什么呢，简单来说就是加了个软路由 <code>r2s</code>，用 <code>主路由</code> 的模式实现了路由翻墙～</p><h3 id="升级之旅-一"><a href="#升级之旅-一" class="headerlink" title="升级之旅(一)"></a>升级之旅(一)</h3><h4 id="痛点"><a href="#痛点" class="headerlink" title="痛点"></a>痛点</h4><ul><li>每个设备出国留学都要开相应的软件：<code>Windows</code> -&gt; <code>v2rayN</code>，<code>Mac</code> -&gt; <code>v2rayU</code>，<code>ios</code> -&gt; <code>shadowRocket</code></li><li>PC上代理游戏流量还得单独开 <code>proxifier</code> 软件，参考之前写的一片文章 <a href="https://jian2333.github.io/2019/09/10/sstovpn/">ss + proxifier 实现vpn游戏代理</a></li><li><code>switch</code> 联网得通过共享 <code>wifi</code> 的方式，一直开着 <code>PC</code> 或者 <code>iphone</code></li></ul><p>种种的不便大大降低了用户体验，尤其是玩 <code>switch</code> 的时候，每次都要特意开 <code>PC</code> 或 <code>iphone</code> 挂着，实在是不方便了～</p><p>那么，有什么方法能一起解决上面的问题呢？</p><a id="more"></a><h4 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h4><p>答案，当然是有的，<strong>路由翻墙</strong>就是很好的一种方案！</p><ul><li>路由器翻墙后，连接路由器的所有设备(有线/无线)都会根据<strong>流量规则</strong>自行决定是否翻墙</li><li>在 <code>路由翻墙插件</code> 里，设置 <code>协议规则</code>：<ul><li><code>TCP</code>: 使用 <code>v2ray</code> 协议，上网速度快；</li><li><code>UDP</code>: 使用 <code>ss</code> 协议，玩游戏稳定(上网速度慢)</li></ul></li></ul><p><strong>Tips</strong>：之所以 <code>UDP</code> 使用 <code>ss</code> 而不使用 <code>v2ray</code>，因为 <code>v2ray</code> 不适合作为<strong>游戏的流量协议</strong>，<code>v2ray</code> 进行了多次流量转换，网络类型很差，比如在 <code>switch</code> 里：</p><ul><li><code>UDP</code> 使用 <code>ss</code> 时：<code>NAT</code> 类型为<strong>A</strong>，网络质量最好</li><li><code>UDP</code> 使用 <code>v2ray</code> 时：<code>NAT</code> 类型为<strong>D</strong>，网络质量非常差，基本不能联机</li></ul><p>Ok，理论方案已经确定，接下来就是实践开始～</p><h5 id="硬路由尝试"><a href="#硬路由尝试" class="headerlink" title="硬路由尝试"></a>硬路由尝试</h5><p>最开始是直接尝试用硬路由刷 <code>梅林固件</code>、<code>老毛子固件</code> 等，但硬路由配置太低，刷了系统后跑不起来，最后决定<strong>直 接 上 软路由！！</strong></p><h5 id="软路由"><a href="#软路由" class="headerlink" title="软路由"></a>软路由</h5><p>软路由选择了入门级的 <code>r2s</code> ，因为性价比极高，只要200块就行，性能也够，而且体积非常小，很方便～</p><p>然后就是常规操作了，刷固件，配置 <code>passwall</code>，选择代理模式：</p><ul><li><code>TCP</code>: <code>v2ray</code> 协议，默认模式为 <code>中国大陆以外</code></li><li><code>UDP</code>: <code>ss</code> 协议，默认模式为 <code>游戏模式</code></li></ul><p>家庭网络采用 <code>主路由</code> 的连接方式：</p><ul><li><code>光猫</code> -&gt; <code>软路由</code> -&gt; <code>硬路由</code>(作为<strong>路由器</strong>) -&gt; <code>多个设备ABCDE</code></li><li><code>软路由</code> 中使用 <code>passwall</code> 插件进行<strong>路由翻墙</strong></li><li><code>硬路由</code> 中进行 <code>IP</code> 与 <code>MAC</code> 绑定，<code>wifi</code> 发射，<code>多个设备ABCDE</code> 的 <code>连接限制</code>、<code>网络限制</code>等功能</li></ul><p><img src="/images/hn-before.png" alt="家庭网络前" style="zoom:40%"></p><p>到此为止，之前的需求都满足了，完美！</p><h3 id="升级之旅-二"><a href="#升级之旅-二" class="headerlink" title="升级之旅(二)"></a>升级之旅(二)</h3><p>之后的时间一直都运行完美，直到入手了 <code>喷喷(喷射战士2)</code>….</p><h4 id="新的痛点"><a href="#新的痛点" class="headerlink" title="新的痛点"></a>新的痛点</h4><p>之前有说过，网页都走 <code>TCP</code> 的 <code>v2ray</code> 协议，网速快，游戏<strong>都</strong>走 <code>UDP</code> 的 <code>ss</code> 协议，网络稳定。</p><p>但是，<code>喷喷</code> 是个特例….. 这游戏会<strong>同时</strong>走 <code>TCP</code> 和 <code>UDP</code> 协议，而且对网络要求极高，<code>NAT</code> 必须是 <code>B</code> 以上。换句话说就是，玩 <code>喷喷</code> 的时候，<strong><code>TCP</code> 也要设置成 <code>ss</code> 协议</strong>。。。。</p><p>那么，新问题来了，玩 <code>喷喷</code> 的时候设置成 <code>ss</code> 协议，玩完后改回 <code>v2ray</code> 协议？</p><p>不行～～ 这样太麻烦了…..</p><p>所以…有方法能解决上面的问题吗？🤔️</p><h4 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h4><p>经过大量的查阅资料，发现了一种可行的方案：</p><ul><li><code>passwall</code> 里设置2个 <code>TCP</code> 协议，分别是 <code>TCP1</code> -&gt; <code>v2ray</code> 和 <code>TCP2</code> -&gt; <code>ss</code></li><li>默认设置为 <code>TCP1</code></li><li><strong>重点</strong>： 在 <code>访问控制</code> 里，通过 <code>IP</code> 或 <code>MAC</code> 匹配到 <code>switch</code>，然后设置为 <code>TCP2</code></li></ul><p>按理来说这样应该就可行了。但是，新的问题又出现了，当前 <code>主路由</code> 模式下，<code>软路由</code> 只能获取 <code>硬路由</code> 的 <code>IP</code> 和 <code>MAC</code>， 而 <code>设备ABCDE</code> 的 <code>IP</code> 和 <code>MAC</code> 又只能在 <code>硬路由</code> 中获取，而且 <code>软路由r2s</code> 只有一个 <code>LAN</code> 口，不能同时接多个 <code>设备ABCDE</code>。也就是说，<code>r2s</code> 不能识别到 <code>switch</code>，进而不能用 <code>访问控制</code> 来设置为 <code>TCP2</code> 了…</p><p>然后我又想到了<strong>交换机</strong>的 <code>中继AP</code> 模式，正好完美解决当前的问题了…..</p><p>其实就是把之前 <code>主路由</code> 模式下的 <code>硬路由</code>，从 <code>路由器</code> 改为 <code>交换机</code> 的功能，这样 <code>硬路由</code> 就相当于一个 <code>hub</code> 类似的功能，不提供实际 <code>IP</code> 和 <code>MAC</code>，只提供<strong>分流</strong>功能，把 <code>软路由</code> <code>LAN</code> 出来的流量直接给对应的 <code>设备ABCDE</code>，而且这种情况下，<code>软路由</code> 可以直接获取到 <code>设备ABCDE</code> 的 <code>IP</code> 和 <code>MAC</code>，进而就能通过 <code>访问控制</code> 设置 <code>switch</code> 的 <code>TCP</code> 了</p><p><strong>新的家庭网络连接方式</strong></p><p><img src="/images/hn-after.png" alt="8txA7M_20210120171154" style="zoom:40%"></p><p><strong>passwall相关配置</strong></p><p><img src="/images/hn-1.jpeg" alt="IP与Mac绑定" style="zoom:30%"></p><p><img src="/images/hn-2.jpeg" alt="passwall 默认协议" style="zoom:33%"></p><p><img src="/images/hn-3.jpeg" alt="passwall 默认代理模式" style="zoom:37%"></p><p><img src="/images/hn-4.jpeg" alt="访问控制"></p><p>这样配置后，上面的问题就完美解决啦～</p><h4 id="剩余问题"><a href="#剩余问题" class="headerlink" title="剩余问题"></a>剩余问题</h4><p>理论上讲，上面的方案配置正确的话，应该是可行的。</p><p>但实际发现，<code>访问控制</code> 这个功能并没有生效。<del>网上查找资料后发现，貌似是新版本 <code>passwall</code> 有这个问题，旧版本就没有….</del></p><p>然后吧…给作者提了个 <a href="https://github.com/xiaorouji/openwrt-passwall/issues/887" target="_blank" rel="noopener">issue</a> ，等待大佬的修复…..</p><p><strong>2021.01.24 更新</strong></p><p>作者回复了，备注里不能有空格….</p><p>然后试了下，果然就可以了……之前还升级 <code>固件</code>、<code>passwall</code> 版本折腾了好久。。。。</p><p>另外再吐槽下，<code>switch</code> 的 <code>wifi</code> 性能<strong>真是辣鸡!!</strong>，时不时的来一次掉线…..</p><p>最后还是买了 <code>usb网络交换器</code> 有线连 <code>switch</code> …</p><p>PS：注意同时兼容 <code>有线模式</code> 和 <code>无线模式</code> ～～</p><p><img src="/images/hn-5.jpeg" alt="访问控制"></p><h3 id="最终成果"><a href="#最终成果" class="headerlink" title="最终成果"></a>最终成果</h3><p>经过这次升级后，家里的网络更加智能啦～</p><p>可以根据规则指定 <code>某些设备</code> 走 <code>指定的协议</code>，而不会对主网络(默认 <code>v2ray</code> 的 <code>TCP</code> 协议)有影响。比如 <code>switch</code> ， 可以指定全程走 <code>ss</code> 协议，然后</p><p>就可以愉快的 <code>喷喷</code> 啦～ 😊</p><p><img src="/images/hn-splatoon.jpg" alt="splatoon_2 喷喷"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;你问我(一)在哪里？其实并没有写，因为我懒。。。。。(小声bb)&lt;/p&gt;&lt;p&gt;那么(一)是什么呢，简单来说就是加了个软路由 &lt;code&gt;r2s&lt;/code&gt;，用 &lt;code&gt;主路由&lt;/code&gt; 的模式实现了路由翻墙～&lt;/p&gt;&lt;h3 id=&quot;升级之旅-一&quot;&gt;&lt;a href=&quot;#升级之旅-一&quot; class=&quot;headerlink&quot; title=&quot;升级之旅(一)&quot;&gt;&lt;/a&gt;升级之旅(一)&lt;/h3&gt;&lt;h4 id=&quot;痛点&quot;&gt;&lt;a href=&quot;#痛点&quot; class=&quot;headerlink&quot; title=&quot;痛点&quot;&gt;&lt;/a&gt;痛点&lt;/h4&gt;&lt;ul&gt;&lt;li&gt;每个设备出国留学都要开相应的软件：&lt;code&gt;Windows&lt;/code&gt; -&amp;gt; &lt;code&gt;v2rayN&lt;/code&gt;，&lt;code&gt;Mac&lt;/code&gt; -&amp;gt; &lt;code&gt;v2rayU&lt;/code&gt;，&lt;code&gt;ios&lt;/code&gt; -&amp;gt; &lt;code&gt;shadowRocket&lt;/code&gt;&lt;/li&gt;&lt;li&gt;PC上代理游戏流量还得单独开 &lt;code&gt;proxifier&lt;/code&gt; 软件，参考之前写的一片文章 &lt;a href=&quot;https://jian2333.github.io/2019/09/10/sstovpn/&quot;&gt;ss + proxifier 实现vpn游戏代理&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;switch&lt;/code&gt; 联网得通过共享 &lt;code&gt;wifi&lt;/code&gt; 的方式，一直开着 &lt;code&gt;PC&lt;/code&gt; 或者 &lt;code&gt;iphone&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;种种的不便大大降低了用户体验，尤其是玩 &lt;code&gt;switch&lt;/code&gt; 的时候，每次都要特意开 &lt;code&gt;PC&lt;/code&gt; 或 &lt;code&gt;iphone&lt;/code&gt; 挂着，实在是不方便了～&lt;/p&gt;&lt;p&gt;那么，有什么方法能一起解决上面的问题呢？&lt;/p&gt;
    
    </summary>
    
      <category term="一起哈啤" scheme="http://jian2333.github.io/categories/%E4%B8%80%E8%B5%B7%E5%93%88%E5%95%A4/"/>
    
    
      <category term="v2ray" scheme="http://jian2333.github.io/tags/v2ray/"/>
    
      <category term="vpn" scheme="http://jian2333.github.io/tags/vpn/"/>
    
      <category term="科学上网" scheme="http://jian2333.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>中后台系统之mbs-cli脚手架集成</title>
    <link href="http://jian2333.github.io/2021/01/06/my-cli/"/>
    <id>http://jian2333.github.io/2021/01/06/my-cli/</id>
    <published>2021-01-06T14:52:14.000Z</published>
    <updated>2021-04-07T12:59:30.851Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一般，我们知道"><a href="#一般，我们知道" class="headerlink" title="一般，我们知道"></a>一般，我们知道</h3><p><img src="/images/mc-1.jpg" alt></p><h3 id="为什么需要脚手架？"><a href="#为什么需要脚手架？" class="headerlink" title="为什么需要脚手架？"></a>为什么需要脚手架？</h3><ol><li>减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件。</li><li>根据交互动态生成项目结构和配置文件，具备更高的灵活性和人性化定制的能力。</li><li>多人协作更为方便，避免了人工传递文件的繁琐。</li><li>集成互联网上的模板，方便自己与他人使用。</li></ol><a id="more"></a><h4 id="脚手架工作流"><a href="#脚手架工作流" class="headerlink" title="脚手架工作流"></a>脚手架工作流</h4><p><img src="/images/mc-2.jpg" alt></p><h4 id="脚手架问答流"><a href="#脚手架问答流" class="headerlink" title="脚手架问答流"></a>脚手架问答流</h4><p><img src="/images/mc-3.jpg" alt></p><h3 id="如何搭建一个脚手架"><a href="#如何搭建一个脚手架" class="headerlink" title="如何搭建一个脚手架"></a>如何搭建一个脚手架</h3><p><img src="/images/mc-4.jpg" alt></p><h4 id="第三方库的支持"><a href="#第三方库的支持" class="headerlink" title="第三方库的支持"></a>第三方库的支持</h4><p><img src="/images/mc-5.jpg" alt></p><h4 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h4><h5 id="1、初始化项目"><a href="#1、初始化项目" class="headerlink" title="1、初始化项目"></a>1、初始化项目</h5><p>首先创建一个空项目，命名为 <strong>mbs-cli</strong> ，然后新建一个 <strong>bin/mbs</strong> 文件，再执行 <code>npm init</code> 生成一个 <code>package.json</code> 文件。最后安装上面需要用到的依赖。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir mbs-cli &amp;&amp; <span class="built_in">cd</span> mbs-cli</span><br><span class="line">mkdir bin &amp;&amp; <span class="built_in">cd</span> bin &amp;&amp; touch mbs &amp;&amp; <span class="built_in">cd</span> ../ &amp;&amp; npm init</span><br><span class="line">npm install commander download-git-repo inquirer handlebars ora chalk <span class="built_in">log</span>-symbols cli-table -S</span><br></pre></td></tr></table></figure><h5 id="2、处理命令行"><a href="#2、处理命令行" class="headerlink" title="2、处理命令行"></a>2、处理命令行</h5><p><strong>node.js</strong> 内置了对命令行操作的支持，在 <code>package.json</code> 中的 <code>bin</code> 字段可以定义命令名和关联的执行文件。</p><p>在 <code>package.json</code> 中加上 <code>bin</code> 的内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"mbs-cli"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"中后台系统脚手架"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"mbs"</span>: <span class="string">"bin/mbs"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先在 <code>mbs</code> 文件中引入相关依赖模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/usr/bin/env node</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; existsSync &#125; = <span class="built_in">require</span>(<span class="string">'fs'</span>) <span class="comment">// 系统内置模块 主要用来操作文件</span></span><br><span class="line"><span class="keyword">const</span> program = <span class="built_in">require</span>(<span class="string">'commander'</span>) <span class="comment">// 自动的解析命令和参数，用于处理用户输入的命令</span></span><br><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>) <span class="comment">// 给终端的字体加上颜色</span></span><br><span class="line"><span class="keyword">const</span> symbols = <span class="built_in">require</span>(<span class="string">'log-symbols'</span>) <span class="comment">// 在终端上显示出 ✔︎ 或者 ✘ 等的图标</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; resolve &#125; = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"><span class="keyword">const</span> res = <span class="function"><span class="params">command</span> =&gt;</span> resolve(__dirname, <span class="string">'../commands/'</span>, command)</span><br></pre></td></tr></table></figure><p>然后编写nodejs处理逻辑，具体用法见下。</p><h4 id="nodejs依赖模块介绍与用法"><a href="#nodejs依赖模块介绍与用法" class="headerlink" title="nodejs依赖模块介绍与用法"></a>nodejs依赖模块介绍与用法</h4><h5 id="commander（指挥官）"><a href="#commander（指挥官）" class="headerlink" title="commander（指挥官）"></a>commander（指挥官）</h5><p>自动地解析命令和参数，用于处理用户输入的命令</p><ul><li>usage(): 设置usage值，自定义帮助信息</li><li>command(): 定义一个命令名字</li><li>description(): 设置 description值</li><li>option(): 定义参数，需要设置「关键字」和 「描述」，关键字包括「简写」和「全写」两部分，以 <code>,</code>、<code>|</code>、<code>空格</code> 做分隔</li><li>parse(): 解析命令行参数 <code>argv</code></li><li>version(): 终端输出版本号</li></ul><p><strong>定义常规命令：</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 定义常规命令</span></span><br><span class="line">program.usage(<span class="string">'&lt;command&gt;'</span>)</span><br><span class="line">program.version(<span class="built_in">require</span>(<span class="string">'../package'</span>).version)</span><br></pre></td></tr></table></figure><p><strong>init命令逻辑</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init 命令逻辑</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">  .description(<span class="string">'Generate a new project'</span>)</span><br><span class="line">  .alias(<span class="string">'i'</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!existsSync(name)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(name)</span><br><span class="line">      <span class="built_in">require</span>(res(<span class="string">'init'</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">      <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">'Project already exists'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>处理用户输入命令</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// init 命令逻辑</span></span><br><span class="line">program</span><br><span class="line">  .command(<span class="string">'init &lt;name&gt;'</span>)</span><br><span class="line">  .description(<span class="string">'Generate a new project'</span>)</span><br><span class="line">  .alias(<span class="string">'i'</span>)</span><br><span class="line">  .action(<span class="function">(<span class="params">name</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!existsSync(name)) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(name)</span><br><span class="line">      <span class="built_in">require</span>(res(<span class="string">'init'</span>))</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 错误提示项目已存在，避免覆盖原有项目</span></span><br><span class="line">      <span class="built_in">console</span>.log(symbols.error, chalk.red(<span class="string">'Project already exists'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>最后处理解析命令行参数</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">program.parse(process.argv)</span><br><span class="line"><span class="comment">// program.parse: 解析命令之中的参数，根据上面定义好的规则执行命令</span></span><br><span class="line"><span class="comment">// process: 一个全局对象，控制有关信息，控制node.js的进程</span></span><br><span class="line"><span class="comment">// process.argv: 该属性返回一个数组，这个数组包含了启动node.js进程时的命令行参数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!program.args.length) &#123;</span><br><span class="line">  program.help()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="inquirer（询问者）"><a href="#inquirer（询问者）" class="headerlink" title="inquirer（询问者）"></a>inquirer（询问者）</h5><p>通用的命令行用户界面集合，用于和用户进行交互。由于交互的问题种类不同，<code>inquirer</code> 为每个问题提供很多参数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">type: 表示提问的类型，包括：input, confirm, list, rawlist, expand, checkbox, password, editor;</span><br><span class="line">name: 存储当前问题回答的变量;</span><br><span class="line">message: 问题的描述；</span><br><span class="line">default: 默认值;</span><br><span class="line">choices: 列表选项，在某些type下可用，并且包含一个分隔符(separator)；</span><br><span class="line">validate: 对用户的回答进行校验‘</span><br><span class="line">filter: 对用户的回答进行过滤处理，返回处理后的值;</span><br><span class="line">when: 根据前面问题的回答，判断当前问题是否需要被回答；</span><br><span class="line">prefix: 修改message默认前缀；</span><br><span class="line">suffix: 修改message默认后缀；</span><br></pre></td></tr></table></figure><p><strong>语法结构</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> inquirer = <span class="built_in">require</span>(<span class="string">'inquirer'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> promptList = [</span><br><span class="line">  <span class="comment">// 具体交互内容</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">inquirer.prompt(promptList).then(<span class="function"><span class="params">answers</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(answers) <span class="comment">// 返回的结果</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>input类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promptList1 = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'input'</span>,</span><br><span class="line">    name: <span class="string">'author'</span>,</span><br><span class="line">    message: <span class="string">'请输入作者名称'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/images/mc-6.jpg" alt></p><p><strong>confirm类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promptList2 = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'confirm'</span>,</span><br><span class="line">    name: <span class="string">'watch'</span>,</span><br><span class="line">    message: <span class="string">'是否使用监听？'</span>,</span><br><span class="line">    prefix: <span class="string">'前缀'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'confirm'</span>,</span><br><span class="line">    name: <span class="string">'filter'</span>,</span><br><span class="line">    message: <span class="string">'是否使用过滤？'</span>,</span><br><span class="line">    when: <span class="function"><span class="keyword">function</span> (<span class="params">answers</span>) </span>&#123; <span class="comment">// 当watch为ture时才会提示当前问题</span></span><br><span class="line">      <span class="keyword">return</span> answers.watch</span><br><span class="line">    &#125;,</span><br><span class="line">    suffix: <span class="string">'后缀'</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/images/mc-7.jpg" alt></p><p><strong>list类型</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promptList3 = [</span><br><span class="line">  &#123;</span><br><span class="line">    type: <span class="string">'list'</span>,</span><br><span class="line">    message: <span class="string">'请选择一种水果：'</span>,</span><br><span class="line">    name: <span class="string">'fruit'</span>,</span><br><span class="line">    choices: [</span><br><span class="line">      <span class="string">'Apple'</span>,</span><br><span class="line">      <span class="string">'Pear'</span>,</span><br><span class="line">      <span class="string">'Banana'</span></span><br><span class="line">    ],</span><br><span class="line">    filter: <span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123; <span class="comment">// 使用 filter 将回答变为小写</span></span><br><span class="line">      <span class="keyword">return</span> val.toLowerCase()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>效果</strong></p><p><img src="/images/mc-8.jpg" alt></p><h5 id="download-git-repo"><a href="#download-git-repo" class="headerlink" title="download-git-repo"></a>download-git-repo</h5><p><code>download-git-repo</code> 支持从 <code>Github</code> 、<code>Gitlab</code>、<code>Bitbucket</code> 下载仓库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">download(repository, destination, options, callback)</span><br></pre></td></tr></table></figure><p><strong>repository</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- GitHub - github:owner/name or simply owner/name</span><br><span class="line">- GitLab - gitlab:owner/name</span><br><span class="line">- Bitbucket - bithucket:owner/name</span><br><span class="line">- Direct - direct:url:branch</span><br></pre></td></tr></table></figure><p><strong>destination</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The file path to download the repository to. xxxxxxxxx</span><br></pre></td></tr></table></figure><p><strong>options</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">boolean default false - if true use git clone instead of an http download. </span><br><span class="line">while this can be a bit slower, it does allow private repositories to be used </span><br><span class="line">if the appropriate SSH keys are setup.</span><br></pre></td></tr></table></figure><p><strong>callback</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">The callback function as function (err).</span><br></pre></td></tr></table></figure><h5 id="ora（loading动效）"><a href="#ora（loading动效）" class="headerlink" title="ora（loading动效）"></a>ora（loading动效）</h5><p>用于显示下载中的动画效果</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> ora = <span class="built_in">require</span>(<span class="string">'ora'</span>)</span><br><span class="line"><span class="keyword">const</span> spinner = ora(<span class="string">'正在下载模板...'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始下载</span></span><br><span class="line">spinner.start()</span><br><span class="line"><span class="comment">// 下载成功</span></span><br><span class="line">spinner.succeed(<span class="string">'模板下载成功！'</span>)</span><br><span class="line"><span class="comment">// 下载失败</span></span><br><span class="line">spinner.faild(<span class="string">'模板下载失败！'</span>)</span><br></pre></td></tr></table></figure><p><img src="/images/mc-9.jpg" alt></p><h5 id="chalk（字体颜色）"><a href="#chalk（字体颜色）" class="headerlink" title="chalk（字体颜色）"></a>chalk（字体颜色）</h5><p>通过 <code>chalk</code> 来为打印信息加上样式，比如成功信息为绿色，失败信息为红色。这样子会让用户更加容易辨认，同时也让终端的显示更加好看：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> chalk = <span class="built_in">require</span>(<span class="string">'chalk'</span>)</span><br><span class="line"><span class="built_in">console</span>.log(chalk.green(<span class="string">'项目创建成功'</span>))</span><br><span class="line"><span class="built_in">console</span>.log(chalk.red(<span class="string">'项目创建失败'</span>))</span><br></pre></td></tr></table></figure><h5 id="log-symbols（日志符号）"><a href="#log-symbols（日志符号）" class="headerlink" title="log-symbols（日志符号）"></a>log-symbols（日志符号）</h5><p>使用 <code>log-symbols</code> 在信息前面加上 ✔︎ 或者 ✘ 等的图标，优化视觉体验：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(symbols.success, chalk.green(<span class="string">'New project has been initialize successfully!'</span>))</span><br></pre></td></tr></table></figure><p><img src="/images/mc-10.jpg" alt></p><h5 id="handlebars"><a href="#handlebars" class="headerlink" title="handlebars"></a>handlebars</h5><p><code>handlebars</code> 可以对仓库的模板中的 <code>package.json</code> 文件做一些动态修改：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"&#123;&#123;name&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">"&#123;&#123;description&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"bin"</span>: &#123;</span><br><span class="line">    <span class="attr">"mbs"</span>: <span class="string">"bin/mbs"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">"&#123;&#123;author&#125;&#125;"</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>并在下载模板完成之后将用户输入的答案渲染到 <code>package.json</code> 中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; readFileSync, writeFileSync &#125;  = <span class="built_in">require</span>(<span class="string">'fs'</span>)</span><br><span class="line"><span class="keyword">const</span> handlebars = <span class="built_in">require</span>(<span class="string">'handlebars'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">reWrite</span> (<span class="params">name, answers</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> filename = <span class="string">'./package.json'</span></span><br><span class="line">  <span class="keyword">const</span> meta = &#123;</span><br><span class="line">    name,</span><br><span class="line">    description: answers.description,</span><br><span class="line">    author: answers.author</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> content = readFileSync(filename).toString()</span><br><span class="line">  <span class="keyword">const</span> result = handlebars.compile(content)(meta)</span><br><span class="line">  writeFileSync(filename, result)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 或者添加其他依赖包</span></span><br><span class="line">  <span class="keyword">const</span> content = readFileSync(filename, <span class="string">'utf-8'</span>)</span><br><span class="line">  <span class="keyword">const</span> obj = <span class="built_in">JSON</span>.parse(content)</span><br><span class="line">  obj.dependencies[<span class="string">'echart'</span>] = <span class="string">'^0.1.3'</span></span><br><span class="line">  <span class="keyword">const</span> result = handlebars.compile(<span class="built_in">JSON</span>.stringify(obj, <span class="literal">null</span>, <span class="number">2</span>))(meta)</span><br><span class="line">  writeFileSync(filename, result)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="cli-table"><a href="#cli-table" class="headerlink" title="cli-table"></a>cli-table</h5><p>表格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Table = <span class="built_in">require</span>(<span class="string">'cli-table'</span>)</span><br><span class="line"><span class="keyword">const</span> template = <span class="built_in">require</span>(<span class="string">`<span class="subst">$&#123;__dirname&#125;</span>/../templates.json`</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> table = <span class="keyword">new</span> Table(&#123;</span><br><span class="line">  head: [<span class="string">'Template Name'</span>, <span class="string">'Branch'</span>, <span class="string">'Url                                '</span>],</span><br><span class="line">  style: &#123;</span><br><span class="line">    head: [<span class="string">'green'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">table.push([<span class="string">'template1'</span>, <span class="string">'branch1'</span>, <span class="string">'url1'</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">// 显示数据</span></span><br><span class="line"><span class="built_in">console</span>.log(table.toString())</span><br></pre></td></tr></table></figure><p><img src="/images/mc-11.jpg" alt></p><h5 id="shelljs"><a href="#shelljs" class="headerlink" title="shelljs"></a>shelljs</h5><p>执行命令行命令 <code>cd path &amp;&amp; npm i</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> shell = <span class="built_in">require</span>(<span class="string">'shelljs'</span>)</span><br><span class="line"></span><br><span class="line">shell.cd(meta.name)</span><br><span class="line">shell.exec(<span class="string">'npm i'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">err, stdout, stderr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (err) &#123;</span><br><span class="line">    spinner.fail()</span><br><span class="line">    <span class="built_in">console</span>.log(symbols.error, chalk.red(err))</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    spinner.succeed()</span><br><span class="line">    <span class="built_in">console</span>.log(</span><br><span class="line">      symbols.success,</span><br><span class="line">      chalk.green(<span class="string">'The object has installed dependence successfully!'</span>)</span><br><span class="line">    )</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="msb-cli脚手架"><a href="#msb-cli脚手架" class="headerlink" title="msb-cli脚手架"></a>msb-cli脚手架</h3><h4 id="mbs-cli工作流"><a href="#mbs-cli工作流" class="headerlink" title="mbs-cli工作流"></a>mbs-cli工作流</h4><p><img src="/images/mc-12.jpg" alt></p><h4 id="mbs-cli目录结构"><a href="#mbs-cli目录结构" class="headerlink" title="mbs-cli目录结构"></a>mbs-cli目录结构</h4><p><img src="/images/mc-13.jpg" alt></p><h4 id="mbs-cli核心命令"><a href="#mbs-cli核心命令" class="headerlink" title="mbs-cli核心命令"></a>mbs-cli核心命令</h4><p><img src="/images/mc-14.jpg" alt></p><h3 id="本地npm模块调试"><a href="#本地npm模块调试" class="headerlink" title="本地npm模块调试"></a>本地npm模块调试</h3><h4 id="开启调试模式"><a href="#开启调试模式" class="headerlink" title="开启调试模式"></a>开启调试模式</h4><p><code>npm link</code> 可以将当前目录 <code>./bin</code> 文件夹下的 <code>npm包</code> 链接到全局执行环境，从而在任意位置使用命令行都可以直接运行该 <code>npm包</code></p><p><img src="/images/mc-15.jpg" alt></p><h4 id="关闭调试模式"><a href="#关闭调试模式" class="headerlink" title="关闭调试模式"></a>关闭调试模式</h4><p>在当前目录下执行 <code>npm unlink</code> 即可删除链接符号</p><p><img src="/images/mc-16.jpg" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一般，我们知道&quot;&gt;&lt;a href=&quot;#一般，我们知道&quot; class=&quot;headerlink&quot; title=&quot;一般，我们知道&quot;&gt;&lt;/a&gt;一般，我们知道&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/images/mc-1.jpg&quot; alt&gt;&lt;/p&gt;&lt;h3 id=&quot;为什么需要脚手架？&quot;&gt;&lt;a href=&quot;#为什么需要脚手架？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要脚手架？&quot;&gt;&lt;/a&gt;为什么需要脚手架？&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;减少重复性的工作，不再需要复制其他项目再删除无关代码，或者从零创建一个项目和文件。&lt;/li&gt;&lt;li&gt;根据交互动态生成项目结构和配置文件，具备更高的灵活性和人性化定制的能力。&lt;/li&gt;&lt;li&gt;多人协作更为方便，避免了人工传递文件的繁琐。&lt;/li&gt;&lt;li&gt;集成互联网上的模板，方便自己与他人使用。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="脚手架" scheme="http://jian2333.github.io/tags/%E8%84%9A%E6%89%8B%E6%9E%B6/"/>
    
      <category term="nodej" scheme="http://jian2333.github.io/tags/nodej/"/>
    
  </entry>
  
  <entry>
    <title>动效小结</title>
    <link href="http://jian2333.github.io/2020/11/16/animation/"/>
    <id>http://jian2333.github.io/2020/11/16/animation/</id>
    <published>2020-11-16T06:05:49.000Z</published>
    <updated>2020-11-16T08:24:55.866Z</updated>
    
    <content type="html"><![CDATA[<p>接上一篇文章，最近ui优化做的比较多，动效优化也是其中一部分。</p><p>动效的几种使用方式也都尝试过了，所以吧，做个小结记录一下～</p><h3 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h3><ul><li>手写动效<ul><li><code>css</code> 写法</li><li><code>vue</code> 写法</li></ul></li><li>第三方动效库<ul><li><code>animejs</code></li><li><code>lottie</code></li></ul></li></ul><a id="more"></a><h3 id="手写动效"><a href="#手写动效" class="headerlink" title="手写动效"></a>手写动效</h3><p>手写动效，使用 <code>css</code> 来描述样式，适用于较简单的动效</p><h4 id="css-写法"><a href="#css-写法" class="headerlink" title="css 写法"></a>css 写法</h4><ul><li>制定父元素的 <code>transition</code> 属性后，子元素的 <strong>show</strong> 和 <strong>hide</strong> 都会有动效，如果只在子元素里写 <code>transition</code> (比如<code>hover</code>)，则只在 <strong>show</strong> 的时候有动效</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition" target="_blank" rel="noopener"><code>transition</code></a> ：要显示的动效类型，时间，持续显示方式 – <code>all/transform/等</code>，<code>1000ms/s</code>，<code>ease/ease-in-out/linear/等</code></li><li>具体样式：包括 <code>opacity</code>、<code>translate</code>、<code>scale</code>、<code>rotate</code> 等。</li></ul><p><strong>Demo</strong></p><p><img src="/images/ani-1.gif" alt></p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span> @<span class="attr">click</span>=<span class="string">"clickIcon"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span> <span class="attr">:style</span>=<span class="string">"bgStyles"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sp"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.title</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">500</span>;</span><br><span class="line">  <span class="selector-class">.bg</span> &#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="variable">@bg-r</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="variable">@bg-r</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">    <span class="attribute">cursor</span>: pointer;</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">transition</span>: all <span class="number">0.5s</span> ease;</span><br><span class="line">    <span class="selector-tag">&amp;</span>+<span class="selector-class">.sp</span> &#123;</span><br><span class="line">      <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">      <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span> <span class="number">0</span> rgba(<span class="number">0</span>, <span class="number">154</span>, <span class="number">255</span>, <span class="number">0.5</span>);</span><br><span class="line">      <span class="attribute">transform</span>: scale(<span class="number">1.2</span>);</span><br><span class="line">      <span class="selector-tag">&amp;</span>+<span class="selector-class">.sp</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#009AFF</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Vue-写法"><a href="#Vue-写法" class="headerlink" title="Vue 写法"></a><a href="https://cn.vuejs.org/v2/guide/transitions.html" target="_blank" rel="noopener">Vue 写法</a></h4><p>和传统的 <code>css</code> 写法不同，<code>Vue</code> 写法多了一个 <code>transition</code> 和 <code>transition-group</code> 的写法</p><ul><li>使用 <code>name=&#39;x&#39;</code> + <code>x-YYYY</code> 的写法来描述动效过程</li><li>只有在组件切换的时候才会触发动效<ul><li><code>v-if</code></li><li><code>v-show</code></li><li>动态组件</li><li>组件根节点</li></ul></li><li>动效过程<ul><li><code>x-enter</code>: 动效开始前(<em>vue3 改为 <code>x-enter-from</code></em>)</li><li><code>x-enter-active</code>: <strong>show</strong> 动效结束前</li><li><code>x-leave-active</code>: <strong>hide</strong> 动效开始前</li><li><code>x-leave-to</code>: 动效结束后</li><li>搭配手写的 <code>css</code> 动效，可以实现更多效果</li></ul></li><li><code>transition-group</code><ul><li>必须是多个子元素，每个子元素包含唯一的 <code>key</code>，</li><li>子元素 <strong>show/hide</strong> 切换是无动效的，为了添加平滑动效，可以使用 <code>x-move</code></li></ul></li></ul><p><strong>Demo</strong></p><p><img src="/images/ani-2.gif" alt></p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition-group</span> <span class="attr">name</span>=<span class="string">"g"</span> <span class="attr">tag</span>=<span class="string">"ul"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"1"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-if</span>=<span class="string">"deviceData.type === '1'"</span> <span class="attr">class</span>=<span class="string">"formItem-height-12 l"</span> <span class="attr">key</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FormItem</span> <span class="attr">prop</span>=<span class="string">"model"</span> <span class="attr">label</span>=<span class="string">"设备类型"</span> <span class="attr">:required</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">Select</span> <span class="attr">v-model</span>=<span class="string">"deviceData.model"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">Option</span></span></span><br><span class="line"><span class="tag">                <span class="attr">v-for</span>=<span class="string">"(item, index) in deviceType"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:key</span>=<span class="string">"index"</span></span></span><br><span class="line"><span class="tag">                <span class="attr">:value</span>=<span class="string">"item.key"</span></span></span><br><span class="line"><span class="tag">                &gt;</span>&#123;&#123;item.name&#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">Option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">Select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">FormItem</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"3"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"4"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">key</span>=<span class="string">"5"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition-group</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 其他li位置移动时，动效平滑</span></span><br><span class="line"><span class="selector-class">.g-move</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: transform <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设备类型 show/hide 动效变化方式</span></span><br><span class="line"><span class="selector-class">.g-enter-active</span>, <span class="selector-class">.g-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">432px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.g-enter</span>, <span class="selector-class">.g-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">transform</span>: translateX(<span class="number">30px</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 设备类型 动效平滑</span></span><br><span class="line"><span class="selector-class">.l</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="第三方动效库"><a href="#第三方动效库" class="headerlink" title="第三方动效库"></a>第三方动效库</h3><p>第三方库动效，通过 <code>js</code> 来调用，适用于较复杂的动效</p><p>本次优化中使用到的第三方库有 <code>animejs</code> 和 <code>lottie</code></p><h4 id="animejs"><a href="#animejs" class="headerlink" title="animejs"></a><a href="http://animejs.com/" target="_blank" rel="noopener">animejs</a></h4><ul><li>使用 <code>js</code> 即可编写复杂的动效</li><li><a href="https://animejs.com/documentation/#cssSelector" target="_blank" rel="noopener">使用文档</a></li></ul><p><strong>Demo</strong></p><p><img src="/images/ani-3.gif" alt></p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"login-top"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"lott"</span> <span class="attr">class</span>=<span class="string">"lottie"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"user"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">import</span> anime <span class="keyword">from</span> <span class="string">'animejs/lib/anime.es'</span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    mounted () &#123;</span><br><span class="line">      <span class="comment">// 必须在mounted Dom渲染后</span></span><br><span class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">this</span>.initAnime(), <span class="number">250</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      initAnime () &#123;</span><br><span class="line">        anime.timeline(&#123;<span class="attr">loop</span>: <span class="literal">false</span>&#125;)</span><br><span class="line">          .add(&#123;</span><br><span class="line">          targets: <span class="string">'.logo-img, .logo-vertical'</span>,</span><br><span class="line">          opacity: [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">          translateY: [<span class="string">'20px'</span>, <span class="number">0</span>],</span><br><span class="line">          duration: <span class="number">1000</span>,</span><br><span class="line">          easing: <span class="string">'easeOutCubic'</span></span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">          .add(&#123;</span><br><span class="line">          targets: <span class="string">'.user'</span>,</span><br><span class="line">          opacity: [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">          translateY: [<span class="string">'-34%'</span>, <span class="string">'-44%'</span>],</span><br><span class="line">          duration: <span class="number">1000</span>,</span><br><span class="line">          easing: <span class="string">'easeOutCubic'</span></span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">          .add(&#123;</span><br><span class="line">          targets: <span class="string">'.system-name .zh-cn, .system-name .en-us'</span>,</span><br><span class="line">          translateY: [<span class="string">'20px'</span>, <span class="number">0</span>],</span><br><span class="line">          opacity: [<span class="number">0</span>, <span class="number">1</span>],</span><br><span class="line">          duration: <span class="number">1000</span>,</span><br><span class="line">          easing: <span class="string">'easeOutCubic'</span></span><br><span class="line">        &#125;, <span class="number">0</span>)</span><br><span class="line">          .add(&#123;</span><br><span class="line">          targets: <span class="string">'.lottie'</span>,</span><br><span class="line">          opacity: <span class="number">1</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h4 id="lottie"><a href="#lottie" class="headerlink" title="lottie"></a><a href="https://github.com/airbnb/lottie-web" target="_blank" rel="noopener">lottie</a></h4><p><code>lottie</code> 是一种跨平台的动效方案。ui小姐姐设计好动效后，利用<a href="https://github.com/airbnb/lottie-web" target="_blank" rel="noopener">插件</a>导出 <code>json</code>，然后使用不同平台的 <code>lottie</code> + 同一份 <code>json</code> 文件，即可实现不同平台下的相同动效，极大的降低了动效开发的成本。</p><p><strong>Demo</strong></p><p><img src="/images/ani-4.gif" alt></p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">ref</span>=<span class="string">"lott"</span> <span class="attr">class</span>=<span class="string">"lottie"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lottie <span class="keyword">from</span> <span class="string">'lottie-web'</span></span><br><span class="line"><span class="keyword">import</span> loJson <span class="keyword">from</span> <span class="string">'../../static/images/login/login-lottie3.json'</span></span><br><span class="line"></span><br><span class="line">initLottie () &#123;</span><br><span class="line">  <span class="keyword">this</span>.anim = lottie.loadAnimation(&#123;</span><br><span class="line">    container: <span class="keyword">this</span>.$refs.lott,</span><br><span class="line">    renderer: <span class="string">'svg'</span>,</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    autoPlay: <span class="literal">true</span>,</span><br><span class="line">    animationData: loJson</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">this</span>.$emit(<span class="string">'animCreated'</span>, <span class="keyword">this</span>.anim)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="其他资料"><a href="#其他资料" class="headerlink" title="其他资料"></a>其他资料</h3><p><a href="https://juejin.im/post/6844903830098804743" target="_blank" rel="noopener">前端动效库汇总</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;接上一篇文章，最近ui优化做的比较多，动效优化也是其中一部分。&lt;/p&gt;&lt;p&gt;动效的几种使用方式也都尝试过了，所以吧，做个小结记录一下～&lt;/p&gt;&lt;h3 id=&quot;使用方式&quot;&gt;&lt;a href=&quot;#使用方式&quot; class=&quot;headerlink&quot; title=&quot;使用方式&quot;&gt;&lt;/a&gt;使用方式&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;手写动效&lt;ul&gt;&lt;li&gt;&lt;code&gt;css&lt;/code&gt; 写法&lt;/li&gt;&lt;li&gt;&lt;code&gt;vue&lt;/code&gt; 写法&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;li&gt;第三方动效库&lt;ul&gt;&lt;li&gt;&lt;code&gt;animejs&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;lottie&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>伪元素的妙用</title>
    <link href="http://jian2333.github.io/2020/11/16/pseudo-element/"/>
    <id>http://jian2333.github.io/2020/11/16/pseudo-element/</id>
    <published>2020-11-16T02:46:22.000Z</published>
    <updated>2020-11-16T08:24:14.392Z</updated>
    
    <content type="html"><![CDATA[<p>最近ui优化做的比较多，样式写久了，越来越觉得 <code>伪元素</code> 是真的好用，善用 <code>伪元素</code> 能极大的提高效率。</p><p>下面总结下几种常用的伪元素用法：</p><ul><li>三角形</li><li>业务场景下的一些样式</li><li>垂直居中</li></ul><a id="more"></a><h3 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h3><h4 id="三角形"><a href="#三角形" class="headerlink" title="三角形"></a>三角形</h4><p>在 <code>css</code> 中，<code>border边框</code> 是由<strong>上下左右四个三角形</strong>组成的，所以，<strong>设置 <code>border</code> 边框为 <code>transparent</code> ，再设置要显示的 <code>border</code> 颜色</strong>， 即可以显示出三角形。</p><ul><li>通过设置不同的 <code>border</code> 和 <code>border-left</code> 宽度，可以生成不同效果的三角形</li><li>添加 <code>border-radius</code> ， 可以让 <strong>三角形变成扇形</strong></li></ul><p><strong>Demo</strong></p><p><img src="/images/pe-1.jpg" alt></p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"pseudo"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle1"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle2"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle3"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"triangle4"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.pseudo</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">display</span>: grid;</span><br><span class="line">  <span class="attribute">grid-template-columns</span>: repeat(auto-fill, <span class="number">120px</span>);</span><br><span class="line">  <span class="attribute">justify-items</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">  <span class="selector-class">.triangle1</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">      <span class="attribute">border-top</span>: <span class="number">40px</span> solid green;</span><br><span class="line">      <span class="attribute">border-right</span>: <span class="number">40px</span> solid orange;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">40px</span> solid red;</span><br><span class="line">      <span class="attribute">border-bottom</span>: <span class="number">40px</span> solid blue;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.triangle2</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">40px</span> solid red;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.triangle3</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span></span><br><span class="line">      <span class="attribute">border</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">80px</span> solid red;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.triangle4</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">      <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">      <span class="attribute">border</span>: <span class="number">40px</span> solid transparent;</span><br><span class="line">      <span class="attribute">border-left</span>: <span class="number">40px</span> solid red;</span><br><span class="line">      <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">      <span class="attribute">position</span>: absolute;</span><br><span class="line">      <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">      <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="业务场景"><a href="#业务场景" class="headerlink" title="业务场景"></a>业务场景</h4><p>最近的项目中，有个需求是<strong>自适应的情况下，显示5列图标，每列之间用箭头连接</strong>。</p><p>单独的图标自适应好做，<code>flex</code> 、 <code>grid</code> 布局都可以实现，但是图标间的 <code>连接箭头</code> 就不好做了，因为2个图标之间的距离，是不固定的….<strong>但是！如果用伪元素，这个问题就很容易解决了～</strong></p><p><strong>Tips:</strong></p><ul><li>1个 <code>元素</code> 只能有1个 <code>伪元素</code> ，如果要使用多个 <code>伪元素</code> ，就得用多个 <code>元素div</code></li><li><code>arrows-before.width</code> 宽度多 <code>10px</code> ，是为了能和 <code>arrows-after</code> 重叠，视觉看起来虚线不断裂</li></ul><p><strong>Demo</strong></p><p><img src="/images/pe-2.jpg" alt></p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"home-menu"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"[&#123;'arrows-after': arrowsAfter&#125;, &#123;'arrows-before': arrowsBefore&#125;]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"&#123;'arrows': arrowsBefore&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"title"</span> @<span class="attr">click</span>=<span class="string">"clickIcon"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bg"</span> <span class="attr">:style</span>=<span class="string">"bgStyles"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sp"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"body"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in values"</span> <span class="attr">:key</span>=<span class="string">"index"</span> <span class="attr">:class</span>=<span class="string">"bodyClass"</span> <span class="attr">:style</span>=<span class="string">"bodyStyle"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"value"</span>&gt;</span>&#123;&#123;item.value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"name"</span>&gt;</span>&#123;&#123;item.name&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span></span></span><br></pre></td></tr></table></figure><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">@arrows-border:</span> <span class="number">#E6E6E6</span>;</span><br><span class="line"><span class="variable">@arrows-margin:</span> <span class="number">24px</span>;</span><br><span class="line"><span class="variable">@arrows-width:</span> <span class="number">8px</span>;</span><br><span class="line"><span class="variable">@bg-r:</span> <span class="number">60px</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.arrows</span>(<span class="variable">@arrows-margin</span>) &#123;</span><br><span class="line">  <span class="selector-class">.arrows-before</span><span class="selector-pseudo">:before</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: calc(<span class="string">~'50% - @&#123;bg-r&#125; / 2 - @&#123;arrows-margin&#125; - @&#123;arrows-width&#125; + 10px'</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="variable">@arrows-border</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: -<span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.arrows</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="variable">@arrows-width</span> / <span class="number">2</span> solid transparent;</span><br><span class="line">    <span class="attribute">border-left</span>: <span class="variable">@arrows-width</span> solid <span class="variable">@arrows-border</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: calc(<span class="string">~'50% - @&#123;bg-r&#125; / 2 - @&#123;arrows-margin&#125; - @&#123;arrows-width&#125;'</span>);</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">27px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-class">.arrows-after</span><span class="selector-pseudo">:after</span> &#123;</span><br><span class="line">    <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">    <span class="attribute">width</span>: calc(<span class="string">~'50% - @&#123;bg-r&#125; / 2 - @&#123;arrows-margin&#125; + @&#123;arrows-width&#125;'</span>);</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> dashed <span class="variable">@arrows-border</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">right</span>: -<span class="variable">@arrows-width</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.arrows</span>(<span class="variable">@arrows-margin</span>);</span><br><span class="line"><span class="keyword">@media</span> only screen and (<span class="attribute">max-width</span>: <span class="number">1600px</span>) &#123;</span><br><span class="line">  <span class="variable">@arrows-margin:</span> <span class="number">12px</span>;</span><br><span class="line">  <span class="selector-class">.arrows</span>(<span class="variable">@arrows-margin</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h4><p>参考之前写的一篇<a href="https://jian2333.github.io/2019/06/22/centered/">文章</a>，利用 <code>父元素</code> 的 <code>伪元素</code> ，可以实现垂直居中</p><p><strong>相关代码</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"centered"</span>&gt;</span></span><br><span class="line">    我是居中文字</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> soild pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span>: &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>伪元素的用法还有很多，目前常用的暂时就这些，其他用法等用的多后再记录下来吧～</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近ui优化做的比较多，样式写久了，越来越觉得 &lt;code&gt;伪元素&lt;/code&gt; 是真的好用，善用 &lt;code&gt;伪元素&lt;/code&gt; 能极大的提高效率。&lt;/p&gt;&lt;p&gt;下面总结下几种常用的伪元素用法：&lt;/p&gt;&lt;ul&gt;&lt;li&gt;三角形&lt;/li&gt;&lt;li&gt;业务场景下的一些样式&lt;/li&gt;&lt;li&gt;垂直居中&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>typescript vue 实战(1)</title>
    <link href="http://jian2333.github.io/2020/09/02/ts-in-vue-1/"/>
    <id>http://jian2333.github.io/2020/09/02/ts-in-vue-1/</id>
    <published>2020-09-02T06:57:46.000Z</published>
    <updated>2020-09-02T10:21:36.559Z</updated>
    
    <content type="html"><![CDATA[<p><code>typescript</code> 对 <code>vue 2.x</code> 的支持不是很好，但我们还是有必要学习一下。</p><p>本文会列出 <code>vue</code> 中常用功能在 <code>typescript</code> 里的写法。</p><h3 id="基于类的组件"><a href="#基于类的组件" class="headerlink" title="基于类的组件"></a>基于类的组件</h3><p>单页面是以类的形式使用的，所以用 <code>typescript</code> 定义 <code>vue</code> 应使用下面的语法</p><ul><li>在 <code>script</code> 里添加 <code>lang=&#39;ts&#39;</code></li><li>在 <code>Component</code>里定义组件的 <code>name</code></li></ul><a id="more"></a><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span></span><br><span class="line"><span class="undefined">  @Component(&#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'HelloTs'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTs</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>javascript</code> 的代码代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'HelloTs'</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引入其他组件"><a href="#引入其他组件" class="headerlink" title="引入其他组件"></a>引入其他组件</h4><ul><li>使用 <code>import</code> 引入其他组件</li><li>在 <code>Component.components</code> 里添加引入的组件</li><li>在 <code>html</code> 模板里使用组件</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Login</span>&gt;</span><span class="tag">&lt;/<span class="name">Login</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> Login <span class="keyword">from</span> <span class="string">'@/components/Login.vue'</span></span></span><br><span class="line"><span class="undefined">  @Component(&#123;</span></span><br><span class="line"><span class="javascript">    name: <span class="string">'HelloTs'</span>,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      Login</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloTs</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="基础属性"><a href="#基础属性" class="headerlink" title="基础属性"></a>基础属性</h3><h4 id="data"><a href="#data" class="headerlink" title="data"></a>data</h4><ul><li>直接定义即可。</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'Jane'</span></span><br><span class="line"><span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="prop"><a href="#prop" class="headerlink" title="prop"></a>prop</h4><ul><li>使用 <code>import</code> 引入 <code>Prop</code></li><li>在 <code>@Prop</code> 装饰器中添加其他属性</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Prop, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@Prop</span>()</span><br><span class="line">  <span class="keyword">public</span> name!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@Prop</span>(&#123; required: <span class="literal">true</span>, <span class="keyword">type</span>: <span class="built_in">Number</span> &#125;)</span><br><span class="line"><span class="keyword">public</span> age!: <span class="built_in">Number</span></span><br><span class="line">  <span class="meta">@Prop</span>(&#123; required: <span class="literal">true</span>, <span class="keyword">type</span>: <span class="built_in">String</span>, <span class="keyword">default</span>: <span class="function">(<span class="params">x: <span class="built_in">string</span></span>) =&gt;</span> <span class="string">`China: <span class="subst">$&#123;x&#125;</span>`</span>&#125;)</span><br><span class="line"><span class="keyword">public</span> address!: <span class="built_in">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Computed"><a href="#Computed" class="headerlink" title="Computed"></a>Computed</h4><ul><li>直接使用 <code>get</code> 返回</li><li>使用 <code>set</code> + <code>get</code> 定义可修改的 <code>computed</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'Jane'</span></span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">  <span class="comment">// Computed</span></span><br><span class="line">  <span class="keyword">get</span> sayHi (): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`hi <span class="subst">$&#123;this.name&#125;</span>`</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">get</span> showAge (): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.age + <span class="number">2</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">set</span> showAge (newAge: <span class="built_in">number</span>) &#123;</span><br><span class="line">    <span class="keyword">this</span>.age = newAge</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Methods"><a href="#Methods" class="headerlink" title="Methods"></a>Methods</h4><ul><li>直接定义</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'Jane'</span></span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">  <span class="keyword">public</span> sayHi (name: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`hi <span class="subst">$&#123;this.name&#125;</span>`</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Watchers"><a href="#Watchers" class="headerlink" title="Watchers"></a>Watchers</h4><ul><li><code>Watch</code> 的用法和 <code>Javascript</code> 中的 <code>handler</code> 语法类似</li><li>使用 <code>import</code> 导入 <code>Watch</code></li><li>在 <code>Watch</code> 装饰器中添加 <code>监听对象</code> 和其他属性</li><li>添加 <code>handler</code> 方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Watch, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'Jane'</span></span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line">  <span class="keyword">public</span> likes: object = &#123;</span><br><span class="line">    sport: <span class="string">'sing'</span>,</span><br><span class="line">    color: <span class="string">'blue'</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="meta">@Watch</span>(<span class="string">'likes'</span>, &#123;</span><br><span class="line">    immediate: <span class="literal">true</span>,</span><br><span class="line">    deep: <span class="literal">true</span></span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">public</span> likesChanged (): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.table(<span class="keyword">this</span>.likes)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Emit"><a href="#Emit" class="headerlink" title="Emit"></a>Emit</h4><ul><li>父组件接受 <code>Emit</code> 的参数为子组件 <code>return的值</code> + <code>Emit函数自身的参数</code></li><li>使用 <code>import</code> 导入 <code>Emit</code></li><li>在 <code>Emit</code> 装饰器中添加 <code>this.$emit(&#39;xxx&#39;)</code> 的方法，如未添加，使用下面定义的函数A(用<code>-</code>分隔)</li><li>执行完函数 <code>A</code> 后会自动调用 <code>this.$emit(&#39;A&#39;,params)</code> 方法</li><li>在父组件调用 <code>Emit</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./HelloTs.vue: 子组件</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Emit, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'Jane'</span></span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="meta">@Emit</span>(<span class="string">'addToCount'</span>)</span><br><span class="line">  <span class="keyword">public</span> addToCount (x: <span class="built_in">number</span>, y: <span class="built_in">number</span>, z:<span class="built_in">number</span>): <span class="built_in">number</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.table(&#123; x, y, z &#125;)</span><br><span class="line">    <span class="keyword">return</span> x + y + z</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// ./Father.vue: 父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">HelloTs</span> @<span class="attr">addToCount</span>=<span class="string">"addToCount"</span>&gt;</span><span class="tag">&lt;/<span class="name">HelloTs</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">lang</span>=<span class="string">"ts"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> HelloTs <span class="keyword">from</span> <span class="string">'./HelloTs.vue'</span></span></span><br><span class="line"><span class="undefined">  @Component(&#123;</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="undefined">      HelloTs</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> <span class="title">Father</span> <span class="keyword">extends</span> <span class="title">Vue</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">    public addToCount (total: number, <span class="attr">x</span>: number, <span class="attr">y</span>: number, <span class="attr">z</span>:number): <span class="keyword">void</span> &#123;</span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(&#123; total, x, y, z &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生命周期钩子"><a href="#生命周期钩子" class="headerlink" title="生命周期钩子"></a>生命周期钩子</h3><ul><li>直接使用</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> name: <span class="built_in">string</span> = <span class="string">'Jane'</span></span><br><span class="line">  <span class="keyword">public</span> age: <span class="built_in">number</span> = <span class="number">18</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">public</span> mounted () &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'HelloTs mounted ~'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Mixins"><a href="#Mixins" class="headerlink" title="Mixins"></a>Mixins</h3><ul><li><code>Mixins</code> 文件 <code>extends Vue</code></li><li>引入文件 <code>extends Mixins</code></li></ul><h4 id="编写Mixins"><a href="#编写Mixins" class="headerlink" title="编写Mixins"></a>编写Mixins</h4><ul><li>新建 <code>mixin</code> 文件夹</li><li>新建 <code>ProjectMixin.ts</code> 文件，</li><li>添加文件内容，和 <code>.vue</code> 中的 <code>&lt;script&gt;</code> 标签内一样</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/mixin/ProjectMixin.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">class</span> ProjectMixin <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="keyword">public</span> proName: <span class="built_in">string</span> = <span class="string">'My project'</span></span><br><span class="line">  <span class="keyword">public</span> setProjectName (newValue: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.proName = newValue</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'修改成功'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">public</span> showProjectName (): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'proName: '</span>, <span class="keyword">this</span>.proName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ProjectMixin</span><br></pre></td></tr></table></figure><h4 id="引入Mixins"><a href="#引入Mixins" class="headerlink" title="引入Mixins"></a>引入Mixins</h4><ul><li>使用 <code>import</code> 引入 <code>Mixins</code></li><li>引入 <code>Mixins</code> 文件 <code>ProjectMixin.ts</code></li><li>修改继承 <code>extends Vue</code> 为 <code>extends Mixins(ProjectMixin)</code></li><li>调用 <code>ProjectMixin.ts</code> 中的变量和方法</li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/components/HelloTs.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Mixins &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="keyword">import</span> ProjectMixin <span class="keyword">from</span> <span class="string">'@/mixin/ProjectMixin'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> Father <span class="keyword">extends</span> Mixins(ProjectMixin) &#123;</span><br><span class="line">  <span class="keyword">public</span> mounted () &#123;</span><br><span class="line">    <span class="keyword">this</span>.showProjectName()</span><br><span class="line">    <span class="keyword">this</span>.setProjectName(<span class="string">'New Project Name'</span>)</span><br><span class="line">    <span class="keyword">this</span>.showProjectName()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h3><ul><li>在 <code>typescript</code> 中使用 <code>Vuex</code> 需要引入2个包 <code>vuex-module-decorators</code> 和 <code>vuex-class</code></li></ul><h4 id="编写Vuex"><a href="#编写Vuex" class="headerlink" title="编写Vuex"></a>编写Vuex</h4><ul><li>在 <code>store</code> 文件夹下新建 <code>modules</code> 文件夹</li><li>在 <code>modules</code> 文件夹下新建 <code>user.ts</code> 文件</li><li><code>user.ts</code> 文件添加内容</li><li><code>store.index.ts</code> 内引入 <code>user</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/store/modules/user.ts</span></span><br><span class="line"><span class="keyword">import</span> &#123; VuexModule, Module, Mutation, Action &#125; <span class="keyword">from</span> <span class="string">'vuex-module-decorators'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Module</span>(&#123; namespaced: <span class="literal">true</span> &#125;)</span><br><span class="line"><span class="keyword">class</span> User <span class="keyword">extends</span> VuexModule &#123;</span><br><span class="line">  <span class="keyword">public</span> vuexName: <span class="built_in">string</span> = <span class="string">''</span></span><br><span class="line">  <span class="keyword">public</span> vuexValue: <span class="built_in">string</span> = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">get</span> vuexValueUpper (): <span class="built_in">string</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.vuexName.toUpperCase()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Mutation</span></span><br><span class="line">  <span class="keyword">public</span> setName (newName: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.vuexName = newName</span><br><span class="line">    <span class="keyword">this</span>.vuexValue = <span class="string">'vuexValue: '</span> + <span class="keyword">this</span>.vuexName</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Action</span></span><br><span class="line">  <span class="keyword">public</span> updateName (newName: <span class="built_in">string</span>): <span class="built_in">void</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.context.commit(<span class="string">'setName'</span>, newName)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> User</span><br></pre></td></tr></table></figure><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/store/index.ts</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">import</span> User <span class="keyword">from</span> <span class="string">'./modules/user'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  modules: &#123;</span><br><span class="line">    User</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="使用Vuex"><a href="#使用Vuex" class="headerlink" title="使用Vuex"></a>使用Vuex</h4><ul><li>引入 <code>vuex-class</code> 中的 <code>namespace</code></li><li>定义 <code>modules</code> 常量</li><li>定义及调用 <code>Vuex</code></li></ul><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/components/HelloTs.vue</span></span><br><span class="line"><span class="keyword">import</span> &#123; Component, Vue &#125; <span class="keyword">from</span> <span class="string">'vue-property-decorator'</span></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="keyword">namespace</span> &#125; <span class="keyword">from</span> <span class="string">'vuex-class'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> user = <span class="keyword">namespace</span>(<span class="string">'User'</span>)</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">class</span> HelloTs <span class="keyword">extends</span> Vue &#123;</span><br><span class="line">  <span class="meta">@user</span>.State</span><br><span class="line">  <span class="keyword">public</span> vuexName!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@user</span>.Getter(<span class="string">'vuexValueUpper'</span>)</span><br><span class="line">  <span class="keyword">public</span> vUpper!: <span class="built_in">string</span></span><br><span class="line">  <span class="meta">@user</span>.Action</span><br><span class="line">  <span class="keyword">public</span> updateName!: <span class="function">(<span class="params">name: <span class="built_in">string</span></span>) =&gt;</span> <span class="built_in">void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;typescript&lt;/code&gt; 对 &lt;code&gt;vue 2.x&lt;/code&gt; 的支持不是很好，但我们还是有必要学习一下。&lt;/p&gt;&lt;p&gt;本文会列出 &lt;code&gt;vue&lt;/code&gt; 中常用功能在 &lt;code&gt;typescript&lt;/code&gt; 里的写法。&lt;/p&gt;&lt;h3 id=&quot;基于类的组件&quot;&gt;&lt;a href=&quot;#基于类的组件&quot; class=&quot;headerlink&quot; title=&quot;基于类的组件&quot;&gt;&lt;/a&gt;基于类的组件&lt;/h3&gt;&lt;p&gt;单页面是以类的形式使用的，所以用 &lt;code&gt;typescript&lt;/code&gt; 定义 &lt;code&gt;vue&lt;/code&gt; 应使用下面的语法&lt;/p&gt;&lt;ul&gt;&lt;li&gt;在 &lt;code&gt;script&lt;/code&gt; 里添加 &lt;code&gt;lang=&amp;#39;ts&amp;#39;&lt;/code&gt;&lt;/li&gt;&lt;li&gt;在 &lt;code&gt;Component&lt;/code&gt;里定义组件的 &lt;code&gt;name&lt;/code&gt;&lt;/li&gt;&lt;/ul&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://jian2333.github.io/tags/vue/"/>
    
      <category term="typescript" scheme="http://jian2333.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>vue-i18n：vue下的一种多语言方案</title>
    <link href="http://jian2333.github.io/2020/08/26/vue-i18n/"/>
    <id>http://jian2333.github.io/2020/08/26/vue-i18n/</id>
    <published>2020-08-25T23:43:14.000Z</published>
    <updated>2020-08-26T02:18:15.550Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://kazupon.github.io/vue-i18n/zh/" target="_blank" rel="noopener"><code>vue-i18n</code></a> 是 <code>vue</code> 下的一个插件，用于让项目支持国际化多语言。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n --save</span><br></pre></td></tr></table></figure><h3 id="引入vue-i18n"><a href="#引入vue-i18n" class="headerlink" title="引入vue-i18n"></a>引入vue-i18n</h3><ol><li><p>将 <code>vue-i18n</code> 注入到<code>vue</code>中。注入后在任何 <code>vue组件</code> (.vue结尾的文件)内，都可以使用 <code>this.$t(&#39;xxxx&#39;)</code> 来调用。</p></li><li><p>新建 <code>VueI18n</code> 实例。</p><ol><li>新建默认语言。</li><li>新建待翻译语言(json文件)。</li><li>新建 <code>VueI18n</code> 实例时导入上面文件。</li></ol></li><li>新建 <code>Vue</code> 实例时引入 <code>VueI18n</code> 实例。</li></ol><a id="more"></a><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./i18n/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueI18n form <span class="string">'vue-i18n'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'en'</span> <span class="keyword">from</span> <span class="string">'./i18n/locales/en.json'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zh'</span> <span class="keyword">from</span> <span class="string">'./i18n/locales/zh.json'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_LANG = <span class="string">'zh'</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  en,</span><br><span class="line">  zh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: DEFAULT_LANG,</span><br><span class="line">  messages: messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">'./i18n'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><a href="https://kazupon.github.io/vue-i18n/zh/" target="_blank" rel="noopener">官方文档</a>有详情的介绍，本文只介绍常用的几种使用方法。</p><h4 id="json编写"><a href="#json编写" class="headerlink" title="json编写"></a>json编写</h4><ul><li><p>使用 <code>{}</code> 设置变量</p></li><li><p>使用 <code>@xx:yy:zz</code> 引用 <code>json</code> 中<strong>已存在的变量</strong></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    hello: 'hello &#123; name &#125;, nice to meet you ~',</span><br><span class="line">  &#125;,</span><br><span class="line">  en1: &#123;</span><br><span class="line">    alsoHello: '@:en.hello' // 和en.hello一样，也要传入变量 &#123; name:xx &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li><p><code>vue</code>实例中：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;$t('en.hello')&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue中的 &lt;script&gt;内</span></span><br><span class="line">hello () &#123;</span><br><span class="line">  <span class="keyword">let</span> hello = <span class="keyword">this</span>.$t(<span class="string">'en.hello'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(hello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>非vue</code> 实例中(比如<code>js文件</code>)：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意没有$符号</span></span><br><span class="line"><span class="comment">// ./demo.js</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">'./i18n'</span></span><br><span class="line"></span><br><span class="line">hello () &#123;</span><br><span class="line">  <span class="keyword">let</span> hello = i18n.t(<span class="string">'en.hello'</span>)</span><br><span class="line">  <span class="built_in">console</span>.log(hello)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><h5 id="常规翻译"><a href="#常规翻译" class="headerlink" title="常规翻译"></a>常规翻译</h5><ul><li><p>直接使用即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// en.json</span></span><br><span class="line">&#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    hello: <span class="string">'hello world'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.vue</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="keyword">this</span>.$t(<span class="string">'hello'</span>)</span><br></pre></td></tr></table></figure></li></ul><h5 id="带变量的翻译"><a href="#带变量的翻译" class="headerlink" title="带变量的翻译"></a>带变量的翻译</h5><ul><li><p>使用 <code>{}</code> 设置变量。</p></li><li><p>使用 <code>Object</code>、<code>Array</code> 等传入变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ---------- 对象</span></span><br><span class="line"><span class="comment">// en.json</span></span><br><span class="line">&#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    hello: <span class="string">'hello &#123; name &#125;, nice to meet you ~'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.vue</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="keyword">this</span>.$t(<span class="string">'en.hello'</span>, &#123; <span class="attr">name</span>: <span class="string">'Jack'</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// ---------- 数组</span></span><br><span class="line"><span class="comment">// en.json</span></span><br><span class="line">&#123;</span><br><span class="line">  en: &#123;</span><br><span class="line">    hello: <span class="string">'hello &#123; 0 &#125;, nice to meet &#123; 1 &#125; ~'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// hello.vue</span></span><br><span class="line"><span class="keyword">let</span> hello = <span class="keyword">this</span>.$t(<span class="string">'en.hello'</span>, [<span class="string">'Jack'</span>, <span class="string">'you'</span>])</span><br></pre></td></tr></table></figure></li></ul><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><h4 id="调用方式"><a href="#调用方式" class="headerlink" title="调用方式"></a>调用方式</h4><p>我们发现，在 <code>vue</code> 组件中是通过 <code>this.$t(&#39;xxx&#39;)</code> 来调用，在 <code>非vue</code> 组件中是通过引入 <code>i18n</code> ，然后 <code>i18n.t(&#39;xxx&#39;)</code> 来调用。</p><p>那每次调用的时候，我们得区分<strong>是否是 <code>vue</code> 组件</strong>， 然后<strong>重复、多次引入 <code>i18n</code> </strong>。</p><p>这明显增加了代码的复杂性。有个直接的解决方法就是，把 <code>i18n</code> 挂载到全局的 <code>windows</code> 下，之后在任何地方都可以通过 <code>i18n.t()</code> 来调用了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./i18n/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueI18n form <span class="string">'vue-i18n'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'en'</span> <span class="keyword">from</span> <span class="string">'./i18n/locales/en.json'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zh'</span> <span class="keyword">from</span> <span class="string">'./i18n/locales/zh.json'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_LANG = <span class="string">'zh'</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  en,</span><br><span class="line">  zh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: DEFAULT_LANG,</span><br><span class="line">  messages: messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.i18n = i18n <span class="comment">// +++++</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br><span class="line"></span><br><span class="line">----------------------------</span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">'./i18n'</span></span><br><span class="line"><span class="comment">// 其他 import 文件 +++++</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  i18n</span><br><span class="line">&#125;).$mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h4 id="添加修改语言方法"><a href="#添加修改语言方法" class="headerlink" title="添加修改语言方法"></a>添加修改语言方法</h4><p>我们在 <code>i18n</code> 里添加一个修改语言的方法。</p><ul><li>该函数做了以下3件事情。</li><li>将当前语言保存到 <code>localStorage</code> 中；</li><li>给 <code>body</code> 添加语种相关的 <code>class</code>，优化样式时使用。</li><li>将当前语种存到 <code>Vue</code> 的全局配置中，以便未来使用。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ./i18n/index.js</span></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueI18n form <span class="string">'vue-i18n'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'en'</span> <span class="keyword">from</span> <span class="string">'./i18n/locales/en.json'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'zh'</span> <span class="keyword">from</span> <span class="string">'./i18n/locales/zh.json'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueI18n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> DEFAULT_LANG = <span class="string">'zh'</span></span><br><span class="line"><span class="keyword">const</span> messages = &#123;</span><br><span class="line">  en,</span><br><span class="line">  zh</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = <span class="keyword">new</span> VueI18n(&#123;</span><br><span class="line">  locale: DEFAULT_LANG,</span><br><span class="line">  messages: messages</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改语言的函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> setup = <span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!lang) &#123;</span><br><span class="line">    lang = <span class="built_in">window</span>.localStorage.getItem(LOCALE_KEY)</span><br><span class="line">    <span class="keyword">if</span> (!messages[lang]) &#123;</span><br><span class="line">      lang = DEFAULT_LANG</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">window</span>.localStorage.setItem(LOCALE_KEY, lang)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">Object</span>.keys(messages).forEach(<span class="function"><span class="params">lang</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">document</span>.body.classList.remove(<span class="string">`lang-<span class="subst">$&#123;lang&#125;</span>`</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="built_in">document</span>.body.classList.add(<span class="string">`lang-<span class="subst">$&#123;lang&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">document</span>.body.setAttribute(<span class="string">'lang'</span>, lang)</span><br><span class="line"></span><br><span class="line">  Vue.config.lang = lang</span><br><span class="line">  i18n.locale = lang</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.i18n = i18n </span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure><h4 id="热加载-待验证"><a href="#热加载-待验证" class="headerlink" title="热加载(待验证)"></a>热加载(待验证)</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line">  <span class="built_in">module</span>.hot.accept([<span class="string">'./i18n/locales/en'</span>, <span class="string">'./i18n/locales/zh'</span>], <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    i18n.setLocaleMessage(<span class="string">'en'</span>, <span class="built_in">require</span>(<span class="string">'./i18n/locales/en'</span>).default)</span><br><span class="line">    i18n.setLocaleMessage(<span class="string">'zh'</span>, <span class="built_in">require</span>(<span class="string">'./i18n/locales/zh'</span>).default)</span><br><span class="line">    <span class="comment">// 同样可以通过 $i18n 属性进行热更新</span></span><br><span class="line">    <span class="comment">// app.$i18n.setLocaleMessage('en', require('./i18n/locales/en').default)</span></span><br><span class="line">    <span class="comment">// app.$i18n.setLocaleMessage('ja', require('../i18n/locales/zh').default)</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://kazupon.github.io/vue-i18n/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;code&gt;vue-i18n&lt;/code&gt;&lt;/a&gt; 是 &lt;code&gt;vue&lt;/code&gt; 下的一个插件，用于让项目支持国际化多语言。&lt;/p&gt;&lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm install vue-i18n --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&quot;引入vue-i18n&quot;&gt;&lt;a href=&quot;#引入vue-i18n&quot; class=&quot;headerlink&quot; title=&quot;引入vue-i18n&quot;&gt;&lt;/a&gt;引入vue-i18n&lt;/h3&gt;&lt;ol&gt;&lt;li&gt;&lt;p&gt;将 &lt;code&gt;vue-i18n&lt;/code&gt; 注入到&lt;code&gt;vue&lt;/code&gt;中。注入后在任何 &lt;code&gt;vue组件&lt;/code&gt; (.vue结尾的文件)内，都可以使用 &lt;code&gt;this.$t(&amp;#39;xxxx&amp;#39;)&lt;/code&gt; 来调用。&lt;/p&gt;&lt;/li&gt;&lt;li&gt;&lt;p&gt;新建 &lt;code&gt;VueI18n&lt;/code&gt; 实例。&lt;/p&gt;&lt;ol&gt;&lt;li&gt;新建默认语言。&lt;/li&gt;&lt;li&gt;新建待翻译语言(json文件)。&lt;/li&gt;&lt;li&gt;新建 &lt;code&gt;VueI18n&lt;/code&gt; 实例时导入上面文件。&lt;/li&gt;&lt;/ol&gt;&lt;/li&gt;&lt;li&gt;新建 &lt;code&gt;Vue&lt;/code&gt; 实例时引入 &lt;code&gt;VueI18n&lt;/code&gt; 实例。&lt;/li&gt;&lt;/ol&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://jian2333.github.io/tags/vue/"/>
    
      <category term="多语言" scheme="http://jian2333.github.io/tags/%E5%A4%9A%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>Vue Router</title>
    <link href="http://jian2333.github.io/2020/06/29/vue-router/"/>
    <id>http://jian2333.github.io/2020/06/29/vue-router/</id>
    <published>2020-06-29T02:57:05.000Z</published>
    <updated>2020-06-29T07:24:24.541Z</updated>
    
    <content type="html"><![CDATA[<p>断断续续看了好多遍 <code>Vue Router</code> 的<a href="https://router.vuejs.org/zh/" target="_blank" rel="noopener">官方文档</a>，终于下定决心来写一篇笔记了…..</p><p><img src="/images/vr-1.jpg" alt></p><p>OK，开始正题</p><a id="more"></a><p>完整介绍的话内容太多，本文主要介绍工作中较常用到的几个知识点</p><h3 id="router-route"><a href="#router-route" class="headerlink" title="router/route"></a>router/route</h3><h4 id="router"><a href="#router" class="headerlink" title="router"></a>router</h4><p><code>Vue Router</code> 对象，包含了 <code>Vue Router</code> 的一些属性和方法</p><p><strong>Vue Router 属性</strong></p><ul><li>router.app: 配置了 <code>router</code> 的Vue根实例。</li><li>router.mode: 路由使用的<a href="https://router.vuejs.org/zh/api/#mode" target="_blank" rel="noopener">模式</a>。</li><li>router.currentRoute: 当前激活的路由实例，同 <code>this.$route</code>。</li></ul><p><strong>Vue Router 方法</strong></p><ul><li>router.beforeEach: 全局前置守卫，必须调用 <code>next()</code> 方法。</li><li>router.beforeResolve: 全局解析守卫，必须调用 <code>next()</code> 方法。</li><li>router.afterEach: 全局后置钩子，无 <code>next()</code> 方法。</li><li>router.push: 打开一个新路由/页面，<strong>会</strong>在浏览器添加历史记录。</li><li>router.replace: 打开/替换为一个新路由/页面，<strong>不会</strong>在浏览器添加历史记录。</li><li>router.go: 前进 <code>n</code> 个页面，<code>n</code> 可为负数。</li><li>router.back: 等同于 <code>router.go(-1)</code>。</li><li>router.forward: 等同于 <code>router.go(1)</code>。</li><li>router.getMatchedComponents: 返回目标位置或是当前路由匹配的组件数组(是组件的定义/构造类，不是实例)，一般用于<strong>服务端渲染</strong>的数据预加载使用。</li><li>router.resolve: 解析目标位置。</li><li>router.addRoutes: 动态添加更多的路由规则。</li><li>router.onReady: 把一个回调排队。</li><li>router.onError: 注册一个回调，该回调在路由导航过程中出错时被调用。</li></ul><h4 id="route"><a href="#route" class="headerlink" title="route"></a>route</h4><p>当前激活的路由实例，所有属性<strong>只读</strong></p><ul><li>$route.path: 当前路由的<strong>绝对</strong>路径。</li><li>$route.params: 当前路由上 <code>key/value对象</code> 参数。</li><li>$route.query: 当前对象的 <code>URL</code> 上的 <code>key/value对象</code> 参数，会显示在浏览器地址栏上。</li><li>$route.hash: 当前路由的 <code>hash</code> 值(带 <code>#</code>)。</li><li>$route.fullPath: 完成解析后的 <code>URL</code>，包含查询参数和 <code>hash</code> 的完整路径。</li><li>$route.matched: 一个匹配路由的数组。从根路由开始到当前所在路由的所有嵌套路径片段组成的数组。</li><li>$route.name: 当前路由的 <code>name</code>。</li><li>$route.redirectedFrom: 重定向来源的路由的名字。</li></ul><h4 id="组件注入"><a href="#组件注入" class="headerlink" title="组件注入"></a>组件注入</h4><p>通过在 Vue 根实例的 <code>router</code> 配置传入 router 实例，下面这些属性成员会被注入到每个子组件。</p><ul><li><strong>this.$router</strong> : <code>router</code> 实例。</li><li><strong>this.$route</strong> : 当前激活的路由实例，所有属性<strong>只读</strong>。</li></ul><h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><h4 id="全局导航守卫"><a href="#全局导航守卫" class="headerlink" title="全局导航守卫"></a>全局导航守卫</h4><ul><li>beforeEach: 全局前置守卫，导航前，一定要调用 <code>next()</code> 来 <code>resolve</code> 这个钩子。</li><li>beforeResolve: 全局解析守卫，导航前，和 <code>beforeEach</code> 类似，区别是导航在确认前，<strong>同时在所有组件内守卫和异步路由组件解析之后</strong>，解析守卫才会被调用。</li><li>afterEach: 全局后置钩子，导航后，无 <code>next()</code> 方法也不会改变导航本身(可添加页面定位等功能)。</li></ul><h4 id="路由独享的守卫"><a href="#路由独享的守卫" class="headerlink" title="路由独享的守卫"></a>路由独享的守卫</h4><ul><li>beforeEnter: 路由独享守卫，配置在路由上的守卫，<strong>该路由及其子路由</strong>都会共享该守卫。</li></ul><h4 id="组件内守卫"><a href="#组件内守卫" class="headerlink" title="组件内守卫"></a>组件内守卫</h4><ul><li><p>beforeRouteEnter: 渲染该组件对应的路由被 <code>confirm</code> 前调用，<strong>不能</strong>获取 <code>this</code>，但可通过传回调(唯一一个可以传回调给 <code>next</code> 的守卫)给 <code>next()</code> 来访问组件实例。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">beforeRouteEnter (to, <span class="keyword">from</span>, next) =&gt; &#123;</span><br><span class="line">  next(<span class="function"><span class="params">vm</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 通过 `vm` 访问组件实例</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>beforeRouteUpdate: 路由改变，但是该组件被复用时调用。</p></li><li><p>beforeRouteLeave: 导航离开该组件的对应路由时调用。</p></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Foo = &#123;</span><br><span class="line">  template: <span class="string">`...`</span>,</span><br><span class="line">  beforeRouteEnter (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在渲染该组件的对应路由被 confirm 前调用</span></span><br><span class="line">    <span class="comment">// 不！能！获取组件实例 `this`</span></span><br><span class="line">    <span class="comment">// 因为当守卫执行前，组件实例还没被创建</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteUpdate (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 在当前路由改变，但是该组件被复用时调用</span></span><br><span class="line">    <span class="comment">// 举例来说，对于一个带有动态参数的路径 /foo/:id，在 /foo/1 和 /foo/2 之间跳转的时候，</span></span><br><span class="line">    <span class="comment">// 由于会渲染同样的 Foo 组件，因此组件实例会被复用。而这个钩子就会在这个情况下被调用。</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;,</span><br><span class="line">  beforeRouteLeave (to, <span class="keyword">from</span>, next) &#123;</span><br><span class="line">    <span class="comment">// 导航离开该组件的对应路由时调用</span></span><br><span class="line">    <span class="comment">// 可以访问组件实例 `this`</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="完整的导航解析流程"><a href="#完整的导航解析流程" class="headerlink" title="完整的导航解析流程"></a>完整的导航解析流程</h4><ol><li>导航被触发。</li><li>在失活的组件里调用 <code>beforeRouteLeave</code> 守卫。</li><li>调用全局的 <code>beforeEach</code> 守卫。</li><li>在重用的组件里调用 <code>beforeRouteUpdate</code> 守卫（2.2+）。</li><li>在路由配置里调用 <code>beforeEnter</code> 。</li><li>解析异步路由组件。</li><li>在被激活的组件里调用 <code>beforeRouteEnter</code> 。</li><li>调用全局的 <code>beforeResolve</code> 守卫（2.5+）。</li><li>导航被确认。</li><li>调用全局的 <code>afterEach</code> 钩子。</li><li>触发 <code>DOM</code> 更新。</li><li>用创建好的实例调用 <code>beforeRouteEnter</code> 守卫传递给 <code>next</code> 的回调函数。</li></ol><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p><strong>falsy/falsey(虚值)</strong></p><ul><li>在 <code>Boolean</code> 上下文中认定为 <code>false</code> 的值。</li><li><code>Javascript</code> 在需要用到 <code>Boolean</code> 类型的值的上下文中使用强制类型转换将值转换为 <code>Boolean</code> 值，比如条件语句和循环中。</li><li>目前 <code>Js</code> 中只有7个 <code>falsy</code> 值：<ul><li><code>false</code>、<code>0</code>、<code>0n</code>、<code>&quot;&quot;/&#39;&#39;/</code>、``、 <code>null</code>、<code>undefined</code>、<code>NaN</code></li></ul></li></ul><p><strong>滚动行为</strong></p><ul><li><code>scrollBehavior(to, from, savedPosition)</code>: 添加在路由实例 <code>new Router({})</code> 中，用于自定义切换时页面如何滚动。</li><li>该功能只在支持 <code>history.pushState</code> 的浏览器中可用。</li><li><code>keep-alive</code> 中无效，因为 <code>keep-alive</code> 已自动保留了之前的状态。</li><li>返回滚动的位置信息：<ul><li><code>{ x: number, y: number }</code> : 具体位置。</li><li><code>{ selector: string, offset? : { x: number, y: number }}</code> : 锚点+偏移量</li></ul></li><li><a href="https://router.vuejs.org/zh/guide/advanced/scroll-behavior.html" target="_blank" rel="noopener">更多参考</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;断断续续看了好多遍 &lt;code&gt;Vue Router&lt;/code&gt; 的&lt;a href=&quot;https://router.vuejs.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官方文档&lt;/a&gt;，终于下定决心来写一篇笔记了…..&lt;/p&gt;&lt;p&gt;&lt;img src=&quot;/images/vr-1.jpg&quot; alt&gt;&lt;/p&gt;&lt;p&gt;OK，开始正题&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://jian2333.github.io/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>eslint &amp;&amp; babel</title>
    <link href="http://jian2333.github.io/2020/06/24/eslint-and-babel/"/>
    <id>http://jian2333.github.io/2020/06/24/eslint-and-babel/</id>
    <published>2020-06-24T06:28:22.000Z</published>
    <updated>2020-06-24T07:07:06.631Z</updated>
    
    <content type="html"><![CDATA[<p>关于<code>eslint</code>和<code>babel</code>的一点理解：</p><p><code>eslint</code>: 代码语法校验，主要是语法的使用是否正确，附带也可以格式化代码风格。</p><p><code>babel</code>: 转义代码，将浏览器不支持的新语法，转义成浏览器支持的语法。所以使用<code>babel</code>，我们就可以 <strong>毫无顾忌</strong> 的使用新语法了。</p><p>但有时候吧，<code>eslint</code> 校验新语法时识别不了，就会报错了，这时候<code>babel-eslint</code>就登场了。</p><p><code>babel-eslint</code>: 将<code>eslint</code>无法识别的新语法转义成<code>eslint</code>可以识别的语法，进而通过<code>eslint</code>校验。<code>babel-eslint</code>需搭配<code>eslint</code>一起使用。</p><p>题外话：</p><ul><li><code>babel</code>有多种引入方式，最新的推荐方式是 <strong>按需转义</strong></li><li>格式化(统一)代码风格，还可以使用以下2种方式。主要是改变代码的显示风格，并不会对代码的<code>语法规则</code>做校验：<ul><li><code>.editorconfig</code>: 本地配置文件，一般用于<code>换行、缩进等</code>。</li><li><code>.prettierrc</code>：当前主流的方法。所有规则<code>基本都可配置</code>。搭配 <code>webstorm file watch</code> 可实现 <strong>保存时自动格式化/提交代码时自动格式化</strong></li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于&lt;code&gt;eslint&lt;/code&gt;和&lt;code&gt;babel&lt;/code&gt;的一点理解：&lt;/p&gt;&lt;p&gt;&lt;code&gt;eslint&lt;/code&gt;: 代码语法校验，主要是语法的使用是否正确，附带也可以格式化代码风格。&lt;/p&gt;&lt;p&gt;&lt;code&gt;babel&lt;/code&gt;: 转义代
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一种新的科学上网方式 -- v2ray</title>
    <link href="http://jian2333.github.io/2020/01/05/v2ray/"/>
    <id>http://jian2333.github.io/2020/01/05/v2ray/</id>
    <published>2020-01-05T10:23:55.000Z</published>
    <updated>2020-08-09T04:36:51.988Z</updated>
    
    <content type="html"><![CDATA[<p>由于某些众所周知的原因，emmmmm….，不久前的血色十月，一大波梯子被封了。毫无意外，我的 <code>ss</code> 也被封了，而且从那之后，<code>ss</code> 就变得不好用了，速度慢，还经常上不了网。</p><p>然后吧，研究了下目前比较主流的方式 <code>v2ray</code> ，包括 <code>搭建方式</code> 、<code>速度优化</code>、<code>ip伪装防封</code> 等，发现 <code>v2ray : ws + tls + nginx + cdn</code> 的方式速度和伪装性都很好。</p><p>再然后吧，今天就总结一下这个好了…..</p><a id="more"></a><p>本文主要总结了以下几个方面：</p><ul><li><a href="#最终总结及推荐">最终总结及推荐</a></li><li><a href="#名词解释">名词解释</a></li><li><a href="#具体搭建流程">具体搭建流程</a></li><li><a href="#效果">效果</a></li><li><a href="#相关资料介绍">相关资料介绍</a></li></ul><h3 id="最终总结及推荐"><a href="#最终总结及推荐" class="headerlink" title="最终总结及推荐"></a>最终总结及推荐</h3><p>根据实际测试下来的结果，最终推荐 <strong>google云香港服务器+ws+tls+nginx+伪装主页+bbr</strong> 这种配置。不推荐使用 <code>cdn</code> 。因为免费的 <code>cdn</code> 虽然能隐藏真实<code>ip</code>，但是会 <strong>大大降低网络速度</strong>，再加上 <code>ws+tls+nginx+伪装主页</code>，已经能达到很好的欺骗 <code>GFW</code> 的效果了，而收费的 <code>cdn</code> 虽然效果好，但是<strong>太贵了</strong>！所以不推荐使用 <code>cdn</code>。</p><h4 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h4><ul><li>速度最快的供应商是 <a href="https://cloud.google.com/" target="_blank" rel="noopener"><code>google云</code></a>，其次是 <a href="https://bandwagonhost.com/" target="_blank" rel="noopener"><code>搬瓦工</code></a>，最后是 <a href="https://www.vultr.com/" target="_blank" rel="noopener"><code>vultr</code></a>。</li><li>香港服务器最快(<code>vultr</code>没有香港服务器)。</li><li><code>搬瓦工</code> 服务器速度：香港服务器 &gt; CN2 GIA-E = CN2 GIA &gt; KVM = vultr 。</li></ul><h4 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h4><ul><li><code>mkcp</code> 协议搭建简单，但是速度不够快，伪装还行，但在有些场合连接不稳定(比如 <strong>在公司网络 ，我就经常连不上…..</strong> )。</li><li><code>ws+tls</code> 协议搭建复杂一下，需要有域名，但是速度快，而且稳定，<strong>在公司网络，一样稳如老狗！！</strong></li><li><code>ws+tls+nginx+cdn</code> 伪装性更好，但是更复杂，需要懂一些<code>nginx</code>的相关配置，还要会<code>cdn</code>代理伪装。不过不推荐 <code>cdn</code> 代理。原因之前说到了：<ul><li>免费的 <strong>大大降低网速</strong>，收费的太贵。(免费的<code>cloudflare</code>服务器在美国，<code>ping</code> 变成200+， 直连<code>google云香港服务器</code> <code>ping</code> 才20+，速度差10倍)。</li><li><code>ws+tls+nginx+主页伪装</code> 已经能很好的伪装了，能 <strong>很好的骗过 <code>GFW</code> 了</strong> 。</li></ul></li><li>所以推荐的是 <code>ws+tls+nginx+伪装主页</code>。</li></ul><h4 id="bbr加速"><a href="#bbr加速" class="headerlink" title="bbr加速"></a>bbr加速</h4><ul><li><code>bbr</code> 是 <code>google</code> 的一种算法加速，对速度 <strong>影响极大</strong>，<strong>强烈推荐开启</strong>。</li><li>就个人测试而言，同样配置 <code>youtube 4K 60fps</code> 下，未开启 <code>bbr</code> 速度为 <code>20k Kbps</code>，开启 <code>bbr</code> 后为 <code>150k Kbps</code>，<strong>速度相差极大</strong>。</li><li><del>直接使用一键安装脚本里的命令开启即可，选择 <code>bbrPlus版本</code>，即 <code>11-2-7</code></del> (2020.08.08更新)一键脚本的<code>bbr安装启动</code>命令已经失效，请使用下方新命令。</li></ul><h3 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h3><p><strong>一键安装脚本</strong></p><p>一键安装 <code>v2ray+ws+tls+nginx+https证书+https证书定时续签</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh) | tee v2ray_ins.log</span><br></pre></td></tr></table></figure><p>相关路径：</p><ul><li>Web 目录：<code>/home/wwwroot/3DCEList</code></li><li>V2ray 服务端配置：<code>/etc/v2ray/config.json</code></li><li>V2ray 客户端配置: <code>~/v2ray_info.txt</code></li><li>Nginx 目录： <code>/etc/nginx</code></li><li>证书文件: <code>/data/v2ray.key 和 /data/v2ray.crt</code></li></ul><p><strong>cdn</strong></p><p>用来 <code>伪装真实ip</code>，还有防 <code>DDOS流量攻击</code> 等其他功能。</p><p><strong>cloudflare</strong></p><p>一个<strong>免费</strong>配置 <code>cdn</code> 的<a href="https://www.cloudflare.com/" target="_blank" rel="noopener">网站</a>，但是不推荐使用，原因前面有说到，会 <strong>大大降低网络速度</strong>。</p><p><strong>ws</strong></p><p><code>websocket</code> ，一种协议。需要有域名。把翻墙流量伪装成正常访问配置域名的流量。</p><p><strong>tls</strong></p><p>一种加密协议，需要使用域名。一般配合 <code>ws</code> 使用。</p><p><strong>nginx</strong>(非必须)</p><p>服务器配置 <code>web网站</code> 使用，配置一个 <code>.html</code> 文件 <code>伪装成静态网站</code>。</p><p><strong>https证书</strong>(非必须)</p><p>给伪装的 <code>web</code> 网站添加证书，让网站更真实。证书有效期3个月，<code>一键安装脚本</code> 会自动 <code>申请，下载证书</code>，并添加 <code>证书自动续签任务</code>，<strong>但是，需要自己修改nginx配置，选择证书路径！！</strong></p><p><strong>bbr一键安装脚本</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span></span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure><h3 id="具体搭建流程"><a href="#具体搭建流程" class="headerlink" title="具体搭建流程"></a>具体搭建流程</h3><h4 id="申请域名"><a href="#申请域名" class="headerlink" title="申请域名"></a>申请域名</h4><p>可以在 <a href="https://www.freenom.com/" target="_blank" rel="noopener">freenom</a> 申请免费的域名。不过这个网站注册比较麻烦…..</p><p>也可以在 <a href="https://cn.aliyun.com/" target="_blank" rel="noopener">阿里云</a>，<a href="https://cloud.tencent.com/" target="_blank" rel="noopener">腾讯云</a> 等注册，都可以。</p><h4 id="配置cdn"><a href="#配置cdn" class="headerlink" title="配置cdn"></a>配置cdn</h4><p>免费的话可以在 <a href="https://www.cloudflare.com/" target="_blank" rel="noopener">cloudflare</a> 配置 cdn。</p><ul><li>配置时，代理 <code>Proxy status</code> 记得点成灰色，在 <code>bbr</code> 安装完成后，在决定点亮。</li><li>点亮不点亮都可以使用，点亮即使用代理，伪装了真实ip，但速度会慢很多，不点亮即直连。</li><li>配置好后，需要在 <code>域名管理</code> 的地方(比例如<code>阿里云-&gt;域名-&gt;管理-&gt;cdn</code>)，将 <code>dns</code> 的2个地址添加上去。</li></ul><h4 id="创建vm实例"><a href="#创建vm实例" class="headerlink" title="创建vm实例"></a>创建vm实例</h4><p>使用主机供应商添加 <code>vm实例</code>即可，推荐 <code>google云</code>， 速度最快。</p><p>以下以 <code>google</code> 为标准：</p><p>创建 <code>vm</code> 实例</p><ul><li>选择 <code>香港+N1+f1-micro+勾选http、https+网络标记rz,cz</code></li><li>编辑防火墙规则 <code>rz</code> ：<code>方向：入站；目标：网络中的实例；来源过滤条件：IP地址范围；来源IP地址范围：0.0.0.0/0</code></li><li>编辑防火墙规则 <code>cz</code>：<code>方向：出站；目标：网络中的实例；来源过滤条件：IP地址范围；来源IP地址范围：0.0.0.0/0</code></li></ul><h4 id="一键脚本安装"><a href="#一键脚本安装" class="headerlink" title="一键脚本安装"></a>一键脚本安装</h4><p>在 <code>google云 vm实例</code> 页面，点击 <code>SSH</code> 链接：</p><ul><li><p>输入 <code>sudo -i</code> 获取 <code>root</code> 权限；</p></li><li><p>输入一键安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh) | tee v2ray_ins.log</span><br></pre></td></tr></table></figure></li><li><p>按要求输入域名，等待脚本执行完成即可。</p></li></ul><h4 id="修改nginx配置文件-非必须"><a href="#修改nginx配置文件-非必须" class="headerlink" title="修改nginx配置文件(非必须)"></a>修改nginx配置文件(非必须)</h4><p><strong>添加 <code>nginx</code> 命令到环境变量</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> PATH=<span class="variable">$PATH</span>:/etc/nginx/sbin &gt;&gt; /etc/profile</span><br><span class="line"><span class="built_in">source</span> /etc/profile</span><br></pre></td></tr></table></figure><p><strong>下载并修改nginx配置文件</strong></p><p>窗口右上角下载，下载后编辑，主要修改 <code>域名、端口号、/ptah、https证书路径</code></p><p>可以参考下面的配置</p><p>该配置做了以下几件事：</p><ul><li>重定向 <code>http(80端口)</code> 到 <code>https(443端口)</code>。</li><li>重定向 <code>/path</code> 或 <code>websocket</code> 协议到 <code>23188</code> 端口，<code>v2ray ws</code> 协议用。</li><li>修改 <code>https证书路径</code>。</li><li>修改 <code>域名、端口号</code>。</li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="attribute">user</span>  root;</span><br><span class="line"><span class="attribute">worker_processes</span>  <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#error_log  logs/error.log;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="comment">#error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">events</span> &#123;</span><br><span class="line">    <span class="attribute">worker_connections</span>  <span class="number">4096</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="section">http</span> &#123;</span><br><span class="line">    <span class="attribute">include</span>       mime.types;</span><br><span class="line">    <span class="attribute">default_type</span>  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span></span><br><span class="line">    <span class="comment">#                  '$status $body_bytes_sent "$http_referer" '</span></span><br><span class="line">    <span class="comment">#                  '"$http_user_agent" "$http_x_forwarded_for"';</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#access_log  logs/access.log  main;</span></span><br><span class="line"></span><br><span class="line">    <span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#keepalive_timeout  0;</span></span><br><span class="line">    <span class="attribute">keepalive_timeout</span>  <span class="number">65</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  kxsw.jianwill.cn;</span><br><span class="line">        <span class="attribute">return</span> <span class="number">301</span> https://kxsw.jianwill.cn:443;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#charset koi8-r;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#access_log  logs/host.access.log  main;</span></span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span>   /home/wwwroot/3DCEList;</span><br><span class="line">            <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">#error_page  404              /404.html;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># redirect server error pages to the static page /50x.html</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="attribute">error_page</span>   <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span>  /50x.html;</span><br><span class="line">        <span class="attribute">location</span> = /50x.html &#123;</span><br><span class="line">            <span class="attribute">root</span>   html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    proxy_pass   http://127.0.0.1;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ \.php$ &#123;</span></span><br><span class="line">        <span class="comment">#    root           html;</span></span><br><span class="line">        <span class="comment">#    fastcgi_pass   127.0.0.1:9000;</span></span><br><span class="line">        <span class="comment">#    fastcgi_index  index.php;</span></span><br><span class="line">        <span class="comment">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span></span><br><span class="line">        <span class="comment">#    include        fastcgi_params;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># deny access to .htaccess files, if Apache's document root</span></span><br><span class="line">        <span class="comment"># concurs with nginx's one</span></span><br><span class="line">        <span class="comment">#</span></span><br><span class="line">        <span class="comment">#location ~ /\.ht &#123;</span></span><br><span class="line">        <span class="comment">#    deny  all;</span></span><br><span class="line">        <span class="comment">#&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># another virtual host using mix of IP-, name-, and port-based configuration</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="comment">#server &#123;</span></span><br><span class="line">    <span class="comment">#    listen       8000;</span></span><br><span class="line">    <span class="comment">#    listen       somename:8080;</span></span><br><span class="line">    <span class="comment">#    server_name  somename  alias  another.alias;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#    location / &#123;</span></span><br><span class="line">    <span class="comment">#        root   html;</span></span><br><span class="line">    <span class="comment">#        index  index.html index.htm;</span></span><br><span class="line">    <span class="comment">#    &#125;</span></span><br><span class="line">    <span class="comment">#&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># HTTPS server</span></span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    <span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span>       <span class="number">443</span> ssl http2;</span><br><span class="line">        <span class="attribute">server_name</span>  kxsw.jianwill.cn;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_certificate</span>      /data/v2ray.crt;</span><br><span class="line">        <span class="attribute">ssl_certificate_key</span>  /data/v2ray.key;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_session_cache</span>    shared:SSL:<span class="number">1m</span>;</span><br><span class="line">        <span class="attribute">ssl_session_timeout</span>  <span class="number">5m</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">ssl_ciphers</span>  HIGH:!aNULL:!MD5;</span><br><span class="line">        <span class="attribute">ssl_prefer_server_ciphers</span>  <span class="literal">on</span>;</span><br><span class="line">        <span class="attribute">ssl_protocols</span> TLSv1 TLSv1.<span class="number">1</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">root</span> /home/wwwroot/3DCEList;</span><br><span class="line">            <span class="attribute">index</span> index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="attribute">location</span> /8fded3d7/ &#123;</span><br><span class="line">            <span class="attribute">proxy_redirect</span> <span class="literal">off</span>;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:23188;</span><br><span class="line">            <span class="attribute">proxy_http_version</span> <span class="number">1</span>.<span class="number">1</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Connection <span class="string">"upgrade"</span>;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> Host <span class="variable">$http_host</span>;</span><br><span class="line">            <span class="attribute">proxy_intercept_errors</span> <span class="literal">on</span>;</span><br><span class="line">            <span class="attribute">if</span> (<span class="variable">$http_upgrade</span> = <span class="string">"websocket"</span> )&#123;</span><br><span class="line">               <span class="attribute">proxy_pass</span> http://127.0.0.1:23188;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">include</span> conf.d/<span class="regexp">*.conf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>上传nginx.conf配置文件</strong><br>窗口右上角，上传文件，上传后到文件默认在 <code>/home/google用户名/</code> 路径下，比如我的是 <code>/home/jian23333/</code></p><p><strong>拷贝nginx.conf到nginx配置目录</strong></p><p><code>nginx</code> 配置文件路径是 <code>/etc/nginx/conf/</code></p><p>所以，执行下面的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/jian23333/</span><br><span class="line">cp nginx.conf /etc/nginx/conf/</span><br><span class="line">// 默认会直接覆盖</span><br></pre></td></tr></table></figure><p>PS： 如果上传的时候，已经存在 <code>nginx.conf</code>，上传的文件会被命名为 <code>nginx_(n).conf</code>，后面执行命令的时候 <code>(</code> 这个符号可能会识别报错，这时可以删掉原来的所有 <code>nginx_(n).conf</code> 文件，重新上传，就命名成 <code>nginx.conf</code> 文件了。</p><p>删除命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/jian23333/</span><br><span class="line">rm *.conf</span><br></pre></td></tr></table></figure><p><strong>校验并重新启动nginx</strong></p><ul><li>校验：<code>nginx -t</code></li></ul><ul><li>重新启动：<code>nginx -s reload</code></li></ul><ul><li>查看nginx是否启动：<code>ps -ef | grep nginx</code>，看是否有 <code>master</code> 的行</li></ul><p>如果校验报错，根据错误提示，修改配置文件。</p><p>可以使用 <code>vi /etc/nginx/conf/nginx.conf</code> 直接修改，也可以使用上面的方式下载到本地，修改，再上传的方式。</p><p>如果提示 <code>nginx: command not found</code> ，就是没有把 <code>nginx</code> 配置到环境变量中，重新执行上面的 <code>第一步：添加nginx命令到环境变量</code> 即可。</p><h4 id="安装bbr加速"><a href="#安装bbr加速" class="headerlink" title="安装bbr加速"></a>安装bbr加速</h4><p><strong>安装bbr</strong></p><p>执行bbr一键安装脚本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget -N --no-check-certificate <span class="string">"https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh"</span></span><br><span class="line">chmod +x tcp.sh</span><br><span class="line">./tcp.sh</span><br></pre></td></tr></table></figure><p>依次执行<code>2-7</code>，即<code>安装bbrPlus</code>，<code>使用bbrPlus加速</code></p><p>安装之后使用<code>./tcp.sh</code>即可重复执行命令</p><p><del>期间会重启一次。</del></p><p>经测试，发现 <code>bbrPlus</code> 比 <code>bbr</code> 加速效果更好。</p><p><strong>检查bbr是否安装成功</strong></p><ul><li><p>验证当前<code>TCP</code>的控制算法(<strong>是否安装<code>bbr</code></strong>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br></pre></td></tr></table></figure><p>返回值一般为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_available_congestion_control = bbr cubic reno</span><br><span class="line">// 或者</span><br><span class="line">net.ipv4.tcp_available_congestion_control = reno cubic bbr</span><br></pre></td></tr></table></figure></li><li><p>验证<code>BBR</code>是否已经启动(<strong>是否启动<code>bbr</code></strong>)：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br></pre></td></tr></table></figure><p>返回值一般为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net.ipv4.tcp_congestion_control = bbr</span><br></pre></td></tr></table></figure></li><li><p>或者：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><p>返回值一般为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 返回值有tcp_bbrplus 即说明bbr已经启动。</span><br><span class="line">// PS：但不是所有vps都会有此返回值，没有也正常。</span><br><span class="line">tcp_bbrplus            20480  21</span><br></pre></td></tr></table></figure></li><li><p><strong>注意：</strong> <code>bbrPlus</code> 有时候会自动失效(比如重启服务器后？)，此时需手动再次开启<code>bbrPlus</code></p></li></ul><h4 id="其他问题"><a href="#其他问题" class="headerlink" title="其他问题"></a>其他问题</h4><p><strong>如果要更换域名，发现域名证书没有一起更新怎么办？</strong></p><p><del>删掉证书文件，重新执行一键安装脚本，选择重新安装 <code>ws+tls+nginx</code></del></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 作废！作废！作废！</span><br><span class="line"><span class="built_in">cd</span> /data/</span><br><span class="line">rm v2ray.crt</span><br><span class="line">rm v2ray.key</span><br><span class="line">bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh) | tee v2ray_ins.log</span><br><span class="line">1</span><br></pre></td></tr></table></figure><p>一键安装脚本已更新并添加<strong>删除证书遗留文件</strong>功能，执行一键安装脚本，选择<code>16</code>即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh) | tee v2ray_ins.log</span><br><span class="line">16</span><br></pre></td></tr></table></figure><p><strong>如何重启服务器</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><code>bbr</code> 加速后，<code>youtube 4K 60fps</code> ，速度可以达到 <code>170k Kbps</code>，网速 <code>17m/s</code> （我用的100M电信，稳定20k Kbps就可以流畅看 4K 60fps）。</p><p>所以，现在是 <strong>秒开4K，8K</strong></p><p><strong>用户体检极好！…</strong></p><p><img src="/images/v2ray-1.jpg" alt></p><p><strong>而且还有伪装主页</strong>(https加密)</p><p>地址为：<a href="https://kxsw.jianwill.cn/" target="_blank" rel="noopener">kxsw.jianwill.cn</a></p><h3 id="相关资料介绍"><a href="#相关资料介绍" class="headerlink" title="相关资料介绍"></a>相关资料介绍</h3><p>折腾了几个月，尝试了多家供应商不同地区的服务器，<code>vultr 美国、巴黎、新加坡、日本等</code>，<code>google云 香港等</code>，不同的协议 <code>tcp、mckp伪装BT下载、mkcp伪装Facetime童话、mkcp伪装微信视频、websocket</code>，<code>cdn</code>，<code>nginx</code> 等多种方案，最后决定使用 <code>google云香港服务器+ws+tls+nginx+伪装主页</code> 的方式。</p><p>参考了很多资料，视频，下面为几个主要的。</p><ol><li><a href="https://www.youtube.com/watch?v=GrHEVhGoqK0&amp;list=PLFQSCKX4FTD7P0PYNTFkUA3Dd2BhatadZ&amp;index=3&amp;t=13s" target="_blank" rel="noopener">视频:v2ray+ws+tls+nginx</a></li><li><a href="https://briteming.blogspot.com/2019/01/v2ray-websocket-web-nginx.html" target="_blank" rel="noopener">文章:v2ray+ws+tls+nginx手动及一键脚本</a></li><li><a href="https://www.freenom.com/" target="_blank" rel="noopener">申请免费域名froomon</a></li><li><a href="https://www.cloudflare.com/" target="_blank" rel="noopener">免费cdn cloudflare</a></li><li><a href="https://cloud.google.com/" target="_blank" rel="noopener">google云 gcp</a></li><li><a href="http://ping.chinaz.com/" target="_blank" rel="noopener">ping测试</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于某些众所周知的原因，emmmmm….，不久前的血色十月，一大波梯子被封了。毫无意外，我的 &lt;code&gt;ss&lt;/code&gt; 也被封了，而且从那之后，&lt;code&gt;ss&lt;/code&gt; 就变得不好用了，速度慢，还经常上不了网。&lt;/p&gt;&lt;p&gt;然后吧，研究了下目前比较主流的方式 &lt;code&gt;v2ray&lt;/code&gt; ，包括 &lt;code&gt;搭建方式&lt;/code&gt; 、&lt;code&gt;速度优化&lt;/code&gt;、&lt;code&gt;ip伪装防封&lt;/code&gt; 等，发现 &lt;code&gt;v2ray : ws + tls + nginx + cdn&lt;/code&gt; 的方式速度和伪装性都很好。&lt;/p&gt;&lt;p&gt;再然后吧，今天就总结一下这个好了…..&lt;/p&gt;
    
    </summary>
    
      <category term="一起哈啤" scheme="http://jian2333.github.io/categories/%E4%B8%80%E8%B5%B7%E5%93%88%E5%95%A4/"/>
    
    
      <category term="v2ray" scheme="http://jian2333.github.io/tags/v2ray/"/>
    
      <category term="vpn" scheme="http://jian2333.github.io/tags/vpn/"/>
    
      <category term="科学上网" scheme="http://jian2333.github.io/tags/%E7%A7%91%E5%AD%A6%E4%B8%8A%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>ss + proxifier 实现vpn游戏代理</title>
    <link href="http://jian2333.github.io/2019/09/10/sstovpn/"/>
    <id>http://jian2333.github.io/2019/09/10/sstovpn/</id>
    <published>2019-09-10T14:40:54.000Z</published>
    <updated>2019-09-13T02:48:14.588Z</updated>
    
    <content type="html"><![CDATA[<p>之前搭过一个 <code>ss</code> (搭建教程可以参考 <a href="https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B" target="_blank" rel="noopener">自建ss/ssr服务器教程</a>)，但 <code>ss</code> 只能在浏览器上用，如果想像 <code>vpn</code> 一样代理游戏的话，该怎么办呢？</p><p>好在这个问题已经有解决方案了，就是搭配 <code>Proxifier</code> 使用。</p><p>下面，就是设置 <code>Proxifier</code> 的步骤。</p><a id="more"></a><h3 id="下载-ss-和-Proxifier"><a href="#下载-ss-和-Proxifier" class="headerlink" title="下载 ss 和 Proxifier"></a>下载 <code>ss</code> 和 <code>Proxifier</code></h3><p><strong>下载 <code>ss</code></strong></p><ul><li><strong>Windows SSR客户端</strong> ：<a href="https://github.com/shadowsocksr-backup/shadowsocksr-csharp/releases" target="_blank" rel="noopener">下载地址</a></li><li><strong>Mac SSR客户端</strong> ：<a href="https://github.com/shadowsocksr-backup/ShadowsocksX-NG/releases" target="_blank" rel="noopener">下载地址</a></li></ul><p><strong>下载 <code>Proxifier</code></strong></p><ul><li><strong>Windows 便携版</strong> ：<a href="https://www.proxifier.com/distr/ProxifierPE.zip" target="_blank" rel="noopener">官网地址</a></li><li><strong>Windows 安装版</strong> ：<a href="https://www.proxifier.com/distr/ProxifierSetup.exe" target="_blank" rel="noopener">官网地址</a></li><li><strong>Mac版</strong> ：<a href="https://www.proxifier.com/distr/ProxifierMac.zip" target="_blank" rel="noopener">官网地址</a></li></ul><h3 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h3><h4 id="启动ss"><a href="#启动ss" class="headerlink" title="启动ss"></a>启动ss</h4><p>启动并设置好 <code>ss</code> ，保证能正常运行即可。</p><h4 id="启动并设置-Proxifier"><a href="#启动并设置-Proxifier" class="headerlink" title="启动并设置 Proxifier"></a>启动并设置 <code>Proxifier</code></h4><p>启动 <code>Proxifier</code> 后，要配置以下三个步骤：</p><ul><li>代理服务器设置</li><li>代理规则设置</li><li>域名解析设置</li></ul><h5 id="代理服务器设置"><a href="#代理服务器设置" class="headerlink" title="代理服务器设置"></a>代理服务器设置</h5><ul><li><code>profile</code> –&gt; <code>Proxy Servers</code></li><li>添加 <code>Server</code></li><li>设置 <code>Address</code> 和 <code>Port</code></li><li>修改 <code>Protocol</code></li><li><code>Check</code></li><li><code>OK</code></li></ul><p><img src="/images/sspro-1.jpg" alt></p><p><img src="/images/sspro-2.jpg" alt></p><h5 id="代理规则设置"><a href="#代理规则设置" class="headerlink" title="代理规则设置"></a>代理规则设置</h5><ul><li><code>profile</code> –&gt; <code>Proxification Rules</code></li><li>设置 <code>Localhost</code></li><li>设置 <code>需要代理的游戏</code>，比如 <code>GTAV</code></li><li>设置 <code>默认连接方式</code></li></ul><p><img src="/images/sspro-3.jpg" alt></p><p><img src="/images/sspro-4.jpg" alt></p><p><img src="/images/sspro-5.jpg" alt></p><h5 id="域名解析设置"><a href="#域名解析设置" class="headerlink" title="域名解析设置"></a>域名解析设置</h5><ul><li><code>profile</code> –&gt; <code>Name Resolution</code></li><li>设置 <code>通过代理服务器解析域名</code></li><li>设置 <code>不解析以下主机</code></li></ul><p><img src="/images/sspro-6.jpg" alt></p><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p>下面是 <code>ss</code> + <code>Proxifier</code> 代理后，启动 <code>GTAV</code> 的效果图</p><p><img src="/images/sspro-7.jpg" alt></p><p>然后，终于可以愉快的体验 <strong>GTAV 赌场DLC</strong> 了…</p><p>(手动狗头，滑鸡!)</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前搭过一个 &lt;code&gt;ss&lt;/code&gt; (搭建教程可以参考 &lt;a href=&quot;https://github.com/Alvin9999/new-pac/wiki/%E8%87%AA%E5%BB%BAss%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%95%99%E7%A8%8B&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;自建ss/ssr服务器教程&lt;/a&gt;)，但 &lt;code&gt;ss&lt;/code&gt; 只能在浏览器上用，如果想像 &lt;code&gt;vpn&lt;/code&gt; 一样代理游戏的话，该怎么办呢？&lt;/p&gt;&lt;p&gt;好在这个问题已经有解决方案了，就是搭配 &lt;code&gt;Proxifier&lt;/code&gt; 使用。&lt;/p&gt;&lt;p&gt;下面，就是设置 &lt;code&gt;Proxifier&lt;/code&gt; 的步骤。&lt;/p&gt;
    
    </summary>
    
      <category term="一起哈啤" scheme="http://jian2333.github.io/categories/%E4%B8%80%E8%B5%B7%E5%93%88%E5%95%A4/"/>
    
    
      <category term="vpn" scheme="http://jian2333.github.io/tags/vpn/"/>
    
      <category term="ss" scheme="http://jian2333.github.io/tags/ss/"/>
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://jian2333.github.io/2019/09/05/regexp/"/>
    <id>http://jian2333.github.io/2019/09/05/regexp/</id>
    <published>2019-09-05T14:51:00.000Z</published>
    <updated>2020-03-18T07:55:22.686Z</updated>
    
    <content type="html"><![CDATA[<style>table{width:auto}</style><p>研究了一下正则表达式</p><p>理解的不深，但也有些心得</p><p>所以</p><p>做个总结～</p><p>哈哈哈</p><a id="more"></a><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>正则表达式在不同的语言有不同的使用方法</p><p>一般都是 <code>/^xxxx$/</code></p><p>其中：</p><ul><li><code>//</code> ：代表里面是正则表达式的匹配规则</li><li><code>^</code> ：表示正则表达式的开始</li><li><code>$</code> ：表示正则表达式的结束</li><li><code>xxx</code> ： 位于 <code>^</code> 和 <code>$</code> 之间的为正则表达式规则，用于匹配字符串等</li></ul><h3 id="理解"><a href="#理解" class="headerlink" title="理解"></a>理解</h3><p>说几个自身的理解吧</p><h4 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h4><table><thead><tr><th style="text-align:center">符号</th><th style="text-align:left">作用</th></tr></thead><tbody><tr><td style="text-align:center">^</td><td style="text-align:left">开始标识。方括号 <code>[ ]</code> 中表示不包含对应的集合</td></tr><tr><td style="text-align:center">$</td><td style="text-align:left">结束标识</td></tr><tr><td style="text-align:center">[ ]</td><td style="text-align:left">用于匹配具体的值，比如 <code>[A-Z] [A-Za-z] [0-9]</code></td></tr><tr><td style="text-align:center">( )</td><td style="text-align:left">用于整理表达式，确定匹配的优先级，类似数学中的 <code>()</code><br>用于分组，可用$1，$2 … 获取对应分组里的内容</td></tr><tr><td style="text-align:center">{ }</td><td style="text-align:left">用于设置匹配次数，如未设置，<strong>默认为1次</strong></td></tr><tr><td style="text-align:center">[竖杆]</td><td style="text-align:left">匹配两者中的一个，需用括号括起来，比如 <code>(0[竖杆][1-9][0-9]*)</code></td></tr><tr><td style="text-align:center">\</td><td style="text-align:left">转义字符</td></tr><tr><td style="text-align:center">.</td><td style="text-align:left">匹配除换行符 <code>\n</code> 之外的任何单字符。要匹配 <code>.</code> ，请使用 <code>\.</code></td></tr></tbody></table><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><p>未使用限定符时，<strong>默认匹配1次</strong></p><table><thead><tr><th style="text-align:center">符号</th><th>作用</th></tr></thead><tbody><tr><td style="text-align:center">*</td><td>匹配前面的子表达式<strong>零次或多次</strong>。例如，zo<em> 能匹配”z” 以及 “zoo”。</em> 等价于{0,}。</td></tr><tr><td style="text-align:center">+</td><td>匹配前面的子表达式<strong>一次或多次</strong>。例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。</td></tr><tr><td style="text-align:center">？</td><td>匹配前面的子表达式<strong>零次或一次</strong>。例如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。</td></tr><tr><td style="text-align:center">{n}</td><td>n 是一个非负整数。匹配确定的 n 次。例如，’o{2}’ 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。</td></tr><tr><td style="text-align:center">{n,}</td><td>n 是一个非负整数。至少匹配n 次。例如，’o{2,}’ 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。’o{1,}’ 等价于 ‘o+’。’o{0,}’ 则等价于 ‘o*’。</td></tr><tr><td style="text-align:center">{n,m}</td><td>m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，”o{1,3}” 将匹配 “fooooood” 中的前三个 o。’o{0,1}’ 等价于 ‘o?’。请注意在逗号和两个数之间不能有空格。</td></tr></tbody></table><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ul><li><p><code>\d</code> ：数字</p></li><li><p>大写为原来的反的值：<code>\D</code> ：除数字之外的所有值</p></li><li><p>$1, $2… ：用于获取 <code>()</code> 对应分组里的内容，在 <code>replace</code> 等地方很常见。</p><ul><li><p>比如可以用 <code>$1,$2,$3</code> 获取年月日：<code>/^(\d{4})[\/-](\d{1,2})[\/-](\d{1,2})$/</code> 。</p></li><li><p><code>&#39;2020/01/16&#39;.replace(/^(\d{4})[\/-](\d{1,2})[\/-](\d{1,2})$/, &#39;$1-$2-$3&#39;)</code></p><p><img src="/images/reg-1.jpg" alt></p></li></ul></li></ul><h3 id="常用🌰"><a href="#常用🌰" class="headerlink" title="常用🌰"></a>常用🌰</h3><ul><li><strong>0和非0开头的纯数字</strong> ：<code>/^(0|[1-9][0-9]*)$/</code></li><li><strong>非0开头的最多带两位小数的数字</strong> ：<code>/^([1-9][0-9]*)+(\.[0-9]{1,2})?$/</code></li><li><strong>带1～2位小数的正数或负数</strong> ：<code>/^(-)?([1-9][0-9]*)(\.d{1,2})?$/</code></li><li><strong>非负的整数或最多2位小数的数字(0.0, 0.00 未过滤掉)</strong> ：<code>/^(0|([1-9][0-9]*))(\.[0-9]{1,2})?$/</code></li><li><strong>非负的整数或最多2位小数的数字+2位字母(0.0, 0.00及加字母 未过滤掉)</strong> ：<code>/^(0|[1-9][0-9]*)(\.[0-9]{1,2})?([A-Za-z]{1,2})?$/</code></li></ul><h3 id="推荐资料"><a href="#推荐资料" class="headerlink" title="推荐资料"></a>推荐资料</h3><ul><li><a href="https://www.cnblogs.com/zxin/archive/2013/01/26/2877765.html" target="_blank" rel="noopener">1. 常用的正则表达式大全</a></li><li><a href="https://www.runoob.com/regexp/regexp-syntax.html" target="_blank" rel="noopener">2. 正则表达式 - 菜鸟教程</a></li><li><a href="https://www.baidufe.com/fehelper/regexp/index.html" target="_blank" rel="noopener">3. FeHelper</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;style&gt;table{width:auto}&lt;/style&gt;&lt;p&gt;研究了一下正则表达式&lt;/p&gt;&lt;p&gt;理解的不深，但也有些心得&lt;/p&gt;&lt;p&gt;所以&lt;/p&gt;&lt;p&gt;做个总结～&lt;/p&gt;&lt;p&gt;哈哈哈&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="http://jian2333.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="正则表达式" scheme="http://jian2333.github.io/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>nginx学习（1）</title>
    <link href="http://jian2333.github.io/2019/08/25/nginx-1/"/>
    <id>http://jian2333.github.io/2019/08/25/nginx-1/</id>
    <published>2019-08-25T09:08:41.000Z</published>
    <updated>2019-09-01T15:17:03.669Z</updated>
    
    <content type="html"><![CDATA[<p>因为公司的需要，网站需要接入网关，对域名有校验</p><p>于是研究了一下 <code>nginx</code> 和 <code>代理</code></p><p>发现还挺好玩的。。</p><p>然后，</p><p>就总结了一下这份</p><p><strong>nginx-1 ！</strong></p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>nginx</code> 的功能太多，简单来说就是可以<strong>配置相应的服务器</strong>。</p><p>可以配置包括但不限于：</p><ul><li>代理</li><li>域名过滤</li><li>IP过滤</li><li>等等其他，具体可以参考 <a href="http://www.nginx.cn/doc/" target="_blank" rel="noopener">中文文档</a> 以及 <a href="https://docs.nginx.com/nginx/" target="_blank" rel="noopener">英文文档</a></li></ul><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>mac 安装 <code>nginx</code> 很简单，先安装 <code>homebrew</code> ，然后安装 <code>nginx</code></p><h4 id="安装-homebrew"><a href="#安装-homebrew" class="headerlink" title="安装 homebrew"></a>安装 <code>homebrew</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ruby -e <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></span><br></pre></td></tr></table></figure><p>出现以下 <code>log</code> 表示安装完成了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Installation successful!</span><br></pre></td></tr></table></figure><p>可以使用以下命令查看 <code>homebrew</code> 的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">brew -v</span><br><span class="line">Homebrew 2.1.7</span><br><span class="line">Homebrew/homebrew-core (git revision 270f; last commit 2019-07-18)</span><br></pre></td></tr></table></figure><h4 id="常用的-brew-命令"><a href="#常用的-brew-命令" class="headerlink" title="常用的 brew 命令"></a>常用的 <code>brew</code> 命令</h4><ul><li>brew 搜索软件 ：<code>brew search nginx</code></li><li>brew 安装软件 ：<code>brew install nginx</code></li><li>brew 卸载软件 ：<code>brew uninstall nginx</code></li><li>brew 升级 ：<code>sudo brew update</code></li><li>brew 查看安装信息 ：<code>sudo brew info nginx</code></li><li>brew 查看已安装软件 ：<code>brew list</code></li></ul><h4 id="安装-nginx"><a href="#安装-nginx" class="headerlink" title="安装 nginx"></a>安装 <code>nginx</code></h4><p>安装 <code>nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew install nginx</span><br></pre></td></tr></table></figure><p>启动 <code>nginx</code> 服务</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo brew services start nginx</span><br></pre></td></tr></table></figure><p>利用 <code>http://localhost:8080</code> 进行访问，如果出现如下页面，说明 <code>nginx</code> 启动成功</p><p><img src="/images/nginx1-1.jpg" alt></p><p><strong>相关 文件地址</strong></p><ul><li><strong>host</strong> ：<code>/private/etc/hosts</code></li><li><strong>nginx</strong> ：<ul><li>文件配置路径：<code>/usr/local/etc/nginx/nginx.conf</code></li><li>服务器默认路径：<code>usr/local/var/www</code></li><li>安装路径：<code>/usr/local/Caller/nginx/1.17.1</code></li></ul></li></ul><h4 id="常用的-nginx-命令"><a href="#常用的-nginx-命令" class="headerlink" title="常用的 nginx 命令"></a>常用的 <code>nginx</code> 命令</h4><p><strong>在任意路径下执行都可以！ 🤪</strong></p><ul><li>启动：<code>nginx</code> / <code>nginx -c /usr/local/etc/nginx/nginx.conf</code></li><li>更新配置文件后重启：<code>nginx -s reload</code></li><li>校验配置文件：<code>nginx -t</code></li><li>停止：<ul><li>快速停止：<code>nginx -s stop</code></li><li>正常停止(执行完当前队列)：<code>nginx -s quit</code></li></ul></li><li>查看是否启动 <code>nginx</code>：<ul><li><code>ps -ef|grep nginx</code> ：查看是否有 <code>master</code> 的进程</li><li>记住 <strong>第二列</strong> 的 <code>pid</code> 号 xxx，可以用来 <strong>杀进程</strong></li></ul></li><li>停止(杀掉进程)：<ul><li>快速停止(立刻)：<code>kill -TERM xxx</code></li><li>正常停止：<code>kill -QUIT xxx</code></li><li>和上面一样：<code>kill -INT xxx</code></li></ul></li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>这里主要说下，在公司用到的，<strong>代理</strong></p><h4 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h4><p><strong>需求</strong></p><p>公司的后端接入了网关，对域名有校验，只有符合规则的域名才能调用网关</p><p>于是，本地开发的时候，如果用 <code>http://localhost:3001</code> 去调开发环境的后端，会失败，因为通过不了网关</p><p>所以，需要做一个代理，代理 <code>xxx.ym</code> 域名，当调用 <code>/</code> 的时候调本地的前端，当调用 <code>/api</code> 的时候调服务器上的后端，这样就能和开发环境的后端连调了</p><p><strong>步骤</strong></p><p>上面说了需求，那如果要实现这样效果，我们要执行以下几个步骤：</p><ul><li>配置 <code>host</code> 文件</li><li>配置 <code>nginx.conf</code> 文件</li><li>启动 <code>nginx</code></li><li>启动 <code>前端开发环境</code></li><li>使用 <code>http://xxx.ym</code> 地址进行测试</li></ul><p><code>配置 host 文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># host 文件</span><br><span class="line">127.0.0.1 xxx.ym</span><br></pre></td></tr></table></figure><p><code>配置 nginx.conf 文件</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf 文件</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  xxx.ym;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://127.0.0.1:3001;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        location /api &#123;</span><br><span class="line">            proxy_pass   http://10.1.0.67:9523;</span><br><span class="line">            proxy_set_header Host xxx.yy.ym;</span><br><span class="line">            proxy_set_header X-Forward-For $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">        location /oba3/api &#123;</span><br><span class="line">            proxy_pass   http://10.1.0.67:9523;</span><br><span class="line">            proxy_set_header Host xxx.yy.ym;</span><br><span class="line">            proxy_set_header X-Forward-For $remote_addr;</span><br><span class="line">        &#125;</span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><code>启动或重启 nginx</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 启动</span><br><span class="line">nginx</span><br><span class="line">// 或重启</span><br><span class="line">nginx -s reload</span><br><span class="line">// 或先校验文件正确性，再重启</span><br><span class="line">nginx -t</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p><code>启动前端环境</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /xxxx</span><br><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><code>打开网站</code></p><p>在浏览器输入 <code>http://xxx.ym</code> 打开就可以啦</p><h4 id="搭配-host-文件"><a href="#搭配-host-文件" class="headerlink" title="搭配 host 文件"></a>搭配 <code>host</code> 文件</h4><p>搭配 <code>host</code> 文件，可以在本地 <strong>打开任意域名，跳转到任意想跳转的地址</strong>，包括但不限于跳转到 <code>https://www.google.com</code>，<code>https://www.baidu.com</code>，<code>http://localhost:4000</code> 等任意地址。</p><p>我们可以这样理解：</p><ul><li><p>多个 <code>server块</code> 才会匹配 <code>server_name</code> ，1个话不匹配直接使用</p></li><li><p><code>nginx</code> 是服务器上用的，所以想像成服务器的话，1个服务器有1个ip，但是可以有多个 域名 解析成这个ip，所以当不同的域名访问这个服务器的时候，怎么区分不同的域名呢？，于是， <code>server_name</code> 这个字段就出现了，它可以使用 <strong>正则和通配符</strong> 来匹配域名，决定 <strong>哪个域名使用那个 server块</strong>，进而使用相应的配置。<strong>端口</strong> 相当于二次校验。</p></li><li><p>然后可以使用 <code>location / + prox_pass</code> 进行代理</p></li><li><p>通过配合 <code>host</code> 文件使用，<code>host</code> 文件可以将指定域名映射到指定ip，比如可以把任意网站xxx映射到 <code>127.0.0.1</code> ，我们可以搭配nginx的 <code>server块</code> 的 <code>端口号</code>，然后进行代理，代理到任意 ip上</p></li><li><p>举个🌰，下面的配置可以把 <code>longge666.huiwan</code> 映射成本地的 <code>http://localhost:4000</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># host 文件</span><br><span class="line"># .com域名 chrome会自动转换成 https，跳转不了</span><br><span class="line">127.0.0.1 longge666.huiwan</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># nginx.conf 文件</span><br><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  longge666.huiwan;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            proxy_pass   http://localhost:4000;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        error_page   500 502 503 504  /50x.html;</span><br><span class="line">        location = /50x.html &#123;</span><br><span class="line">            root   html;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/images/nginx1-2.jpg" alt></p></li></ul><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>对 <code>nginx</code> 的理解暂时就这么多</p><p>后面有了新的理解再继续补充～ 😋</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;因为公司的需要，网站需要接入网关，对域名有校验&lt;/p&gt;&lt;p&gt;于是研究了一下 &lt;code&gt;nginx&lt;/code&gt; 和 &lt;code&gt;代理&lt;/code&gt;&lt;/p&gt;&lt;p&gt;发现还挺好玩的。。&lt;/p&gt;&lt;p&gt;然后，&lt;/p&gt;&lt;p&gt;就总结了一下这份&lt;/p&gt;&lt;p&gt;&lt;strong&gt;nginx-1 ！&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="http://jian2333.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="nginx" scheme="http://jian2333.github.io/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>omp项目总结</title>
    <link href="http://jian2333.github.io/2019/08/18/omp/"/>
    <id>http://jian2333.github.io/2019/08/18/omp/</id>
    <published>2019-08-18T08:15:00.000Z</published>
    <updated>2021-04-01T03:08:48.225Z</updated>
    
    <content type="html"><![CDATA[<p>连续加班1个月了，天天加班10点多，到家11点半，周末也在加班，基本没有哪天是12点以前睡的。明显感觉扛不住了，身体越来越差，一度处于 <strong>猝死的边缘</strong> …..</p><p>好在这个项目终于完成了(其实还没完全结束，还在修bug阶段，然后又被安排去另一个项目了…7天开发时间，1个星期+2个周六，<strong>感觉要猝死了</strong> …..)</p><p>吐槽不要太多</p><p>当然，收获也是很多</p><p>所以，就总结了一哈….</p><a id="more"></a><p><img src="/images/omp-1.jpg" alt></p><h2 id="项目"><a href="#项目" class="headerlink" title="项目"></a>项目</h2><p><strong>开发周期</strong></p><p>周期没啥好写的，就是1个月，从开发到上线，总共一个月…</p><p><strong>吐槽</strong></p><p>吐槽不要太多…</p><p>开发周期太短，项目太赶了。</p><p>最初计划是1个月时间上线。开发2周，测试联调2周，然而实际情况是，开发和测试同步进行。</p><p>开发1个页面，测试就开始测，然后就是前期测试一直在催，页面开发好了没，开发好了没。。。 这 xx$%^^&amp;*， 开发怎么能赶上测试的进度….</p><p>其次，开发预计时间，安排的极不合理。所有开发预计时间都是最理想状态的。就是没人打扰，不会遇到难点，只做开发一件事的时间。然而实际情况是，有太多的第三方因素会影响开发进度，比如：</p><ul><li>遇到难点：自己或者其他同事遇到难点，解决一个难点就花了2个人一上午的时间</li><li>封装公共组件：这些任务是没有考虑在开发预计时间内的，那个时间只考虑了页面的开发时间…</li><li>其他事情：<ul><li>比如开会，各种会议。</li><li>测试叫去改bug等(测试和开发同步进行的….)</li><li>后端接口有问题，联调的时候一直在等后端的接口正常</li></ul></li></ul><p>总之就是，<strong>时间太赶，2周时间开发根本不够</strong> 。</p><p>然后吧，就是疯狂加班了。。。</p><p>住的离公司近还好，像我这种这么远的，每天10点多下班，回去到家就11点半了，每天要12点多才能睡觉，而且，<strong>长期没有休息</strong>，周末能休息下还好，问题是周末还得加班…..</p><p>再然后吧，身体越来越差了，天天都困的要死，感觉要猝死了。。。</p><p>所以，接下来，要<strong>赶紧改变下当前的状态</strong>，这是当前最重要的事了..</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>ok，吐槽完毕，说下收获吧。</p><p>花费了这么多精力，以及无数个加班。。。收获还是挺多的。。</p><h3 id="开发规范"><a href="#开发规范" class="headerlink" title="开发规范"></a>开发规范</h3><h4 id="敏捷开发流程"><a href="#敏捷开发流程" class="headerlink" title="敏捷开发流程"></a>敏捷开发流程</h4><p>项目采用的是敏捷开发，和传统开发最大的区别，就是没有预期的开发时间。</p><p>传统开发会有充足的开发计划，xxxx时间段开发，xxxx时间段测试阶段，然后上线。目的是 按时交付<strong>高质量的产品</strong>。</p><p>而敏捷开发(omp项目就算吧)，是有需求了，立刻开发，并且 <strong>开发和测试同步进行</strong>，目的 <strong>最短时间内</strong> 交付产品。</p><h4 id="git使用规范：git-flow"><a href="#git使用规范：git-flow" class="headerlink" title="git使用规范：git-flow"></a>git使用规范：git-flow</h4><p>项目使用 <code>git-flow</code> 规范来管理代码，常见的分支结构有：</p><ul><li><strong>master</strong> ：用来存储发布后的稳定代码分支，一般会使用 <code>tag</code> 标签进行管理</li><li><strong>hotfix-xxx</strong> ：热修复线上bug的分支，从 <code>master</code> 创建，直接合并到 <code>master</code></li><li><strong>dev</strong> ：开发分支，从 <code>master</code> 创建</li><li><strong>test</strong> ：测试分支，从 <code>master</code> 创建</li><li><strong>release</strong> ：发布分支，从 <code>master</code> 创建</li><li><strong>feature-xxx</strong> ：新需求分支，从 <code>master</code> 创建，合并到 <code>dev</code></li><li><img src="/images/omp-2.jpg" alt></li></ul><p>其中有几点要求：</p><ul><li>一个功能一个分支，一起提交到远程服务器，待稳定后，删除对应的 <code>feature</code> 分支</li><li>流程基本上是：<code>master</code> –&gt; <code>feat-xx</code> –&gt; <code>dev</code> –&gt; <code>test</code> –&gt; <code>release</code> –&gt; <code>master</code></li><li>不能从 <code>dev</code> <code>merge</code> 代码到 <code>feature</code> 分支，如果有依赖其他分支的功能从其他分支直接 <code>merge</code> 到当前分支：<code>feat-A</code> –&gt; <code>feat-B</code></li></ul><h3 id="代码方面"><a href="#代码方面" class="headerlink" title="代码方面"></a>代码方面</h3><h4 id="vue"><a href="#vue" class="headerlink" title="vue"></a>vue</h4><p><strong>生命周期及钩子函数</strong></p><p><code>vue</code> 的生命周期包含下面8个阶段：</p><ul><li><strong>beforeCreate</strong> ：<code>vue</code> 实例的挂载元素 <code>$el</code> 和数据对象 <code>data</code> 都是 <code>undefined</code>，还未初始化</li><li><strong>created</strong> ：完成了 <code>data</code> 的初始化，<code>el</code> 还未初始化</li><li><strong>beforeMount</strong> ：<code>vue</code> 实例的 <code>$el</code> 和 <code>data</code> 都初始化了，相关的 <code>render</code> 函数首次被调用。实例已完成以下的配置：编译模板，把 <code>data</code> 里面的数据和模板生成 <code>html</code> 。注意此时 <code>html</code> 还没有挂载到页面上</li><li><strong>mounted</strong> ：在 <code>el</code> 被新创建的 <code>vm.$el</code> 替换，并挂载到实例上去之后调用。实例已完成以下的配置：用上面编译好的 <code>html</code> 内容替换 <code>el</code> 属性指向的 <code>DOM对象</code> 。完成模板中的 <code>html</code> 渲染到 <code>html</code> 页面中，此过程中进行 <code>ajax交互</code></li><li><strong>beforeUpdate</strong> ：在数据更新之前调用，发生在虚拟 <code>DOM</code> 重新渲染和打补丁之前调用。可以在该钩子中进一步地更改状态，不会触发附加的渲染状态</li><li><strong>updated</strong> ：在由于数据更改导致的虚拟 <code>DOM</code> 重新渲染和打补丁之后调用。调用时，组件 <code>DOM</code> 已经更新，所以可以依赖与 <code>DOM</code> 的操作。然而在大多数情况下应该避免在此期间更改状态，因为这可能会导致无限循环。该钩子函数在服务器端渲染期间不可用</li><li><strong>beforeDestroy</strong> ：在实例销毁之前调用。实例仍然完全可用</li><li><strong>destroyed</strong> ：在实例销毁之后调用。调用后，所有的事件监听器会被移除，所有的子实例也会被销毁。该钩子函数在服务器端渲染期间不被调用</li></ul><p><strong>父子组件的传值</strong></p><ul><li><strong>父 –&gt; 子</strong> ：<ul><li>用 <code>props</code> 传值</li><li>可以设定 <code>类型</code> 和 <code>默认值</code></li><li><code>props</code> 传的值在 <code>data</code> 里不能重复定义</li><li><code>props</code> 传的值默认会双向绑定，及 子页面的值改变了，会导致父页面值的改变，如果期望单向绑定，有2种方法解决这个问题：<ul><li><strong>子页面data里定义 aa: props的值</strong></li><li><strong>子页面使用 <code>computed</code> 的值</strong></li></ul></li></ul></li><li><strong>子 –&gt; 父</strong> ：<ul><li>用 <code>this.$emit(&#39;aa&#39;, params)</code> 传事件</li><li>在父组件使用 <code>@aa = &#39;yy&#39;</code> 来捕获事件</li></ul></li></ul><p><strong>组件的封装</strong></p><p>太多了，后续补充…</p><p><strong>双向绑定的深刻理解（important！！）</strong></p><p><strong>对象的双向绑定</strong></p><p><a href="https://cn.vuejs.org/v2/guide/reactivity.html#检测变化的注意事项" target="_blank" rel="noopener">官网说明</a></p><p><code>vue</code> 中的双向绑定，只有在页面加载时，在 <code>data</code> 里定义了的对象，才能自动双向绑定，如果 <code>data</code> 里没有定义这个对象，直接修改 <code>v-model</code> 的值，对应组件的值(UI)是不会自动修改的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: <span class="number">1</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// `vm.a` 是响应式的</span></span><br><span class="line"></span><br><span class="line">vm.b = <span class="number">2</span></span><br><span class="line"><span class="comment">// `vm.b` 是非响应式的</span></span><br></pre></td></tr></table></figure><p>如果要双向绑定未在 <code>data</code> 里定义的对象的属性，应该使用下面的方法</p><ul><li><p><strong>添加单个属性</strong> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `Vue.set(object, propertyName, value)`</span></span><br><span class="line">Vue.set(vm.someObject, <span class="string">'b'</span>, <span class="number">2</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// `this.$set(object, propertyName, value)`，`this.$set` 是 `Vue.set` 的别名</span></span><br><span class="line"><span class="keyword">this</span>.$<span class="keyword">set</span>(this.someObject, 'b', 2)</span><br></pre></td></tr></table></figure></li><li><p><strong>添加多个属性</strong> ：</p><p>直接使用 <code>Object.assign()</code> 或 <code>_.extend()</code> 添加到对象上的新属性不会触发更新。应该使用 原对象与要混合进去的对象的属性<strong>一起创建一个新的对象</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 代替 `Object.assign(this.someObject, &#123;a: 1, b: 2&#125;)`</span></span><br><span class="line"><span class="keyword">this</span>.someObject = <span class="built_in">Object</span>.assign(&#123;&#125;, <span class="keyword">this</span>.someObject, &#123;<span class="attr">a</span>: <span class="number">1</span>, <span class="attr">b</span>: <span class="number">2</span>&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>数组的双向绑定</strong></p><p><a href="https://cn.vuejs.org/v2/guide/list.html#数组更新检测" target="_blank" rel="noopener">官网说明</a></p><p><strong>数组：能双向绑定的情况</strong></p><ul><li><p><strong>变异方法(修改自身数组)</strong> ：</p><ul><li>push()</li><li>pop()</li><li>shift()</li><li>unshift()</li><li>splice()</li><li>sort()</li><li>reverse()</li></ul></li><li><p><strong>非变异方法/替换数组(返回新数组)</strong> ：</p><ul><li>filter()</li><li>concat()</li><li>slice()</li></ul><p>使用 <code>非变异方法</code> 时，要使用一个新数组替换原数组</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">example1.items = example1.items.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> item.message.match(<span class="regexp">/Foo/</span>)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>数组：不能双向绑定的情况</strong></p><p>由于 <code>JavaScript</code> 的限制， <code>Vue</code> <strong>不能</strong> 检测以下数组的变动：</p><ul><li>利用索引直接设置一个数组项的值，例如：<code>vm.items[indexOfItem] = newValue</code></li><li>修改数组的长度，例如：<code>vm.items.length = newLength</code></li></ul><p>举个例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    items: [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.items[<span class="number">1</span>] = <span class="string">'x'</span><span class="comment">// 不是响应性的</span></span><br><span class="line">vm.items.length = <span class="number">2</span><span class="comment">// 不是响应性的</span></span><br></pre></td></tr></table></figure><p>为了解决第一个问题，可以使用以下两种方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue.set</span></span><br><span class="line">Vue.set(vm.items, indexOfItem, newValue)</span><br><span class="line"><span class="comment">// vm.$set</span></span><br><span class="line">vm.$<span class="keyword">set</span>(vm.items, indexOfItem, newValue)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Array.prototype.splice</span></span><br><span class="line">vm.items.splice(indexOfItem, <span class="number">1</span>, newValue)</span><br></pre></td></tr></table></figure><p>为了解决第二个问题，可以使用 <code>splice</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.items.splice(newLength)</span><br></pre></td></tr></table></figure><h4 id="iview"><a href="#iview" class="headerlink" title="iview"></a>iview</h4><p><strong>Form表单</strong></p><p>心得两点：</p><p><strong>validator 的使用</strong></p><p><img src="/images/omp-3.jpg" alt></p><p><img src="/images/omp-4.jpg" alt></p><p><img src="/images/omp-5.jpg" alt></p><p><img src="/images/omp-6.jpg" alt></p><p><strong>reset 的使用</strong></p><p><img src="/images/omp-7.jpg" alt></p><p><strong>table</strong></p><p>基本就是一些配置吧</p><p>参考 <a href="https://www.iviewui.com/components/table" target="_blank" rel="noopener">iview table</a></p><p><strong>其他</strong></p><p>参考 <a href="https://www.iviewui.com/docs/guide/install" target="_blank" rel="noopener">iview 官网</a></p><h4 id="echarts"><a href="#echarts" class="headerlink" title="echarts"></a>echarts</h4><p><code>echarts</code> 要显示图表需要两个步骤</p><ul><li><strong>初始化</strong></li><li><strong>使用 setOption</strong> 方法更新数据</li></ul><p>所以</p><p>对于 <strong>静态图表</strong> 来说，上面2个步骤可以放到一起</p><p>对于 <strong>动态图表</strong> 来说，上面2个步骤则要分开，并且每次获取数据后(获取数据方式不限)需要使用 <code>setOption</code> 方法更新数据</p><p>举个例子</p><ul><li><p><strong>初始化图表</strong></p><p><img src="/images/omp-8.jpg" alt></p></li><li><p><strong>初始化 websocket</strong></p><p><img src="/images/omp-9.jpg" alt></p></li><li><p><strong>websocket获取对象并调用 setOption 方法更新图表</strong></p><p><img src="/images/omp-10.jpg" alt></p><p><img src="/images/omp-11.jpg" alt></p></li></ul><h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h4><p><strong>跳转传值</strong></p><ul><li><p>使用 <code>query</code> ：该模式下 <code>to</code> 的地址只能使用 <code>path</code> 而不能使用 <code>name</code></p></li><li><p>使用 <code>params</code> ：无要求</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 命名的路由 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; name: 'user', params: &#123; userId: 123 &#125;&#125;"</span>&gt;</span>User<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 带查询参数，下面的结果为 /register?plan=private --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123; path: 'register', query: &#123; plan: 'private' &#125;&#125;"</span>&gt;</span>Register<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> params = &#123;</span><br><span class="line">  type: <span class="string">'add'</span>, </span><br><span class="line">  code: <span class="string">'aaa'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">name</span>: <span class="string">'terminalEdit'</span>, <span class="attr">params</span>: params)</span><br></pre></td></tr></table></figure></li></ul><p><strong>跳转监听事件</strong></p><ul><li><p>使用 <code>watch</code> 监听</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  <span class="string">'$route'</span> (to, <span class="keyword">from</span>) &#123;</span><br><span class="line">    <span class="comment">// 跳转到当前页面和离开当前页面都会触发该监听事件</span></span><br><span class="line">    <span class="comment">// 跳转到当前页面时，to.params 是获取的参数</span></span><br><span class="line">    <span class="comment">// 离开当前页面时，from.params 是当前页的参数</span></span><br><span class="line">    <span class="keyword">let</span> params = to.params</span><br><span class="line">    <span class="keyword">if</span> (params &amp;&amp; params.vehicleId) &#123;</span><br><span class="line">      <span class="keyword">this</span>.vehicleId = params.vehicleId</span><br><span class="line">      <span class="keyword">this</span>.init()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>mounted</code> 的时候也可以添加捕获</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mounted () &#123;</span><br><span class="line">  <span class="keyword">let</span> params = <span class="keyword">this</span>.$route.params</span><br><span class="line">  <span class="keyword">if</span> (params &amp;&amp; params.vehicleId) &#123;</span><br><span class="line">    <span class="keyword">this</span>.vehicleId = params.vehicleId</span><br><span class="line">    <span class="keyword">this</span>.init()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h4><p>后续补充….</p><h3 id="工具方面"><a href="#工具方面" class="headerlink" title="工具方面"></a>工具方面</h3><h4 id="SourceTree"><a href="#SourceTree" class="headerlink" title="SourceTree"></a>SourceTree</h4><p><strong>分支的使用</strong></p><p>互相切换</p><p>合并</p><p>没啥好说的….</p><p><strong>pull注意项</strong></p><p>如果你本地有修改了但未 <code>commit</code> 的代码，这时候 <code>git pull</code> 的话，会提示 <code>pull</code> 下来的代码未提交(自动合并)，这时候，你 <strong>一定要提交 pull 下来的代码！！</strong></p><p><strong>贮藏</strong></p><p>巧用 <strong>贮藏</strong></p><p>把当前未提交的代码贮藏起来，然后去做其他的任务，之后回来，随时启用贮藏的代码</p><p><img src="/images/omp-14.jpg" alt></p><p><strong>重置到之前的提交</strong></p><p>如果 <code>commit</code> 没有 <code>push</code> 到远程服务器，可以 <code>重置到当前提交</code></p><p>如果 <code>commit</code> 已经在 远程服务器上了，<strong>暂时还不知道怎么重置</strong> …..</p><h4 id="WebStorm"><a href="#WebStorm" class="headerlink" title="WebStorm"></a>WebStorm</h4><ul><li><p><strong>eslint 配置</strong> ：</p><p><img src="/images/omp-12.jpg" alt></p></li><li><p><strong>highLighting Level</strong> ：这个不能全局修改，有个替代的方法，把 <code>warning</code> 提示关掉，但并没有从根本上解决问题</p><p><img src="/images/omp-13.jpg" alt></p></li></ul><h2 id="感受及总结"><a href="#感受及总结" class="headerlink" title="感受及总结"></a>感受及总结</h2><h3 id="技能方面"><a href="#技能方面" class="headerlink" title="技能方面"></a>技能方面</h3><p>说下接下来技能方面的计划吧</p><p>感觉官方文档还是很重要的，比如上面说的，<code>vue</code> 中双向绑定无效，<code>iview</code> 中的 <code>validator</code> 和 <code>reset</code> 无效等问题，官网其实都有很好的描述。</p><p>所以，再仔细过一遍官方文档，还是很有必要的。</p><p>so，接下来几个要做的：</p><ul><li><strong>vue-loader 官方文档</strong></li><li><strong>vuex 官方文档</strong></li><li><strong>TypeScript</strong> ：放后一步</li></ul><h3 id="接下来的重心"><a href="#接下来的重心" class="headerlink" title="接下来的重心"></a>接下来的重心</h3><p>这个月基本就是在疯狂加班了，没时间做饭，没时间健身，没时间做任何事…</p><p>所以，接下来有几点要改变的：</p><ul><li>减少加班</li><li>学习新技能</li><li>重新开始健身 (今年前5个月打卡了90天，6月到现在2个半月了吧，打卡不到10天….)</li></ul><h3 id="题外话"><a href="#题外话" class="headerlink" title="题外话"></a>题外话</h3><p>公司的椅子坐的好舒服。。。</p><p>本来想买个公司同款的椅子(单买1k多一点)，然后卖家只对公，不卖给个人。。。</p><p>然后 <em>一怒之下</em> ，买个了3k的人体工程学椅子。。。</p><p>emmmm…</p><p>少去两次医院就回本了</p><p>少去三次就赚了</p><p>四次就血赚！！…</p><p>然后，终于可以愉快的在家里加班了！…</p><p>(๑•̀ㅂ•́)و✧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;连续加班1个月了，天天加班10点多，到家11点半，周末也在加班，基本没有哪天是12点以前睡的。明显感觉扛不住了，身体越来越差，一度处于 &lt;strong&gt;猝死的边缘&lt;/strong&gt; …..&lt;/p&gt;&lt;p&gt;好在这个项目终于完成了(其实还没完全结束，还在修bug阶段，然后又被安排去另一个项目了…7天开发时间，1个星期+2个周六，&lt;strong&gt;感觉要猝死了&lt;/strong&gt; …..)&lt;/p&gt;&lt;p&gt;吐槽不要太多&lt;/p&gt;&lt;p&gt;当然，收获也是很多&lt;/p&gt;&lt;p&gt;所以，就总结了一哈….&lt;/p&gt;
    
    </summary>
    
      <category term="日记本" scheme="http://jian2333.github.io/categories/%E6%97%A5%E8%AE%B0%E6%9C%AC/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="vue" scheme="http://jian2333.github.io/tags/vue/"/>
    
      <category term="iview" scheme="http://jian2333.github.io/tags/iview/"/>
    
      <category term="git" scheme="http://jian2333.github.io/tags/git/"/>
    
      <category term="webpack" scheme="http://jian2333.github.io/tags/webpack/"/>
    
      <category term="echarts" scheme="http://jian2333.github.io/tags/echarts/"/>
    
  </entry>
  
  <entry>
    <title>Mac下配置多个Git账户</title>
    <link href="http://jian2333.github.io/2019/07/08/multi-git/"/>
    <id>http://jian2333.github.io/2019/07/08/multi-git/</id>
    <published>2019-07-08T13:30:47.000Z</published>
    <updated>2019-07-12T16:28:41.497Z</updated>
    
    <content type="html"><![CDATA[<p>默认情况下，我们使用 <code>git</code> 都是配置一个全局 <code>user.name</code> 和 <code>user.email</code> ，每次要用时使用该全局参数即可。</p><p>但有时候，我们可能要同时使用多个不同的远程仓库，比如个人用的 <code>github</code> 使用 <code>邮箱a</code> ，公司用的 <code>gitlab/gitea</code> 使用 <code>邮箱b</code> ，等等。</p><p>那么，如何在本地的Mac上配置多个git账户呢。</p><p>我们继续往下看 ～</p><a id="more"></a><p><img src="/images/mg-1.jpg" alt></p><h3 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h3><h4 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h4><p>起因很简单，就是因为自己一直用 <code>github</code> ，然后公司现在用 <code>gitea</code> 。</p><p>然后，邮箱还不一样，也就是 <code>生成的密钥</code> 是不一样的，所以要配置多个 <code>git</code> 账号在一台电脑上。</p><p>然后，就有了本文….</p><h4 id="相关细节"><a href="#相关细节" class="headerlink" title="相关细节"></a>相关细节</h4><p>关于 <strong>一台电脑使用多种类型远程仓库(<code>github</code>、<code>gitlab</code>、<code>gitea</code> 等)是否需要配多个git</strong> ，这里有几个细节需要说明：</p><ul><li>邮箱决定生成的密钥key是否一致；</li><li><code>ssh</code> 连接才需要密钥(配置)，<code>http</code> 连接不需要密钥/邮箱(配置)；</li><li>对于未配置 <code>user.name</code> 和 <code>user.email</code> 的 <code>git</code> 账号，<code>git</code> 提交记录里默认使用当前电脑 <code>登陆的用户名</code> 和 <code>电脑名</code> ；</li></ul><p><strong>所以：</strong></p><ul><li>如果使用 <code>http</code> 类型来 <code>pull</code>、<code>push</code> 代码，<strong>不需要配置！！</strong></li><li>如果多种类型的远程仓库，使用的是同一个邮箱，<strong>也不需要配置！！</strong></li><li>如果需要配置的话，<strong>需要配置每个项目的 <code>user.name</code> 和 <code>user.email</code></strong> ，而 <strong>不能配置全局的 <code>user.name</code> 和 <code>user.email</code></strong> 。</li></ul><h3 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h3><h4 id="清除全局的-user-name-和-user-email"><a href="#清除全局的-user-name-和-user-email" class="headerlink" title="清除全局的 user.name 和 user.email"></a>清除全局的 <code>user.name</code> 和 <code>user.email</code></h4><p>一般情况下，可能之前已使用了以下脚本进行了全局配置：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"xxx"</span>// 配置全局用户名，如github上注册的用户名</span><br><span class="line">git config --global user.email <span class="string">"yyy"</span>// 配置全局邮箱，如github上注册的邮箱</span><br></pre></td></tr></table></figure><p>如果不确定是否已经全局配置，可使用下面的命令进行查看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name</span><br><span class="line">git config --global user.email</span><br></pre></td></tr></table></figure><p>如果已经配置了，先删掉全局配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global --<span class="built_in">unset</span> user.name</span><br><span class="line">git config --global --<span class="built_in">unset</span> user.email</span><br></pre></td></tr></table></figure><h4 id="为每个账号生成一对密钥"><a href="#为每个账号生成一对密钥" class="headerlink" title="为每个账号生成一对密钥"></a>为每个账号生成一对密钥</h4><p>首先进入保存密钥的目录：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> ~/.ssh// 进入目录，该目录下保存生成的密钥</span><br></pre></td></tr></table></figure><p>然后，根据 <code>账号邮箱</code> 生成 <code>密钥</code> 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"xxx@qq.com"</span></span><br></pre></td></tr></table></figure><p>输入完成后，会有如下提示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter file <span class="keyword">in</span> <span class="built_in">which</span> to save the key (/Users/qiu/.ssh/id_rsa):</span><br></pre></td></tr></table></figure><p>这里要求对密钥进行命名。</p><ul><li>默认的文件名是 <code>id_rsa</code> 。</li><li>为了方便区分，我们可以命名为 <code>id_rsa_github</code> 和 <code>id_rsa_gitea</code> ，接下来一直回车，直到密钥生成。</li><li>每次生成的密钥都是成对的，比如 <code>id_rsa_github</code> 和 <code>id_rsa_github.pub</code> 。其中 <code>id_rsa_github</code> 是私钥，是保存在 <code>本地</code> 用来验证服务器的，不能泄露的；<code>id_rsa_github.pub</code> 是公钥，是添加到 <code>托管网站</code> 上的。</li><li><img src="/images/mg-2.jpg" alt></li></ul><h4 id="私钥添加到本地"><a href="#私钥添加到本地" class="headerlink" title="私钥添加到本地"></a>私钥添加到本地</h4><p><code>SSH</code> 协议的原理，就是在托管网站上使用 <code>公钥</code> ，在本地使用 <code>私钥</code> 。这样本地仓库就可以和远程仓库进行通信了。</p><p>上一步已经生成了 <code>密钥文件</code> ，接下来需要使用 <code>密钥文件</code> 。首先是在本地使用 <code>密钥文件</code> ：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_github// 将github私钥添加到本地</span><br><span class="line">ssh-add ~/.ssh/id_rsa_gitea// 将gitea私钥添加到本地</span><br></pre></td></tr></table></figure><p>为了校验本地是否添加成功，可以使用 <code>ssh-add -l</code> 命令进行查看</p><h4 id="对本地密钥进行配置"><a href="#对本地密钥进行配置" class="headerlink" title="对本地密钥进行配置"></a>对本地密钥进行配置</h4><p>由于添加了多个 <code>密钥文件</code> ，所以需要对这多个密钥进行管理。在 <code>.ssh</code> 目录下新建一个 <code>config</code> 文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch config</span><br></pre></td></tr></table></figure><p>文件中的内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Host github.com // 网站的别名，随意取</span><br><span class="line">HostName github.com // 托管网站的域名</span><br><span class="line">User xxx // 托管网站上的用户名</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_github // 使用的密钥文件</span><br><span class="line">Port zz// 可选，端口</span><br><span class="line"></span><br><span class="line">// Gitea的配置相同</span><br><span class="line">Host git.ym</span><br><span class="line">HostName git.ym</span><br><span class="line">User yyy</span><br><span class="line">IdentityFile ~/.ssh/id_rsa_gitea</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><ul><li><code>config</code> 文件中不允许有任何注释，所以 <code>//</code> 注释<strong>请删掉</strong>！</li><li><code>Host</code> 别名是用来替代 <code>HostName</code> 域名的，所以为了使原来的配置继续生效，建议 <strong><code>Host</code> 设置成和 <code>HostName</code> 一样</strong> 。</li></ul><h4 id="公钥添加到托管网站上"><a href="#公钥添加到托管网站上" class="headerlink" title="公钥添加到托管网站上"></a>公钥添加到托管网站上</h4><p>以 <code>github</code> 为例</p><ul><li>先在本地复制公钥。进入 <code>.ssh</code> 目录，复制 <code>id_rsa_github.pub</code> 里的公钥。</li><li>然后登陆 <code>github</code>，添加复制的公钥。</li><li><img src="/images/mg-3.jpg" alt></li></ul><p>可以使用以下命令来测试，是否配置成功：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><h4 id="如果是用远程仓库clone下来"><a href="#如果是用远程仓库clone下来" class="headerlink" title="如果是用远程仓库clone下来"></a>如果是用远程仓库clone下来</h4><p><strong>使用 <code>SSH</code> 协议</strong></p><p><del>也不用任何操作？(不确定，待跟进..)</del></p><p><strong>使用 <code>HTTP</code> 协议</strong></p><p>不需要任何操作，<code>git clone</code> 的时候会要求你输入 <code>user.name</code> 和 <code>user.email</code> 。</p><p><strong>PS：</strong>关于保存密码：</p><ul><li>第一次 <code>git clone</code>、<code>git pull</code>、<code>git push</code> 的时候会要求你输入密码，输入之后可以选择 <strong>永久保存</strong> ，如果之后 <code>github/gitlab/gitea</code> 的账号密码修改了，在进行相应操作时会要求你重新输入密码。</li><li>如果点了取消，以后每次 <code>git pull</code>、<code>git push</code> 都要输入用户名和密码，很麻烦…可以通过以下命令记住密码(仅限 <code>http协议</code> )。</li><li>输入 <code>git config credential.helper store</code> ，输入之后下次 <code>git pull</code>、<code>git push</code> 时会要求输入密码，输入一次后 <code>git</code> 就会一直记住了。</li></ul><h4 id="如果是本地已有的仓库"><a href="#如果是本地已有的仓库" class="headerlink" title="如果是本地已有的仓库"></a>如果是本地已有的仓库</h4><p>需要配置每个仓库的 <code>user.name</code> 和 <code>user.email</code> ：</p><p>进入到对应仓库的目录下。</p><p>执行以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config user.name <span class="string">"xxx"</span></span><br><span class="line">git config user.email <span class="string">"yyy@qq.com"</span></span><br></pre></td></tr></table></figure><p>OK！大功告成 ！</p><hr><p>更新：<code>hexo</code> 中 <code>git</code> 记录正常，但直接部署的脚本 <code>hexo d</code> 异常，该脚本<del>貌似使用全局参数？</del> 就是使用的全局 <code>user.name</code> 和 <code>user.email</code> ….</p><p>关于如何修改 <code>hexo d</code> 使用当前项目的 <code>user.name</code> 和 <code>user.email</code></p><p>参考 <a href="https://github.com/hexojs/hexo/issues/2125" target="_blank" rel="noopener">能否hexo deploy 时指定git账户 #2125</a> 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;默认情况下，我们使用 &lt;code&gt;git&lt;/code&gt; 都是配置一个全局 &lt;code&gt;user.name&lt;/code&gt; 和 &lt;code&gt;user.email&lt;/code&gt; ，每次要用时使用该全局参数即可。&lt;/p&gt;&lt;p&gt;但有时候，我们可能要同时使用多个不同的远程仓库，比如个人用的 &lt;code&gt;github&lt;/code&gt; 使用 &lt;code&gt;邮箱a&lt;/code&gt; ，公司用的 &lt;code&gt;gitlab/gitea&lt;/code&gt; 使用 &lt;code&gt;邮箱b&lt;/code&gt; ，等等。&lt;/p&gt;&lt;p&gt;那么，如何在本地的Mac上配置多个git账户呢。&lt;/p&gt;&lt;p&gt;我们继续往下看 ～&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="git" scheme="http://jian2333.github.io/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>重排重绘 与性能优化</title>
    <link href="http://jian2333.github.io/2019/06/23/reflow-repaint/"/>
    <id>http://jian2333.github.io/2019/06/23/reflow-repaint/</id>
    <published>2019-06-23T06:46:43.000Z</published>
    <updated>2019-07-08T15:51:14.392Z</updated>
    
    <content type="html"><![CDATA[<p>性能优化是个老生常谈的话题了，重排重绘也是性能优化的一种。</p><p>减少或避免重排重绘，能有效地提升浏览器性能。</p><p>那么，如何减少或避免重排重绘呢？</p><p>本文将从 <code>css</code> 和 <code>js</code> 两个角度来分析 ～</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="/images/rr-1.jpg" alt></p><h4 id="重排"><a href="#重排" class="headerlink" title="重排"></a>重排</h4><ul><li>重排又叫 <code>reflow</code> ，指的是为了重新渲染部分或整个页面，重新计算页面元素的 <strong>位置</strong> 和 <strong>几何结构</strong> 的进程。</li><li>简单来说，就是当元素改变的时候，将会影响文档内容或结构，或元素位置，此过程叫做 <code>reflow</code> 。</li><li><code>reflow</code> 是导致 <code>DOM脚本</code> 执行效率低下的关键因素之一。页面上任何一个节点触发了 <code>reflow</code> ，都会导致它的 <strong>子节点</strong> 和 <strong>祖先节点</strong> 重新渲染。</li></ul><p><strong>那么，什么时候会导致 reflow 发生呢</strong></p><ul><li>改变窗口大小</li><li>改变文字大小</li><li>添加/删除样式表</li><li>内容的改变，（用户在输入框中输入内容也会）</li><li>激活伪类，如 <code>:hover</code></li><li>操作 <code>class</code> 属性</li><li>脚本操作 <code>DOM</code></li><li>计算 <code>offsetWidth</code> 和 <code>offsetHeight</code></li><li>设置 <code>style</code> 属性</li></ul><table><thead><tr><th>常见的重排元素</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>width</td><td>height</td><td>padding</td><td>margin</td></tr><tr><td>display</td><td>border-width</td><td>border</td><td>top</td></tr><tr><td>position</td><td>font-size</td><td>float</td><td>bottom</td></tr><tr><td>overflow-y</td><td>font-weight</td><td>over</td><td>left</td></tr><tr><td>font-family</td><td>line-height</td><td>vertical-align</td><td>right</td></tr><tr><td>clear</td><td>white-space</td><td>text-align</td><td>min-height</td></tr></tbody></table><h4 id="重绘"><a href="#重绘" class="headerlink" title="重绘"></a>重绘</h4><ul><li>重绘又叫 <code>repaint</code> ，指的是当元素改变时，将不会影响元素在当前页面中的位置（比如 <code>background-color</code>，<code>border-color</code>，<code>visibility</code>），而仅仅会应用新的样式重绘此元素的过程。</li></ul><p><strong>那么，什么时候会发生 repaint 呢</strong></p><table><thead><tr><th>常见的重绘元素</th><th></th><th></th><th></th></tr></thead><tbody><tr><td>color</td><td>border-style</td><td>visibility</td><td>background</td></tr><tr><td>text-decoration</td><td>background-image</td><td>background-position</td><td>background-repeat</td></tr><tr><td>outline-color</td><td>outline</td><td>outline-style</td><td>border-radius</td></tr><tr><td>outline-width</td><td>box-shadow</td><td>background-size</td></tr></tbody></table><h3 id="js方面的优化"><a href="#js方面的优化" class="headerlink" title="js方面的优化"></a>js方面的优化</h3><p>js方面主要是从 <code>DOM</code> 角度来优化重排重绘。包括以下几方面：</p><ul><li>文档片段</li><li>使用 <code>innerHTML</code></li><li>服务端渲染</li><li>使用事件代理</li><li>减少 <code>HTMLCollection</code> 访问</li><li>尽量不修改影响比较大的 <code>DOM</code></li><li>函数节流</li></ul><p><strong>文档片段</strong></p><ul><li><p>在多次操作 <code>DOM</code> 时，比如给一个 <code>&lt;ul&gt;</code> 元素添加多个 <code>&lt;li&gt;</code> 时，每添加一次 <code>&lt;li&gt;</code> 都会进行一次 <code>现场更新(即reflow)</code> 。</p></li><li><p>使用 <code>文档片段</code> 的话，只会进行一次 <code>现场更新(reflow)</code> 。</p></li><li><p>使用 <code>appendChild()</code> 时，只有 <code>文档片段</code> 的 <code>子节点</code> 会添加到目标，<code>文档片段</code> 本身不会被添加到目标。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>),</span><br><span class="line">    fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">    item,</span><br><span class="line">    i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">'li'</span>);</span><br><span class="line">  fragment.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">'item'</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">list.appendChild(fragment);</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用 innerHTML</strong></p><ul><li><p>先拼接好要渲染的 <code>html字符串</code> 。</p></li><li><p>然后使用 <code>innerHTML</code> 进行一次渲染。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'myList'</span>),</span><br><span class="line">    html = <span class="string">''</span>,</span><br><span class="line">    i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  html += <span class="string">'&lt;li&gt;item'</span> + i + <span class="string">'&lt;/li&gt;/br'</span>;</span><br><span class="line">&#125;</span><br><span class="line">list.innerHTML = html;</span><br></pre></td></tr></table></figure></li></ul><p><strong>服务端渲染</strong></p><ul><li>和 <strong>使用 innerHTML</strong> 类似，只是服务端会返回 <strong>拼接好的 html字符串</strong> ，而不需要前端拼接 <code>html字符串</code> 了。</li><li>然后直接使用 <code>innerHTML</code> 进行一次渲染即可。</li></ul><p><strong>使用事件代理</strong></p><ul><li>《JavaScript 高级程序设计》P675。</li><li>页面上的 <code>事件处理程序的数量</code> 和 <code>页面响应用户交互的速度</code> 呈负相关。所以，如果减少 <code>事件处理程序的数量</code> ，那 <code>响应速度</code> 将会更快。</li><li>对于同一个事件，可以在 <code>对应DOM</code> 上定义，也可以在 <code>父元素</code> 上定义一大片事件，后者则是事件代理。</li></ul><p><strong>减少 HTMLCollection 访问</strong></p><ul><li><p>任何时候访问 <code>HTMLCollection</code> 都很耗资源。</p></li><li><p>所以可以把要访问的 <code>HTMLCollectionp[i]</code> 存放到一个变量里，之后要用时直接访问变量。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'img'</span>),</span><br><span class="line">    image,</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>,len=images.length;i&lt;len;i++) &#123;</span><br><span class="line">  image = images[i];</span><br><span class="line">  <span class="comment">// 一些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>尽量不修改影响比较大的 DOM</strong></p><ul><li>尽可能限制 <code>reflow</code> 的影响范围，尽可能在低层级的 <code>DOM</code> 上进行操作。</li></ul><p><strong>函数节流</strong></p><ul><li><p><code>函数节流</code> 的基本思想是，不能在没有间断的情况下(比如 <code>onresize</code>)连续重复执行某些代码，因为这可能导致浏览器崩溃。</p></li><li><p>实现过程：第一次调用函数时，会创建一个 <strong>定时器</strong> ，在指定的时间间隔之后再执行代码；第二次调用该函数时，会先清除前一次的 <strong>定时器</strong> 并 <strong>设置另一个</strong> 。</p></li><li><p>目的是 只有在执行函数的请求停止了一段时间后才执行(新函数) 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未使用函数节流</span></span><br><span class="line"><span class="comment">// 频繁的更新DOM，可能导致浏览器崩溃</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用函数节流</span></span><br><span class="line"><span class="comment">// 只有前面函数停止一段时间后，才会执行第二个函数</span></span><br><span class="line"><span class="comment">// 提高了性能</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">  clearTimeout(method.Id);</span><br><span class="line">  method.Id = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'myDiv'</span>);</span><br><span class="line">  div.style.height = div.offsetHeight + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  throttle(resizeDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="css方面的优化"><a href="#css方面的优化" class="headerlink" title="css方面的优化"></a>css方面的优化</h3><p><code>css</code> 方面的优化主要是指 <code>非DOM</code> 方面的优化。包括以下几方面：</p><ul><li>尽量使用 <code>className</code> 来一次修改样式，而不是高频的每次只修改一条样式。</li><li>多次修改 <code>DOM</code> 样式时，可以使用 <code>先改成display:none --&gt; 修改n次样式 --&gt; 最后改成display:xxx</code> 。</li><li>为动画的元素使用绝对定位 <code>absolute</code> 或 <code>fixed</code> ，减少附近元素的重排重绘。</li><li>尽量少使用 <code>table</code> 。因为 <code>table</code> 一个单元格样式的改变，会导致整个 <code>table</code> 重排重绘，性能消耗巨大。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;性能优化是个老生常谈的话题了，重排重绘也是性能优化的一种。&lt;/p&gt;&lt;p&gt;减少或避免重排重绘，能有效地提升浏览器性能。&lt;/p&gt;&lt;p&gt;那么，如何减少或避免重排重绘呢？&lt;/p&gt;&lt;p&gt;本文将从 &lt;code&gt;css&lt;/code&gt; 和 &lt;code&gt;js&lt;/code&gt; 两个角度来分析 ～&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
      <category term="性能优化" scheme="http://jian2333.github.io/tags/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>水平、垂直和完全居中</title>
    <link href="http://jian2333.github.io/2019/06/22/centered/"/>
    <id>http://jian2333.github.io/2019/06/22/centered/</id>
    <published>2019-06-22T09:20:23.000Z</published>
    <updated>2019-06-22T16:43:58.386Z</updated>
    
    <content type="html"><![CDATA[<p>之前也总结过很多居中方法，但都没有写下来（对，我就是懒，加个书签就完事了…..）..</p><p><del>然后吧</del> 没有然后，每次要看的时候就很麻烦</p><p>再然后吧，还是决定写下来好了…</p><p>╮(╯▽╰)╭</p><p>所以，本文将总结几种常用的水平、垂直和完全居中方法</p><p>ok，正文开始！</p><a id="more"></a><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>本文将介绍几种常用的水平、垂直和完全居中方法。</p><p>主要方法有：<code>3种绝对定位</code>、<code>flex</code>、<code>table</code>、<code>伪元素::after</code> 等方法。</p><p><img src="/images/ct-1.jpg" alt></p><p>后面的例子都以此 <code>html</code> 为样本。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"parent"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"centered"</span>&gt;</span></span><br><span class="line">    我是居中文字</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>提示：</strong> <code>绝对定位+负margin</code>、<code>只使用绝对定位</code> 和 <code>绝对定位+transform</code> 对应的9种居中里，有7种 <code>position</code> 值可以是下面任意一种组合。</p><ul><li>父元素为 <code>position: relative</code> ，子元素为 <code>position: absolute</code> 。</li><li>父元素默认 <code>position</code> ，子元素为 <code>position:relative</code> 。</li><li>剩下 <code>只使用绝对定位(垂直居中)</code> 和 <code>只使用绝对定位(完全居中)</code> 两种，<code>position</code> 只能使用 <code>relative + absolute</code> 的第一种方式。</li></ul><h3 id="水平居中"><a href="#水平居中" class="headerlink" title="水平居中"></a>水平居中</h3><p><strong>内联元素</strong></p><ul><li><p><code>内联元素</code> 直接使用 <code>text-align: center</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模拟table</strong></p><ul><li><p><code>区块元素</code> 模拟成 <code>table</code> ，然后使用 <code>text-align: center</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>flex</strong></p><ul><li><p><code>任何元素</code> 改成 <code>弹性盒子</code> 类型，然后使用 <code>justify-content: center</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位+负margin</strong></p><ul><li><p><strong>设置子元素：</strong>使用 <code>left: 50%</code> 定位到父元素水平中心，然后 <code>margin-left: -xpx</code> 向左偏移子元素 <strong>宽的一半</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;<span class="comment">/* 100px的一半 */</span></span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>只使用绝对定位</strong></p><ul><li><p><strong>设置子元素</strong> <code>left: 0</code> ，<code>right: 0</code> 和 <code>margin: x auto</code> 来实现水平方向居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;<span class="comment">/* 不确定 */</span></span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位+translateX</strong></p><ul><li><p><strong>设置子元素：</strong> 使用 <code>left: 50%</code> 定位到父元素的水平中心，然后 <code>transform: translateX(-50%)</code> 向左偏移子元素 <strong>宽的一半</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-50%);</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="垂直居中"><a href="#垂直居中" class="headerlink" title="垂直居中"></a>垂直居中</h3><p><strong>单行+行高固定</strong></p><ul><li><p>设置 <code>line-height</code> 等于 <code>height</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>行高不固定</strong></p><ul><li><p>设置上下 <code>padding</code> 相等。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span></span><br><span class="line">  padding: <span class="number">40px</span>;  <span class="comment">/* 水平方向不能使用auto，即使我们只想设置垂直方向的padding */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>伪元素::before（推荐，技巧）</strong></p><ul><li><p>利用父元素的 <code>vertical-align: middle</code> 属性来实现垂直居中。</p></li><li><p><code>vertical-align</code> 适用于 <code>内联元素</code> ，所以子元素要设置成 <code>display:inline</code> 或 <code>display:inline-block</code> 。</p></li><li><p><code>vertical-align</code> 是相对 <strong>所有子元素垂直居中</strong>，如果有一个子元素的高度为 100%，那就会 <strong>相对父元素垂直居中</strong> 了 。所以，我们可以添加一个高度为100%的伪元素来达到这种效果。</p><p><img src="/images/ct-2.jpg" alt></p><p><img src="/images/ct-3.jpg" alt></p></li><li><p>实现代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> soild pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span>: &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#ccc</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模拟table</strong></p><ul><li><p>把元素模拟成 <code>table</code> ，然后使用 <code>vertical-align: middle</code> 来实现垂直居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>transform</strong></p><ul><li><p>和 <code>水平居中</code> 类似，只是改成垂直方向。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateY</span>(-50%);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>flex</strong></p><ul><li><p>利用 <code>align-items: center</code> 来实现 <code>垂直居中</code> 。</p></li><li><p><code>align-self</code> 也可以 <code>垂直居中</code> 。区别是 <code>align-items</code> 设置在 <code>弹性容器</code> 上，<code>align-self</code> 设置在 <code>弹性子元素</code> 上。</p></li><li><p><code>align-content</code> 也可以达到 <code>垂直居中</code> 的效果，但是必须设置 <code>flex-wrap: wrap</code> 或 <code>flex-flow: xx wrap</code> （<code>wrap-reverse</code> 也可）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位</strong></p><ul><li><p>和 <code>水平居中</code> 类似，分为 <code>绝对定位+负margin</code>、<code>只使用绝对定位</code> 和 <code>绝对定位+translateY</code> 三种。</p></li><li><p>最后一种在上面 <code>transform</code> 已经介绍过了，这里只介绍前面两种。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment">绝对定位+负margin</span></span><br><span class="line"><span class="comment">适用于 高度确定 的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30px</span>;<span class="comment">/* 60px的一半 */</span></span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">只使用绝对定位</span></span><br><span class="line"><span class="comment">适用于 高度不确定 的情况</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;<span class="comment">/* 不确定 */</span></span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="完全居中"><a href="#完全居中" class="headerlink" title="完全居中"></a>完全居中</h3><p><code>完全居中</code> 就是把 <code>水平居中</code> 和 <code>垂直居中</code> 组合起来，使用的大部分方法前面都已经介绍过了。</p><h4 id="元素高度确定"><a href="#元素高度确定" class="headerlink" title="元素高度确定"></a>元素高度确定</h4><p><strong>绝对定位+负margin</strong></p><ul><li><p>使用 <code>left: 50%</code> 和 <code>top: 50%</code> 定位到父元素的完全中心，然后使用 <code>margin-left:-xpx</code> 和 <code>margin-top: -ypx</code> 来水平和垂直偏移子元素 <strong>一半的宽高</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">30px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="元素高度不确定"><a href="#元素高度不确定" class="headerlink" title="元素高度不确定"></a>元素高度不确定</h4><p><strong>只使用绝对定位</strong></p><ul><li><p>使用 <code>left: 0</code>、<code>top: 0</code>、<code>right:0</code>、<code>bottom: 0</code> 和 <code>margin: auto</code> 来设置成 <code>完全居中</code> 。</p></li><li><p><code>position</code> 只能使用 <code>relative + absolute</code> 这种。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>绝对定位+translate</strong></p><ul><li><p>使用 <code>left: 50%</code> 和 <code>top: 50%</code> 来定位到父元素的完全中心，然后使用 <code>transform: translate(-50%, -50%)</code> 向左上偏移子元素 <strong>宽高的一半</strong> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-%50, -50%);</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>模拟table</strong></p><ul><li><p>模拟成 <code>table</code> ，然后使用 <code>text-align: center</code> 和 <code>vertical-align: middle</code> 来达到 <code>完全居中</code> 。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: table;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>伪元素::before（推荐，技巧）</strong></p><ul><li><p>水平方向使用 <code>dispaly:inline-block</code> 和 <code>text-align: center</code> 来实现。</p></li><li><p>垂直方向使用 <code>::before</code> 伪元素来实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.parent</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">''</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>flex</strong></p><ul><li><p>使用 <code>justify-content: center</code> 来水平居中。</p></li><li><p>使用 <code>align-items: center</code> 来垂直居中。</p></li><li><p><code>align-self</code> 和 <code>align-content</code> 也可用来垂直居中，只是前者要使用在 <code>弹性子容器</code> 上，后者要添加 <code>flex-wrap: wrap</code> （或相关）。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.parent</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">400px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid pink;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.centered</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前也总结过很多居中方法，但都没有写下来（对，我就是懒，加个书签就完事了…..）..&lt;/p&gt;&lt;p&gt;&lt;del&gt;然后吧&lt;/del&gt; 没有然后，每次要看的时候就很麻烦&lt;/p&gt;&lt;p&gt;再然后吧，还是决定写下来好了…&lt;/p&gt;&lt;p&gt;╮(╯▽╰)╭&lt;/p&gt;&lt;p&gt;所以，本文将总结几种常用的水平、垂直和完全居中方法&lt;/p&gt;&lt;p&gt;ok，正文开始！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>初识 webpack</title>
    <link href="http://jian2333.github.io/2019/06/16/webpack/"/>
    <id>http://jian2333.github.io/2019/06/16/webpack/</id>
    <published>2019-06-16T13:22:50.000Z</published>
    <updated>2019-06-16T16:28:24.737Z</updated>
    
    <content type="html"><![CDATA[<p>webpack 是一个现代 JavaScript 应用程序的静态模块打包器。</p><p>当使用 webpack 打包时，webpack 会从一个或多个入口处，递归地构建一个 <code>依赖关系图(dependency graph)</code> ，其中包含应用程序所需要的所有模块，然后打包成一个或多个 <code>bundle</code> 文件。</p><p>webpack 可以打包 <code>js</code>、<code>css</code>、<code>sass</code>、<code>less</code> 、<code>typescript</code>、<code>图片</code> 等文件，默认只能打包 <code>js</code> 格式的文件，其他格式的文件需要加载 <code>loader</code> 后再打包。</p><p>编写本文的时候，webpack 的最新版为 <code>v4.34.0</code> 。</p><a id="more"></a><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>webpack 可使用 <code>终端/命令行</code> 来执行，当然，webpack 还是 <strong>高度可配置的</strong> 。</p><p>webpack 有以下四个 <strong>核心概念</strong> ：</p><ul><li>入口(entry)</li><li>输出(output)</li><li>loader</li><li>插件(plugins)</li></ul><p><strong>入口(entry)</strong></p><ul><li><p>webpack 打包时的入口；</p></li><li><p>可以有一个或多个入口；</p></li><li><p>入口会依赖其他文件，webpack 会以此为依据，进而找到其他依赖的文件和关系，然后一起打包成一个或多个 <code>bundle.js</code> 文件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/main.js'</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>出口(output)</strong></p><ul><li><p>用于描述打包后的 <code>bundle.js</code> 文件的存放路径和命名规则，默认值为 <code>./dist</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  entry: <span class="string">'./app/main.js'</span>,</span><br><span class="line">  output: &#123;</span><br><span class="line">    path: path.resolve(__dirname, <span class="string">'public'</span>),</span><br><span class="line">    <span class="comment">// 等效于 path: __dirname + '/public',</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// __dirname 是node.js的一个全局变量，表示当前执行脚本所在的目录</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>loader</strong></p><ul><li><p><code>loader</code> 能够让 webpack 打包那些 <code>非javascript</code> 文件；</p></li><li><p><code>loader</code> 需要单独安装并在 <code>webpack.config.js</code> 中的 <code>modules</code> 关键字下进行配置，<code>loader</code> 的配置包括以下几个方面：</p><ul><li><code>test</code> ：一个用以匹配 <code>loader</code> 所处理文件的扩展名的正则表达式(必须) ；</li><li><del><code>loader</code></del> <code>use</code> ：<code>loader</code> 的名称(必须) ；</li><li><del><code>include/exclude</code> ：手动添加必须处理的文件(文件夹) 或屏蔽不需处理的文件(文件夹) ；</del></li><li><del><code>query</code> ：为 <code>loader</code> 提供额外的处理选项 ；</del></li></ul></li><li><p><a href="https://www.webpackjs.com/concepts/loaders/" target="_blank" rel="noopener">更多信息</a> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.css/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>: <span class="regexp">/\.ts/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>插件(plugins)</strong></p><ul><li><p><code>loader</code> 被用来转换某些类型的模块，而插件则用来执行范围更广的任务；</p></li><li><p>插件的范围包括：打包、优化、压缩、重新定义环境中的变量等其他功能；</p></li><li><p>插件的使用和 <code>loader</code> 类似，先使用 <code>npm</code> 安装，然后在 <code>webpack.config.js</code> 中的 <code>plugins</code> 关键字下添加该插件的一个实例( <code>plugins</code> 是一个数组 )。</p></li><li><p><a href="https://www.webpackjs.com/concepts/plugins/" target="_blank" rel="noopener">更多信息</a> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="built_in">module</span>: &#123;</span><br><span class="line">    rules: [</span><br><span class="line">      &#123; <span class="attr">test</span>:<span class="regexp">/\.css/</span>, <span class="attr">use</span>: <span class="string">'css-loader'</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">test</span>:<span class="regexp">/\.ts/</span>, <span class="attr">use</span>: <span class="string">'ts-loader'</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="keyword">new</span> webpack.optimize.UglifyJsPlugin(),</span><br><span class="line">    <span class="keyword">new</span> HtmlWebpackPlugin(&#123; <span class="attr">template</span>: <span class="string">'./src/index.html'</span> &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><h3 id="其他要点"><a href="#其他要点" class="headerlink" title="其他要点"></a>其他要点</h3><p><strong>webpack 可配置的</strong></p><ul><li><p>可使用 <code>终端/命令行</code> 来执行 webpack，也可配置好 <code>webpack.config.js</code>，然后直接使用 <code>webpack</code> 命令；</p></li><li><p>全局安装的使用 <code>webpack</code> 命令，非全局安装的使用 <code>node_modules/.bin/webpack</code> 命令；</p></li><li><p>这个命令会自动引用 <code>webpack.config.js</code> 文件中的配置选项；</p></li><li><p>如果没有 <code>webpack.config.js</code> 配置文件，也可使用下面的命令来打包；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 未配置 webpack.config.js</span><br><span class="line">// npx webpack &#123;入口&#125; -o &#123;出口&#125;</span><br><span class="line">npx webpack app/main.js -o public/bundle.js</span><br><span class="line"></span><br><span class="line">// 已配置 webpack.config.js，未配置 package.json</span><br><span class="line">npx webpack --config webpack.config.js</span><br><span class="line">npx webpack</span><br><span class="line">webpack</span><br><span class="line"></span><br><span class="line">// 已配置 webpack.config.js，已配置 package.json</span><br><span class="line">npm start</span><br></pre></td></tr></table></figure></li></ul><p><strong>script 脚本命令</strong></p><ul><li><p>命令配置在 <code>package.json</code> 中的 <code>scripts</code> 关键字中；</p></li><li><p><code>start</code> 是 特殊的脚本命令，使用 <code>npm start</code> 即可，其他脚本 <code>xx</code> ，则需使用 <code>npm run xx</code> 来执行，比如 <code>npm run build</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"webpackdemo1"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="string">"description"</span>: <span class="string">"webpack sample project"</span>,</span><br><span class="line">  <span class="string">"private"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">    <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="string">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="string">"devDependencies"</span>: &#123;</span><br><span class="line">    <span class="string">"webpack"</span>: <span class="string">"^4.34.0"</span>,</span><br><span class="line">    <span class="string">"webpack-cli"</span>: <span class="string">"^3.3.4"</span>,</span><br><span class="line">    <span class="string">"webpack-dev-server"</span>: <span class="string">"^3.7.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/wp-1.jpg" alt></p></li></ul><p><strong>生成 Source Maps （使调试更容易）</strong></p><ul><li><p><code>source maps</code> 提供了一种对应编译文件和源文件的方法，使编译后的代码可读性更高，更容易调试；</p></li><li><p>在 <code>webpack.config.js</code> 中的 <code>devtool</code> 关键字添加 <code>devtool</code> 选项即可，一般使用 <code>source-map</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  devtool: <span class="string">"source-map"</span>,</span><br><span class="line">  entry: __dirname + <span class="string">'/app/main.js'</span>,  <span class="comment">// 已多次提到的唯一入口文件</span></span><br><span class="line">  output: &#123;</span><br><span class="line">    path: __dirname + <span class="string">'/public'</span>,    <span class="comment">// 打包后文件存放的路径</span></span><br><span class="line">    filename: <span class="string">'bundle.js'</span>   <span class="comment">// 打包后输出的文件名称</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li><li><p><a href="https://www.webpackjs.com/configuration/devtool/" target="_blank" rel="noopener">更多信息</a> ；</p></li></ul><p><strong>webpack 构建本地服务器（支持 模块热替换）</strong></p><ul><li><p>webpack 可构建本地服务器，然后可配置一系列相关的设置；</p></li><li><p>本地服务器支持 <strong>模块热替换</strong> 功能，即修改 JS 代码后，浏览器会自动刷新页面；</p></li><li><p>使用方法：</p><ul><li><p>安装 <code>webpack-dev-server</code> 组件；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev webpack-decv-server</span><br></pre></td></tr></table></figure></li><li><p>在 <code>webpack.config.js</code> 中的 <code>devServer</code> 关键字中进行配置；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: <span class="string">'./public'</span>,<span class="comment">// 本地服务器所加载的页面所在的目录</span></span><br><span class="line">    historyApiFallback: <span class="literal">true</span>,<span class="comment">// 不跳转</span></span><br><span class="line">    inline: <span class="literal">true</span><span class="comment">// 实时刷新</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>package.json</code> 中的 <code>scripts</code> 中添加对应的命令( <code>server</code> 命令 )；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在 <code>终端/命令行</code> 输入 <code>npm run server</code> 即可启动服务器；</p><p><img src="/images/wp-2.jpg" alt></p></li></ul></li><li><p>更多信息：</p><ul><li><a href="https://segmentfault.com/a/1190000006178770#articleHeader3" target="_blank" rel="noopener">使用webpack构建本地服务器</a></li><li><a href="https://www.webpackjs.com/guides/development/#使用-webpack-dev-server" target="_blank" rel="noopener">使用 webpack-dev-server</a></li></ul></li></ul><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><strong>新建项目</strong></p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir webpackdemo</span><br><span class="line"><span class="built_in">cd</span> webpackdemo</span><br><span class="line">npm init</span><br></pre></td></tr></table></figure></li></ul><p><strong>安装 webpack 和 webpack-cli</strong></p><ul><li><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install webpack webpack-cli --save-dev</span><br></pre></td></tr></table></figure></li></ul><p><strong>配置 webpack</strong></p><ul><li><p>新建 <code>app</code> 文件夹，用来存放 <code>js</code> 源文件；</p></li><li><p>新建 <code>public</code> 文件夹，用来存放 <code>html</code> 文件和打包生成的 <code>bundle.js</code> 文件；</p></li><li><p>当前项目结构如下：</p><p><img src="/images/wp-3.jpg" alt></p></li><li><p>配置 webpack 的 入口和出口，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devtool: <span class="string">"source-map"</span>,</span><br><span class="line">    entry: __dirname + <span class="string">'/app/main.js'</span>,  <span class="comment">// 已多次提到的唯一入口文件</span></span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + <span class="string">'/public'</span>,    <span class="comment">// 打包后文件存放的路径</span></span><br><span class="line">        filename: <span class="string">'bundle.js'</span>   <span class="comment">// 打包后输出的文件名称</span></span><br><span class="line">    &#125;,</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        contentBase: <span class="string">'./public'</span>,    <span class="comment">// 本地服务器所加载的页面所在的目录</span></span><br><span class="line">        historyApiFallback: <span class="literal">false</span>,   <span class="comment">// 不跳转</span></span><br><span class="line">        inline: <span class="literal">true</span>    <span class="comment">// 实时刷新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>配置 script 命令</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">  <span class="string">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>,</span><br><span class="line">  <span class="string">"start"</span>: <span class="string">"webpack"</span>,</span><br><span class="line">  <span class="string">"server"</span>: <span class="string">"webpack-dev-server --open"</span></span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure></li></ul><p><strong>编写代码</strong></p><ul><li><p>在 <code>/app</code> 文件夹中添加 <code>Greeter.js</code> 和 <code>main.js</code> 文件；</p></li><li><p>在 <code>/public</code> 文件夹中添加 <code>index.html</code> 文件；</p></li><li><p>文件内容分别如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Greetet.js</span></span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> greet = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    greet.textContent = <span class="string">"Hi there are greetings!"</span>;</span><br><span class="line">    <span class="keyword">return</span> greet;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js 入口文件</span></span><br><span class="line"><span class="keyword">const</span> greeter = <span class="built_in">require</span>(<span class="string">'./Greeter'</span>);</span><br><span class="line"><span class="built_in">document</span>.querySelector(<span class="string">'#root'</span>).appendChild(greeter());</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Webpack Sample Project<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"root"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"bundle.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>运行</strong></p><ul><li><p>打包生成 <code>bundle.js</code> 文件；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm start</span><br></pre></td></tr></table></figure></li><li><p>启动服务器；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure></li></ul><h3 id="推荐文章"><a href="#推荐文章" class="headerlink" title="推荐文章"></a>推荐文章</h3><p><a href="https://www.webpackjs.com/concepts/" target="_blank" rel="noopener">1. [推荐]官方文档</a></p><p><a href="https://segmentfault.com/a/1190000006178770#articleHeader5" target="_blank" rel="noopener">2. [版本较旧]入门Webpack，看这篇就够了</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;webpack 是一个现代 JavaScript 应用程序的静态模块打包器。&lt;/p&gt;&lt;p&gt;当使用 webpack 打包时，webpack 会从一个或多个入口处，递归地构建一个 &lt;code&gt;依赖关系图(dependency graph)&lt;/code&gt; ，其中包含应用程序所需要的所有模块，然后打包成一个或多个 &lt;code&gt;bundle&lt;/code&gt; 文件。&lt;/p&gt;&lt;p&gt;webpack 可以打包 &lt;code&gt;js&lt;/code&gt;、&lt;code&gt;css&lt;/code&gt;、&lt;code&gt;sass&lt;/code&gt;、&lt;code&gt;less&lt;/code&gt; 、&lt;code&gt;typescript&lt;/code&gt;、&lt;code&gt;图片&lt;/code&gt; 等文件，默认只能打包 &lt;code&gt;js&lt;/code&gt; 格式的文件，其他格式的文件需要加载 &lt;code&gt;loader&lt;/code&gt; 后再打包。&lt;/p&gt;&lt;p&gt;编写本文的时候，webpack 的最新版为 &lt;code&gt;v4.34.0&lt;/code&gt; 。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="webpack" scheme="http://jian2333.github.io/tags/webpack/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Promise 相关简介</title>
    <link href="http://jian2333.github.io/2019/06/14/promise/"/>
    <id>http://jian2333.github.io/2019/06/14/promise/</id>
    <published>2019-06-14T12:30:25.000Z</published>
    <updated>2021-03-02T09:04:43.609Z</updated>
    
    <content type="html"><![CDATA[<p><code>promise</code> 是 <code>ECMAScript6</code> 新加的一个概念。</p><p>本文将使用简洁的文字介绍 <code>promise</code> ，仅介绍大概情况。</p><p>更多详情请参考结尾的推荐文章。</p><p>好了，正文开始 ！</p><a id="more"></a><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p><code>Promise</code> 是抽象 <code>异步操作</code> 对象以及对其进行一系列操作的组件。</p><p><code>Promise</code> 最大的功能是把 <code>异步操作</code> 变为 <code>同步操作</code> 。即只有 <code>异步操作</code> 完成后，才进行后面的操作。</p><p><code>Promise</code> 定义了一组 <code>上述操作</code> 相关的接口和方法，直接使用即可。</p><p><strong>Promise 状态</strong></p><p>使用 <code>new promise</code> 实例化的 <code>promise对象</code> 有以下三个状态：</p><p><strong>Fulfilled</strong></p><p><code>resolve(成功)</code> 时，此时会调用 <code>onFulfilled</code> 。</p><p><strong>Rejected</strong></p><p><code>reject(失败)</code> 时，此时会调用 <code>onRejected</code> 。</p><p><strong>Pending</strong></p><p>既不是 <code>resolve</code> 也不是 <code>reject</code> 状态，也就是 <code>promise</code> 对象刚被创建后的初始化状态。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p><strong>创建 promise 实例</strong></p><p>创建实例有三种方法：</p><ul><li><p><code>new Promise()</code> ；</p></li><li><p><code>Promise.resolve</code> ；</p></li><li><p><code>Promise.reject</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">'11'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'22'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="built_in">Promise</span>.resolve(<span class="string">'1'</span>);</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法3 </span></span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="built_in">Promise</span>.reject(<span class="string">'2'</span>);</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">null, reject</span>) </span>&#123;</span><br><span class="line">  reject(<span class="string">'2'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>resolve</strong></p><ul><li><code>Promise.resolve</code> ：创建实例；</li><li>返回 <code>promise</code> 对象，主要分下面3种情况：<ul><li>接收参数为 <code>promise</code> 对象：返回的还是接收到的 <code>promise</code> 对象；</li><li>接收参数为 <code>thenable</code> 类型的对象：返回一个新的 <code>promise</code> 对象，这个对象有具有一个 <code>.then</code> 方法。更多 <code>thenable</code> 的信息，<a href="http://liubin.org/promises-book/#ch2-promise-resolve" target="_blank" rel="noopener">点我查看</a> ；</li><li>接收参数为 <code>其他类型</code> ：返回一个将该对象作为值的新的 <code>promise</code> 对象；</li></ul></li></ul><p><strong>reject</strong></p><ul><li><code>Promise.reject</code> ：创建实例；</li><li>返回一个使用了接收到的值进行了 <code>reject</code> 的新的 <code>promise</code> 对象；</li><li>传给 <code>Promise.reject</code> 的值应该是一个 <code>Error</code> 类型的对象；</li><li>另外，和 <code>Promise.resolve</code> 不同的是，即使 <code>Project.reject</code> 接收的是一个 <code>promise</code> 对象，该函数也还是会返回一个全新的 <code>promise</code> 对象；</li></ul><p><strong>then</strong></p><ul><li><p><code>promise.then</code> ：<code>promise</code> 中最常用的方法；</p></li><li><p>在 <code>promise</code> 对象变为 <code>resolve</code> 或 <code>reject</code> 后，执行相应的回调函数；</p></li><li><p><code>then</code> 中 <code>return</code> 的值，作为参数传入 <code>链式方法</code> 里的下一个方法；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'11'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)<span class="comment">// 11</span></span><br><span class="line">&#125;, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 链式调用 return 的值作为下一个方法的参数</span></span><br><span class="line"><span class="comment">// 见后面 链式方法</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>catch</strong></p><ul><li><p><code>promise.catch</code> ：处理异常的方法，和 <code>reject</code> 类似；</p></li><li><p>包含 <code>promise</code> 对象变为 <code>reject</code> 、手动 <code>throw new Error()</code> 、<code>系统抛出异常</code> 三种情况；</p></li><li><p>推荐使用 <code>catch</code> ，因为对于 <code>then(f1,f2).catch()</code> 这种情况，如果 <code>f1</code> 抛出异常，<code>f2</code> 是捕获不了的，链式方法后面的 <code>catch</code> 才能捕获到，或者改成 <code>then(f1,f2).then(null,f3)</code> 这样，<code>f3</code> 也能捕获到；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 常规用法</span></span><br><span class="line"><span class="keyword">var</span> promise = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"BOOM!"</span>));</span><br><span class="line">promise.catch(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// Error: BOOM!</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等效于 reject</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 等效于下面的写法，推荐用下面的写法</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推荐用 catch 的原因： reject 和 catch 都只能捕获上一级的错误</span></span><br><span class="line"><span class="comment">// 如果用 reject 的话，同级的 resolve 中抛出异常的话，reject 就不能捕获了</span></span><br><span class="line"><span class="comment">// 而如果用 catch 话，因为 catch 是链式方法的下一级，所以可以捕获到上一级 resolve 中的异常</span></span><br><span class="line"><span class="comment">// 用链式方法 + reject 的话也行，效果和 catch 一样</span></span><br><span class="line"><span class="comment">// 下面的写法，和上面的 catch 方法效果一样，不过一般不这样写，一般用 catch</span></span><br><span class="line">promise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;).then(<span class="literal">null</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><p><strong>all</strong></p><ul><li><p><code>Promise.all</code> ：传入一个 <code>promise</code> 对象的数组作为参数。</p></li><li><p>只有当数组里的 <strong>所有</strong> <code>promise</code> 对象 <strong>全部</strong> 变为 <code>resolve</code> 时，才会调用 <code>then</code> 里相应的回调函数方法，<code>then</code> 参数为 <strong>所有</strong> <code>promise</code> 返回值组成的 <strong>数组</strong>。</p></li><li><p>只要有一个 <code>promise</code> 对象变为 <code>reject</code> ，就会调用 <code>catch</code> 里的回调函数方法，<code>catch</code> 参数为 <code>reject</code> 的 <code>promise</code> 返回值。</p></li><li><p>数组中的多个 <code>promise</code> 一起 <strong>同时开始，并行执行</strong> 。</p></li><li><p>所以顺序是：<code>(arr[0] | arr[1] | arr[2+...]) --&gt; then</code> 或者 <code>arr[0] | arr[1] --&gt; catch | arr[2+...]</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'2'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'3'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promises = [promise1, promise2, promise3];</span><br><span class="line"><span class="built_in">Promise</span>.all(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// ["1", "2", "3"]</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>race</strong></p><ul><li><p><code>Promise.race</code> ：和 <code>Promise.all</code> 类似，区别是 <strong>只要有一个</strong> <code>promise</code> 对象变为 <code>resolve</code> 或 <code>reject</code> 时，就会调用 <code>then</code> 或 <code>catch</code> 方法；</p></li><li><p>数组中的多个 <code>promise</code> 一起 <strong>同时开始，并行执行</strong> （所以第一个执行完的不一定是 <code>arr[0]</code>）。</p></li><li><p><code>then/catch</code> 方法的参数为第一个执行完的 <code>promise</code> 返回的值。</p></li><li><p>所以顺序是：<code>arr[x] --&gt; then/catch | arr[0] | arr[1] | arr[2+...]</code> 。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'1'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'2'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">  resolve(<span class="string">'3'</span>);</span><br><span class="line">  reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'Boom!'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> promises = [promise1, promise2, promise3];</span><br><span class="line"><span class="built_in">Promise</span>.race(promises).then(<span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);<span class="comment">// 1</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><p><strong>allSettled</strong></p><ul><li><p><code>ES2020</code> 提出的新方法。</p></li><li><p>和 <code>Promise.all</code> 、<code>Promise.race</code> 类似，区别是无论每个 <code>promise</code> 是 <code>resolve</code> 还是 <code>reject</code>，只有当 <strong>所有</strong> <code>promise</code> <strong>都执行完成</strong> 后，才会调用 <code>then</code> 函数。</p></li><li><p><code>then</code> 函数的参数为一个数组，该数组包含原 <code>promises</code> 集中每个 <code>promise</code> 的结果。</p></li><li><p>对于每个结果对象，都有一个 <code>status</code> 字符串。如果它的值为 <code>fulfilled</code>，则结果对象上存在一个 <code>value</code> 。如果值为 <code>rejected</code>，则存在一个 <code>reason</code> 。<code>value</code>（或 <code>reason</code> ）反映了每个 <code>promise</code> 决议（或拒绝）的值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(<span class="number">3</span>);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> setTimeout(reject, <span class="number">100</span>, <span class="string">'foo'</span>));</span><br><span class="line"><span class="keyword">const</span> promises = [promise1, promise2];</span><br><span class="line"></span><br><span class="line"><span class="built_in">Promise</span>.allSettled(promises).</span><br><span class="line">  then(<span class="function">(<span class="params">results</span>) =&gt;</span> results.forEach(<span class="function">(<span class="params">result</span>) =&gt;</span> <span class="built_in">console</span>.log(result.status)));</span><br><span class="line"></span><br><span class="line"><span class="comment">// expected output:</span></span><br><span class="line"><span class="comment">// "fulfilled"</span></span><br><span class="line"><span class="comment">// "rejected"</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="Advanced"><a href="#Advanced" class="headerlink" title="Advanced"></a>Advanced</h3><p><strong>catch 和 reject 是一样的</strong></p><ul><li>上面已经说过，<code>catch</code> 和 <code>reject</code> 是一样的，只是写法不同；</li><li>不过从 <code>链式方法</code> 的写法角度来说，<code>catch</code> 写在下一级，能够捕获上一级中 <code>reject</code> 无法捕获的 <code>resolve</code> 中的异常，所以，推荐使用 <code>catch</code> 写法；</li></ul><p><strong>thenable</strong></p><ul><li><code>thenable</code> 指的是一个具有 <code>.then</code> 方法的对象；</li><li><code>Promise.resolve</code> 可以将 <code>thenable</code> 对象转换为 <code>promise</code> 对象，返回的是一个新的 <code>promise</code> 对象；</li><li>更多 <code>thenable</code> 的信息，<a href="http://liubin.org/promises-book/#ch2-promise-resolve" target="_blank" rel="noopener">点我查看</a> ；</li></ul><p><strong>链式方法</strong></p><ul><li><p>由于 <code>then</code> 和 <code>catch</code> 都返回了一个新的 <code>promise</code> 对象，因此它们可以用 <code>.</code> 的方式进行链式调用；</p></li><li><p><code>then</code> 返回的是新的 <code>promise</code> 对象，<code>then</code> 里面的方法返回的是 链式方法中下一个方法的传入参数；</p></li><li><p>更多详情，<a href="http://liubin.org/promises-book/#then-return-new-promise" target="_blank" rel="noopener">点我查看</a> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// then 返回的 bpromise 是一个 promise 对象</span></span><br><span class="line"><span class="comment">// then 里面函数返回的 value1*2 是链式方法中下一个方法的传入参数(value2)</span></span><br><span class="line"><span class="keyword">var</span> apromise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">  resolve(<span class="number">100</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">var</span> bpromise = apromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value1</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> value1 * <span class="number">2</span>;</span><br><span class="line">&#125;);</span><br><span class="line">bpromise.then(<span class="function"><span class="keyword">function</span>(<span class="params">value2</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value2);<span class="comment">// 200</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><p><strong>使用 ajax + promise 来读取并操作数据</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getURL</span>(<span class="params">URL</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    xhr.open(<span class="string">'GET'</span>, URL, <span class="literal">true</span>);</span><br><span class="line">    xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">        resolve(xhr.responseText);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        reject(<span class="keyword">new</span> <span class="built_in">Error</span>(xhr.statusText));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.onerror = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      reject(<span class="keyword">new</span> <span class="built_in">Error</span>(xhr.statusText));</span><br><span class="line">    &#125;;</span><br><span class="line">    xhr.send(<span class="literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 运行示例</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">"http://httpbin.org/get"</span>;</span><br><span class="line">getURL(url).then(<span class="function"><span class="keyword">function</span> <span class="title">onFulfilled</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> <span class="title">onRejected</span>(<span class="params">error</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h3 id="更多资料"><a href="#更多资料" class="headerlink" title="更多资料"></a>更多资料</h3><p><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">[推荐]JavaScript Promise迷你书（中文版）</a></p><p><a href="https://www.w3cschool.cn/vnpqd/vnpqd-sdlo25sr.html" target="_blank" rel="noopener">快来使用ES2015的Promise吧</a></p><p><a href="https://www.runoob.com/w3cnote/es6-promise.html" target="_blank" rel="noopener">ES6 Promise 对象</a></p><p><a href="https://www.runoob.com/w3cnote/javascript-promise-object.html" target="_blank" rel="noopener">JavaScript Promise 对象</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;promise&lt;/code&gt; 是 &lt;code&gt;ECMAScript6&lt;/code&gt; 新加的一个概念。&lt;/p&gt;&lt;p&gt;本文将使用简洁的文字介绍 &lt;code&gt;promise&lt;/code&gt; ，仅介绍大概情况。&lt;/p&gt;&lt;p&gt;更多详情请参考结尾的推荐文章。&lt;/p&gt;&lt;p&gt;好了，正文开始 ！&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>严格模式 的特别之处</title>
    <link href="http://jian2333.github.io/2019/06/13/strict-mode/"/>
    <id>http://jian2333.github.io/2019/06/13/strict-mode/</id>
    <published>2019-06-13T01:55:09.000Z</published>
    <updated>2019-06-13T03:36:04.674Z</updated>
    
    <content type="html"><![CDATA[<p><strong>严格模式</strong> 是 <code>ECMAScript5</code> 引入的一个概念。通过严格模式，可以在函数内部选择进行较为严格的全局或局部的错误条件检测。使用严格模式的好处是可以提早知道代码中存在的错误，及时捕获一些可能导致编程错误的 <code>ECMAScript</code> 行为。</p><p>那么，<strong>严格模式</strong> 和 <strong>非严格模式</strong> 有什么区别呢？</p><p>我们一起往下看 ～</p><a id="more"></a><h3 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h3><ul><li>使用 <code>&quot;use strict&quot;;</code> (注意后面的分号) ；</li><li>支持 <code>严格模式</code> 的引擎会启动这种模式，不支持 <code>严格模式</code> 的引擎会忽略这个 <strong>编译指示</strong> ；</li><li>可以写在全局作用域(函数外部)，也可以写在函数内部。建议写在函数内部；</li></ul><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><p><strong>1. 不允许意外创建变量</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未声明变量</span></span><br><span class="line"><span class="comment">// 非严格模式模式：创建全局变量</span></span><br><span class="line"><span class="comment">// 严格模式：抛出 ReferenceError</span></span><br><span class="line">message = <span class="string">"Hello world"</span>;</span><br></pre></td></tr></table></figure></li></ul><p><strong>2. 不能对变量调用delete操作符</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 删除变量</span></span><br><span class="line"><span class="comment">// 非严格模式：忽略，静默失败</span></span><br><span class="line"><span class="comment">// 严格模式：抛出 ReferenceError</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="keyword">delete</span> color;</span><br></pre></td></tr></table></figure></li></ul><p><strong>3. 变量名限制</strong></p><ul><li>不能使用 <code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code>、<code>yield</code> 作为变量名；</li><li><code>非严格模式</code> 下可使用；</li></ul><p><strong>4. 操作对象限制</strong></p><ul><li><p>一般来说，<code>非严格模式</code> 下会静默失败，即忽略；<code>严格模式</code> 下会抛出错误；</p></li><li><p>以下情况操作对象的属性会导致错误( <code>严格模式</code> 下) ：</p><ul><li>为 <code>只读属性</code> 赋值会抛出 <code>TypeError</code> ；</li><li>对 <code>不可配置</code> 的属性使用 <code>delete</code> 操作符会抛出 <code>TypeError</code> ；</li><li>对 <code>不可扩展</code> 的对象添加属性会抛出 <code>TypeError</code> ；</li><li>使用 <code>对象字面量</code> 时，属性名要唯一；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名属性</span></span><br><span class="line"><span class="comment">// 非严格模式：没有错误，以第二个为准</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">  name: <span class="string">"Nicholas"</span>,</span><br><span class="line">  name: <span class="string">"Greg"</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>5. 函数参数唯一</strong></p><ul><li><p><code>严格模式</code> 下要求命名函数的参数名必须唯一；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 重名参数</span></span><br><span class="line"><span class="comment">// 非严格模式：没有错误，只能访问第二个参数</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">num, num</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// do something</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>6. 修改参数的值不会反映到 arguments</strong></p><ul><li><p><code>非严格模式</code> 下修改参数的值会反映到 <code>arguments</code> 对象中，而 <code>严格模式</code> 不会，因为它们是完全独立的；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 修改命名参数的值</span></span><br><span class="line"><span class="comment">// 非严格模式：修改会反映到 arguments 中</span></span><br><span class="line"><span class="comment">// 严格模式：修改不会反映到 arguments 中</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">showValue</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  value = <span class="string">"Foo"</span>;</span><br><span class="line">  alert(value);<span class="comment">// "Foo"</span></span><br><span class="line">  alert(<span class="built_in">arguments</span>[<span class="number">0</span>]);<span class="comment">// 非严格模式："Foo"</span></span><br><span class="line">                        <span class="comment">// 严格模式："Hi"</span></span><br><span class="line">&#125;</span><br><span class="line">showValue(<span class="string">"Hi"</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>7. 淘汰了 arguments.callee 和 arguments.caller</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问 arguments.callee</span></span><br><span class="line"><span class="comment">// 非严格模式：没有问题</span></span><br><span class="line"><span class="comment">// 严格模式：抛出 TypeError</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result = factorial(<span class="number">5</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>8. 函数名限制</strong></p><ul><li>不能使用 <code>implements</code>、<code>interface</code>、<code>let</code>、<code>package</code>、<code>private</code>、<code>protected</code>、<code>public</code>、<code>static</code>、<code>yield</code> 作为函数名；</li><li><code>非严格模式</code> 下可使用；</li></ul><p><strong>9. if 内不能声明函数</strong></p><ul><li><p><code>严格模式</code> 下，只能在脚本的顶级和函数内部声明函数，也就是说，在 if 语句中声明函数会导致语法错误；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在 if 语句中声明函数</span></span><br><span class="line"><span class="comment">// 非严格模式：将函数提升到 if 语句外部</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>10. eval 在包含的上下文中不能再创建变量和函数</strong></p><ul><li><p><code>严格模式</code> 下，<code>eval</code> 内声明的变量只在 <code>eval</code> 表达式内部有效；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 eval() 创建变量</span></span><br><span class="line"><span class="comment">// 非严格模式：弹出对话框显示 10</span></span><br><span class="line"><span class="comment">// 严格模式：调用 alert(x) 时会抛出 ReferenceError </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">eval</span>(<span class="string">"var x=10"</span>);</span><br><span class="line">  alert(x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 严格模式：eval() 声明的变量只在 eval 表达式内部有效</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">"var x=10, y=11, x+y"</span>);</span><br><span class="line">  alert(result);<span class="comment">// 21</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>11. 禁止使用 eval 和 arguments 作为标识符，也不能修改它们的值</strong></p><ul><li><p><code>严格模式</code> 下禁止使用 <code>eval</code> 和 <code>arguments</code> 作为标识符，也不允许读取它们的值。</p></li><li><p>以下几种方式都会抛出错误：</p><ul><li>使用 <code>var</code> 声明；</li><li>赋予另一个值( <code>arguments=&quot;xx&quot;</code> 整体赋值会报错，<code>arguments[0]=&quot;yy&quot;</code> 单独赋值不会报错)；</li><li>尝试修改包含的值，如使用 <code>++</code> (也相当于整体赋值了) ；</li><li>用作函数名；</li><li>用作命名的函数参数；</li><li>在 <code>try-catch</code> 语句中用作例外名；</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把 eval 和 arguments 作为变量引用</span></span><br><span class="line"><span class="comment">// 非严格模式：不报错</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doSomething</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">eval</span> = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> <span class="built_in">arguments</span> = <span class="string">"Hello world!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>12. 抑制this</strong></p><ul><li><p>在 <code>非严格模式</code> 下使用 <code>call()</code> 和 <code>apply()</code> 方法时，<code>null</code> 和 <code>undefined</code> 会自动转换为 <strong>全局对象</strong> ；而在 <code>严格模式</code> 下，函数的 <code>this</code> 的值始终是指定的值；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 访问属性</span></span><br><span class="line"><span class="comment">// 非严格模式：访问全局属性</span></span><br><span class="line"><span class="comment">// 严格模式：抛出错误，因为 this 的值为 null</span></span><br><span class="line"><span class="keyword">var</span> color = <span class="string">"red"</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">displayColor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.color);</span><br><span class="line">&#125;</span><br><span class="line">displayColor.call(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure></li></ul><p><strong>13. 抛弃了 with 语句</strong></p><ul><li><p><code>非严格模式</code> 下使用 <code>with</code> 能够改变解析标识符的路径，<code>严格模式</code> 下使用 <code>with</code> 会导致语法错误；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// with 的语句用法</span></span><br><span class="line"><span class="comment">// 非严格模式：允许</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">with</span>(location) &#123;</span><br><span class="line">  alert(href);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>14. 去掉了八进制字面量</strong></p><ul><li><p><code>严格模式</code> 下，八进制字面量已经成为无效的语法了，会抛出异常；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用八进制字面量</span></span><br><span class="line"><span class="comment">// 非严格模式：值为8</span></span><br><span class="line"><span class="comment">// 严格模式：抛出语法错误</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="number">010</span>;</span><br></pre></td></tr></table></figure></li><li><p>在使用 <code>parseInt()</code> 时，<code>严格模式下</code> 八进制字面量会被当作以 0 开头的十进制字面量；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 parseInt() 解析八进制字面量</span></span><br><span class="line"><span class="comment">// 非严格模式下：值为8</span></span><br><span class="line"><span class="comment">// 严格模式下：值为10</span></span><br><span class="line"><span class="keyword">var</span> value = <span class="built_in">parseInt</span>(<span class="string">"010"</span>);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;严格模式&lt;/strong&gt; 是 &lt;code&gt;ECMAScript5&lt;/code&gt; 引入的一个概念。通过严格模式，可以在函数内部选择进行较为严格的全局或局部的错误条件检测。使用严格模式的好处是可以提早知道代码中存在的错误，及时捕获一些可能导致编程错误的 &lt;code&gt;ECMAScript&lt;/code&gt; 行为。&lt;/p&gt;&lt;p&gt;那么，&lt;strong&gt;严格模式&lt;/strong&gt; 和 &lt;strong&gt;非严格模式&lt;/strong&gt; 有什么区别呢？&lt;/p&gt;&lt;p&gt;我们一起往下看 ～&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>《JavaScript 高级程序设计》总结</title>
    <link href="http://jian2333.github.io/2019/06/12/professional-js/"/>
    <id>http://jian2333.github.io/2019/06/12/professional-js/</id>
    <published>2019-06-12T01:49:39.000Z</published>
    <updated>2019-06-12T12:59:35.943Z</updated>
    
    <content type="html"><![CDATA[<p>终于把《JavaScript 高级程序设计》看完(假装看完，其实跳过了几章 0.0)了，颇有一些心得，总结一下。</p><p>首先就是，这本书的内容，大而全。Js的各方面都有介绍，内容详细，涉及面广。</p><p>其次，有些内容相对较旧了。毕竟 <code>第三版</code> 是2012年3月发行的，当时 <code>ES6</code> 还没定稿，所以这本书后面有些内容，和现在会稍有不同，主要是最后几章。</p><p>接下来，是看完本书后的部分总结。</p><a id="more"></a><h2 id="心得"><a href="#心得" class="headerlink" title="心得"></a>心得</h2><h3 id="JS加载"><a href="#JS加载" class="headerlink" title="JS加载"></a>JS加载</h3><p>JS会阻塞 DOM 的加载和渲染。</p><p><code>defer</code> ：</p><ul><li>立即加载JS，但不执行，待DOM渲染完成后再执行JS。</li><li>多个 <code>defer</code> 按顺序执行，但实际上不一定，所以建议只有1个JS使用 <code>defer</code> 参数。</li><li><code>XHTML</code> 下需写成 <code>defer=&quot;defer&quot;</code> 。</li></ul><p><code>async</code> ：</p><ul><li>异步加载JS(不阻塞DOM)，加载完后执行JS(此时会阻塞DOM)，执行完后继续加载/渲染DOM。</li><li>不按顺序执行。</li><li><code>XHTML</code> 下需写成 <code>async=&quot;async&quot;</code> 。</li></ul><p><img src="/images/pj-1.jpg" alt></p><h3 id="类型检测"><a href="#类型检测" class="headerlink" title="类型检测"></a>类型检测</h3><p><strong>基本类型</strong> ：</p><ul><li><code>typeof</code> 。</li><li>包括 <code>undefined</code>、<code>number</code>、<code>boolean</code>、<code>string</code> ，外加 <code>function</code> 。</li></ul><p><strong>引用类型</strong> ：</p><ul><li><code>instanceof</code> 。</li><li>包括 <code>Object</code>、<code>Array</code>、<code>Date</code>、<code>Regexp</code> 。</li><li>检测 <code>Object</code> 永远返回 <code>true</code> ，检测 <code>基本类型</code> 永远返回 <code>false</code> 。</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基本类型</span></span><br><span class="line"><span class="keyword">var</span> str = <span class="string">"string"</span>;</span><br><span class="line">alert(<span class="keyword">typeof</span>(str));<span class="comment">// string</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型</span></span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">alert(person <span class="keyword">instanceof</span> <span class="built_in">Object</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure><h3 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h3><p>垃圾收集主要有 <code>标记清除</code> 和 <code>引用计数</code> 两种方式，其中 <code>标记清除</code> 是现在的主流方式。</p><p><strong>标记清除</strong> ：</p><ul><li>现在5大主流浏览器使用的方式。</li><li>当一个变量进入一个环境(比如函数)时，将该变量标记为 <code>进入环境</code> ，当该变量离开环境(比如函数)时，标记该变量为 <code>离开环境</code> 。</li><li>垃圾收集器会给存储在内存上的所有变量都加上标记，然后去掉环境中的变量以及被环境中的变量引用的变量的标记。而在此之后再被加上标记的变量将被视为准备删除的变量。最后垃圾收集器销毁那些带标记的值并回收它们所占用的空间。</li><li>不同浏览器垃圾收集的时间间隔不同。</li></ul><p><strong>引用计数</strong> ：</p><ul><li>含义是：跟踪记录每一个值被引用的次数。</li><li>当一个值被一个变量引用时，该值的 <code>引用次数</code> +1，又被另一个变量引用时，<code>引用次数</code> 继续+1，取消引用也类似。</li><li>当 <code>引用次数</code> 为0后，当 <code>垃圾收集器</code> 下次运行时，就会释放这些 <code>引用次数</code> 为0的值所占用的内存。</li><li>这个方法有个严重的 bug ，当循环引用的时候，引用次数就永远不会为0，垃圾收集器也就 <strong>永远不会回收这些循环引用的值/变量</strong> 。</li><li>可以使用 <code>variable = null</code> 这样的方式 <strong>手动清除引用</strong> 。</li></ul><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>call，apply</strong> ：</p><ul><li><p>第一个参数是 <code>this</code> 的值，同时也是这个函数的环境/作用域；第二个参数是传入函数的参数；</p></li><li><p>利用第一个参数，可以改变函数执行的环境/作用域，<strong>这是最常用且非常巧妙的一种用法！！</strong>；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'Jack'</span>, <span class="attr">age</span>: <span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> fun1 = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  alert(<span class="keyword">this</span>.age + num);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 传入null</span></span><br><span class="line">fun1.apply(<span class="literal">null</span>, [<span class="number">1</span>]);<span class="comment">// 非严格模式下，this为window；严格模式下，this为null，然后会报错。</span></span><br><span class="line"><span class="comment">// 传入this</span></span><br><span class="line">fun1.apply(<span class="keyword">this</span>, [<span class="number">1</span>]);<span class="comment">// this为window，全局作用域，返回11</span></span><br><span class="line"><span class="comment">// 传入obj</span></span><br><span class="line">fun1.apply(obj, [<span class="number">1</span>]);<span class="comment">// this为obj对象，obj作用域，返回19</span></span><br></pre></td></tr></table></figure></li></ul><p><strong>arguments.callee()</strong> ：</p><ul><li><p>指向当前函数，一般 <strong>递归函数</strong> 中使用较多。</p></li><li><p><code>严格模式</code> 下不能使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 阶乘函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * factorial(num - <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以改写成以下写法，减少函数的执行与函数名的耦合</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">factorial</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (num &lt;= <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> num * <span class="built_in">arguments</span>.callee(num - <span class="number">1</span>);<span class="comment">// 此行改动</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>arguments.caller() </strong>：</p><ul><li><p>指向调用该函数的函数，返回调用函数的源代码。</p></li><li><p><code>严格模式</code> 下不能使用。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">outer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  inner();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">inner</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="built_in">arguments</span>.callee.caller);</span><br><span class="line">&#125;</span><br><span class="line">outer();<span class="comment">// 返回outer函数的源代码</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p><strong>JSON类型</strong></p><p><strong>简单值</strong> ：</p><ul><li>包含 <code>字符串</code>、<code>数值</code>、<code>布尔值</code> 和 <code>null</code> ( <code>undefined</code> 会自动被忽略 )。</li><li><code>JSON字符串</code> 和 <code>JS字符串</code> 的区别：<ul><li><code>JSON字符串</code> 必须使用双引号，<code>JS字符串</code> 可以使用 <code>双引号</code> 和 <code>单引号</code> ；</li></ul></li></ul><p><strong>对象</strong> ：</p><ul><li><code>JSON对象</code> 和 <code>JS对象</code> 的区别：<ul><li><code>JSON对象</code> 的属性名必须使用 <code>双引号</code> ，<code>JS对象</code> 的属性名 <code>可以加双引号也可以不加引号</code> ；</li><li><code>JSON对象</code> 没有声明变量；</li><li><code>JSON对象</code> 末尾没有 <code>分号</code> ；</li></ul></li></ul><p><strong>数组</strong> ：</p><ul><li><code>JSON数组</code> 和 <code>JS数组</code> 的区别：<ul><li><code>JSON数组</code> 没有声明变量；</li><li><code>JSON数组</code> 末尾没有 <code>分号</code> ；</li></ul></li></ul><p><strong>JSON.stringify(obj, para1, para2)</strong> ：</p><ul><li><code>JS对象</code> =&gt; <code>JSON字符串</code> ；</li><li><strong>para1</strong> ：可选，用于过滤结果，可以是数组或函数；<ul><li>数组 ：只返回数组中的 <code>key</code> ；</li><li>function(key, value) ：重新格式化每个 <code>key</code> 的值；</li></ul></li><li><strong>para2</strong> ：可选，用于指定缩进，可以是数值或字符串；<ul><li>数值：缩进 n 个空格，最大长度为10；</li><li>字符串：缩进字符串，最大长度为10；</li></ul></li></ul><p><strong>JSON.parse(str, para1)</strong> ：</p><ul><li><code>JSON字符串</code> =&gt; <code>JS对象</code> ；</li><li><strong>para1</strong> ：可选，和 <code>JSON.stringify</code> 的 <code>para1</code> 中的 <code>fucntion</code> 类似，用于还原结果，是一个函数；<ul><li>function(key, value) ：重新格式化每个 <code>key</code> 的值；</li></ul></li></ul><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><p><code>Ajax</code> 是一种局部刷新页面的技术，它向服务器请求数据而无需卸载页面，只局部刷新页面。</p><h4 id="原生写法"><a href="#原生写法" class="headerlink" title="原生写法"></a><strong>原生写法</strong></h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(type, url, isAsync);</span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure><p><strong>说明</strong>：</p><ul><li><p><strong>type</strong> ：<code>post</code> 、<code>get</code> 等；</p></li><li><p><strong>url</strong> ：请求的 url ，<code>get</code> 请求时查询字符串参数必须使用 <code>encodeURIComponent()</code> 进行编码；</p></li><li><p><strong>isAsync</strong> ：是否异步。<code>jQuery</code> 默认为 <code>true</code> ；</p></li><li><p><strong>data</strong> ：一定要填，为空的话写 <code>null</code> ；</p></li><li><p>可以使用表单形式给服务器传数据(结果是键值对，而不是string字符串)，使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 初始化</span></span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法1</span></span><br><span class="line"><span class="keyword">var</span> form = <span class="built_in">document</span>.getElementById(<span class="string">"user-info"</span>);</span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData(form);</span><br><span class="line"><span class="comment">// 方法2</span></span><br><span class="line"><span class="keyword">var</span> data = <span class="keyword">new</span> FormData();</span><br><span class="line">data.append(<span class="string">"key1"</span>, <span class="string">"value1"</span>);</span><br><span class="line">data.append(<span class="string">"key2"</span>, <span class="string">"value2"</span>);</span><br><span class="line"><span class="comment">// 发送给服务器</span></span><br><span class="line">xhr.send(data);</span><br></pre></td></tr></table></figure></li></ul><p><strong>更多信息</strong> ：</p><ul><li>Page 575；</li><li><strong>HTTP头信息</strong> ：可以自定义信息在头部，供服务器读取；</li><li><strong>超时设定</strong> ：<code>xhr.timeout</code> 、<code>xhr.ontimeout=function(){}</code> ；</li><li><strong>进度事件</strong> ：<code>load</code> 、<code>progress</code> ；</li></ul><h4 id="跨域介绍"><a href="#跨域介绍" class="headerlink" title="跨域介绍"></a><strong>跨域介绍</strong></h4><p><code>CORS(Cross-Origin-Resource Sharing)</code> 定义了跨域时，浏览器与服务器该如何通信。</p><p><code>CORS</code> <strong>的基本思路</strong></p><ul><li><code>浏览器</code> =&gt; <code>服务器</code> 的 <code>请求头</code> 中添加：<code>Origin: url</code> ；</li><li><code>服务器</code> =&gt; <code>浏览器</code> 的 <code>响应头</code> 中添加： <code>Access-Control-Allow-Origin: url</code> ；</li><li>这2个 <code>url</code> 必须一致；</li></ul><p><strong>IE8 的跨域</strong></p><ul><li><p>使用 <code>XDR(XDomainRequest)</code> 对象来创建实例(替代 <code>XMLHttpRequest</code> 对象)；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> XDomainRequest();</span><br><span class="line">xdr.open(type, url, isAsync);</span><br><span class="line">xdr.send(data);</span><br></pre></td></tr></table></figure></li></ul><p><strong>其他主流浏览器的跨域</strong></p><ul><li><strong>原生支持</strong> ：直接使用 <code>XMLHttpRequest</code> 对象创建实例即可；</li></ul><p><strong>其他跨域技术</strong></p><ul><li><strong>图像Ping</strong> ：单向，<code>浏览器</code> =&gt; <code>服务器</code> ；</li><li><strong>JSONP</strong> ：双向，把 url 添加到 <code>&lt;script&gt;</code> 标签中，然后 <code>&lt;script&gt;</code> 标签添加到 <code>document.body</code> 内；</li><li><strong>Comet</strong> ：长轮询 和 流；</li><li><strong>服务器发送事件</strong> ：SSE ；</li></ul><h4 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a><strong>WebSocket</strong></h4><p>用于在一个单独的持久连接上提供 <strong>全双工、双向通信</strong> 。</p><p><strong>原生写法</strong></p><ul><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> WebSocket(url);</span><br><span class="line">socket.send(data);</span><br><span class="line">socket.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 其他3个事件</span></span><br><span class="line">socket.onopen = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">socket.onerror = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br><span class="line">socket.onclose = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;;</span><br></pre></td></tr></table></figure></li></ul><p><strong>说明</strong></p><ul><li><strong>url</strong> ：传输协议为 <code>ws://</code> 和 <code>wss://</code> ，分别对应 <code>未加密</code> 和 <code>加密</code> 的协议；</li><li><strong>send</strong> ：<code>data</code> 只能是 <code>字符串</code> ;</li><li><strong>onmessage</strong> ：<code>服务器</code> 返回的数据存放在 <code>event.data</code> 中；</li></ul><p><strong>优缺点</strong></p><p><strong>优点</strong> ：</p><ul><li>能够双向通信，<code>服务器</code> 能主动推送数据给 <code>浏览器</code> ；</li><li>传输数据小，占用资源少，速度快。因为相比较 <code>http/https</code> 的传输协议，<code>ws/wss</code> 的请求头更小，所以每次传输数据，“无效”的请求头数据会更少，对于高频率的请求效果更明显；</li></ul><p><strong>缺点</strong> ：</p><ul><li><strong>h5</strong> 新增的功能，对于某些旧浏览器并不支持；</li><li>需要使用不同的 web服务器(传输协议为 <code>ws/wss</code> ) ；</li></ul><h3 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h3><h4 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h4><p><strong>安全的类型检测</strong></p><ul><li><p><code>instanceof</code> 检测时，必须是在同一个全局作用域下才有效(比如一个页面包含多个frame时，在 非构造函数页面 检测会返回false)；</p></li><li><p>利用 <code>原生XX</code> 的构造函数名与全局作用域无关，因此使用 <code>toString()</code> 就能够保证返回一致的值，所以可以创建以下函数；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 检测数组</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isArray</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Array]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isFunction</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object Function]"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 检测正则表达式</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isRegExp</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Object</span>.prototype.toString.call(value) == <span class="string">"[object RegExp]"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>作用域安全的构造函数</strong></p><ul><li><p>当使用构造函数创建对象时，忘记使用 <code>new</code> 的情况下；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, job</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> <span class="keyword">instanceof</span> Person) &#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.job = job</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Person(name, age, job);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>原理：使用 <code>new</code> 的情况下，<code>this</code> 指向的是 <code>new</code> 出来的新对象；未使用 <code>new</code> 的情况下，<code>this</code> 指向的是 <code>全局对象window</code> ；</p></li></ul><p><strong>惰性载入函数</strong></p><ul><li><p>在某些 <code>if</code> 判断的语句中，<strong>如果第一次怎样，后面每次都会这样</strong>，针对这种情况，可以使用 <code>惰性载入函数</code> ，即 <strong>if里重写原方法</strong>，这样后面执行是就不用判断了；</p></li><li><p><code>惰性载入函数</code> 有两种写法：</p><ul><li><p>第一种是：函数被调用时再处理函数：</p></li><li><p>第二种是：声明函数时就指定适当的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种：函数被调用时再处理函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createXHR</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">// 改变1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变2</span></span><br><span class="line">      <span class="comment">//...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    createXHR = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变3</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第二种：声明函数时就指定适当的函数</span></span><br><span class="line"><span class="keyword">var</span> createXHR = (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> XMLHttpRequest != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变1</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> ActiveXObject != <span class="string">"undefined"</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变2</span></span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="built_in">arguments</span>.callee.activeXString);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="comment">// 改变3</span></span><br><span class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"No XHR object available."</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)();<span class="comment">// 改变4</span></span><br></pre></td></tr></table></figure></li></ul></li></ul><p><strong>函数绑定</strong></p><ul><li><p><code>函数绑定</code> 要创建一个函数，可以在特定的 <code>this</code> 环境中以指定参数调用另一个函数；</p></li><li><p>来看下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> handler = &#123;</span><br><span class="line">  message: <span class="string">"Event handler"</span>,</span><br><span class="line">  handlerClick: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    alert(<span class="keyword">this</span>.message);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"my-btn"</span>);</span><br><span class="line"><span class="comment">// 返回undefined</span></span><br><span class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, handler.handlerClick);</span><br><span class="line"><span class="comment">// 返回Event handler, </span></span><br><span class="line"><span class="comment">// 传入作为this值的对象，和 call，apply 类似</span></span><br><span class="line">EventUtil.addHandler(btn, <span class="string">"click"</span>, handler.handlerClick.bind(handler));</span><br></pre></td></tr></table></figure></li></ul><p><strong>函数柯里化</strong></p><ul><li><p>用于创建已经设置好了一个或多个参数的函数；</p></li><li><p><code>函数柯里化</code> 的基本方法和 <code>函数绑定</code> 是一样的，都是使用一个闭包返回一个函数；</p></li><li><p>两者的区别在于：当函数被调用时，返回的函数还需要设置一些传入的参数；</p></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化 定义函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">curry</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> innerArgs = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</span><br><span class="line">    <span class="keyword">var</span> finalArgs = args.concat(innerArgs);</span><br><span class="line">    <span class="keyword">return</span> fn.apply(<span class="literal">null</span>, finalArgs);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化 使用方法1</span></span><br><span class="line"><span class="comment">// 超出参数自动忽略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curriedAdd = curry(add, <span class="number">5</span>);</span><br><span class="line">alert(curriedAdd(<span class="number">3</span>));<span class="comment">// 8</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数柯里化 使用方法2</span></span><br><span class="line"><span class="comment">// 超出参数自动忽略</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num1, num2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> curriedAdd = curry(add, <span class="number">5</span>, <span class="number">13</span>, <span class="number">2</span>);</span><br><span class="line">alert(curriedAdd());<span class="comment">// 18</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h4><p><strong>注意：一旦把对象定义为防篡改，就不可撤销了</strong> 。</p><p><strong>不可扩展对象</strong></p><ul><li>不能添加属性和方法，可删除和修改；</li><li>使用 <code>Object.preventExtensions(obj)</code> 把 <code>obj对象</code> 修改为 <code>不可扩展对象</code> ；</li></ul><p><strong>密封的对象</strong></p><ul><li>不能添加和删除属性和方法，但可修改；</li><li>使用 <code>Object.seal(obj)</code> 把 <code>obj对象</code> 修改为 <code>密封的对象</code> ；</li></ul><p><strong>冻结的对象</strong></p><ul><li>既不可扩展，又是冻结的。即不可新增、修改、删除属性和方法；</li><li>使用 <code>Object.freeze(obj)</code> 把 <code>obj对象</code> 修改为 <code>冻结的对象</code> ；</li></ul><h4 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h4><p><code>setTimeout</code> 和 <code>setInterval()</code> 并不是 <strong>过xx毫秒后执行函数</strong> ，而是 <strong>过xx毫秒后把函数代码添加到代码队列，在浏览器空闲时，将按队列顺序依次执行队列中的代码</strong> 。</p><p><strong>重复的定时器</strong></p><ul><li><p>使用 <code>setInterval()</code> 时，仅当没有该定时器的任何其他代码实例时，才将定时器代码添加到队列中，这确保了队列中的最小时间间隔为指定间隔；</p></li><li><p>当这种 <code>重复定时器</code> 有两个问题：(1)某些间隔会被跳过；(2)多个定时器的代码执行之间的间隔可能会比预期的小；</p></li><li><p>为了解决这种问题，可以使用如下模式的 <code>链式setTimeout()调用</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 处理中</span></span><br><span class="line">  setTimeout(<span class="built_in">arguments</span>.callee, interval);</span><br><span class="line">&#125;, interval);</span><br></pre></td></tr></table></figure></li></ul><p><strong>Yielding Processos</strong></p><ul><li><p>当某个循环占用了大量时间，如果该循环满足 <strong>1无需同步完成，2无需按顺序完成</strong> ，则可使用一种叫做 <code>数组分块</code> 的技术，小块小块的处理数组，通常每次一小块；</p></li><li><p>基本思路：为要处理的数组创建一个队列，然后使用定时器取出下一个要处理的项目进行处理，接着再设置另一个定时器；</p></li><li><p>看下面这个例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路</span></span><br><span class="line">setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="comment">// 取出下一个项目并处理</span></span><br><span class="line">  <span class="keyword">var</span> item = array.shift();</span><br><span class="line">  process(item);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//若还有条目，再设置另一个定时器</span></span><br><span class="line">  <span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">100</span>)</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 实际例子</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">chunk</span>(<span class="params">array, process, context</span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> item = array.shift();</span><br><span class="line">    process.call(context, item);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (array.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      setTimeout(<span class="built_in">arguments</span>.callee, <span class="number">100</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;, <span class="number">100</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = [<span class="number">12</span>,<span class="number">123</span>,<span class="number">23</span>,<span class="number">234</span>,<span class="number">1234</span>,<span class="number">323</span>,<span class="number">444</span>,<span class="number">555</span>,<span class="number">666</span>,<span class="number">777</span>];</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">printValue</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.innerHTML += item + <span class="string">"&lt;br&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">chunk(data, printValue);</span><br></pre></td></tr></table></figure></li></ul><p><strong>函数节流</strong></p><ul><li><p>浏览器中某些操作(比如DOM)非常耗资源，高频率的进行这种操作可能会让浏览器崩溃。为了解决这个问题，可以使用定时器对该函数进行 <strong>节流</strong> ；</p></li><li><p><code>函数节流</code> 背后的思路是：某些代码不可以在没有间断的情况下连续重复执行。第一次调用函数时，会创建一个定时器，在指定的时间间隔后再执行函数；第二次调用时，会先清除前一次的定时器，并设置另外一个，然后重复前面的步骤；</p></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 思路</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">method, context</span>) </span>&#123;</span><br><span class="line">  clearTimeout(method.tId);</span><br><span class="line">  <span class="keyword">var</span> method.tId = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    method.call(context);</span><br><span class="line">  &#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 未节流前写法，高频率的更新可能导致浏览器崩溃</span></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 节流写法</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resizeDiv</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">"myDiv"</span>);</span><br><span class="line">  div.style.height = div.offsetWidth + <span class="string">"px"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  throttle(resizeDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><ul><li><code>事件</code> 是一种叫做 <code>观察者</code> 的设计模式，这是一种创建松散耦合代码的技术；</li><li><code>观察者模式</code> 由 <code>主体</code> 和 <code>观察者</code> 两部分组成；<ul><li><strong>主体</strong> ：发布事件；</li><li><strong>观察者</strong> ：订阅事件，观察主体；</li></ul></li></ul><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><ul><li><code>服务器</code> 生成并返回给 <code>浏览器</code> 的；</li><li>绑定在特定域名下，只在绑定的域名下有效；</li><li>(针对域名) 只要有的话，浏览器每次发数据给 <code>服务器</code> ，一定会带上已经存在的 <code>cookie ；</code></li><li>未设定有效期的 <code>cookie</code> ，浏览器关闭后即失效，设定有效期的 <code>cookie</code>，手动删除或到期前，一直有效；</li></ul><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p><strong>优化DOM</strong></p><p>在 <strong>JavaScript</strong> 各个方面中，<strong>DOM</strong> 毫无疑问是最慢的一部分。</p><p>当往页面添加多个 <code>&lt;li&gt;</code> 元素时，每添加一次都要进行一次 <code>现场更新</code>，即页面要进行一次 <code>重排重绘</code> ，性能损失非常大。</p><p><strong>最小化更新现场</strong></p><ul><li><p>使用 <code>文档片段</code> 来构建DOM结构，接着将其添加到 <code>List</code> 元素中，这样只会进行一次 <code>现场更新</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">    fragment = <span class="built_in">document</span>.createDocumentFragment(),</span><br><span class="line">    item,</span><br><span class="line">    i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  item = <span class="built_in">document</span>.createElement(<span class="string">"li"</span>);</span><br><span class="line">  fragment.appendChild(item);</span><br><span class="line">  item.appendChild(<span class="built_in">document</span>.createTextNode(<span class="string">"Item"</span> + i));</span><br><span class="line">&#125;</span><br><span class="line">list.appendChild(fragment);</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用 innerHTML</strong></p><ul><li><p>创建 <strong>DOM</strong> 节点到另一种方法(前一种是 <code>createElement</code> 、<code>appendChild</code> 之类的)；</p></li><li><p>对于小的 <strong>DOM</strong> 节点更改，两种方法效率差不多，然而对于大的 <strong>DOM</strong> 节点的更改，<code>innerHTML</code> 要比前一种快的多，因为只进行一次 <code>现场更新</code> ；</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">"myList"</span>),</span><br><span class="line">    html = <span class="string">""</span>,</span><br><span class="line">    i;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++) &#123;</span><br><span class="line">  html += <span class="string">"&lt;li&gt;Item"</span> + i + <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line">list.innerHTML = html;</span><br></pre></td></tr></table></figure></li></ul><p><strong>使用事件代理</strong></p><ul><li>利用 <code>事件冒泡</code> ，在文档级别附加事件处理程序，这样可以处理整个页面的事件；</li></ul><p><strong>注意 HTMLCollection</strong></p><ul><li><p>任何时候要访问 <strong>HTMLCollection</strong> ，不管它是一个属性还是一个方法，都是在文档上进行一个查询，这个查询开销很大；</p></li><li><p>最小化访问 <strong>HTMLCollection</strong> 的次数可以极大的改进脚本的性能；</p></li><li><p>优化 <strong>HTMLCollection</strong> 最重要的地方就是循环了；</p></li><li><p>以下情况会返回 <strong>HTMLCollection</strong> 集合：</p><ul><li>进行了对 <code>getElementsByTagName</code> 的调用 ；</li><li>获取了元素的 <code>ChildNodes</code> 属性 ；</li><li>获取了元素的 <code>attributes</code> 属性 ；</li><li>访问了特殊的集合，比如 <code>document.forms</code>、<code>document.images</code> 等 ；</li></ul></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 优化前</span></span><br><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>),</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, len=images.length;i&lt;len;i++) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优化后</span></span><br><span class="line"><span class="keyword">var</span> images = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"img"</span>),</span><br><span class="line">    image,</span><br><span class="line">    i,</span><br><span class="line">    len;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>, len=images.length;i&lt;len;i++) &#123;</span><br><span class="line">  image = images[i];</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p><strong>部署</strong></p><p><strong>压缩</strong> ：</p><p>压缩分两部分，即 <code>文件压缩</code> 和 <code>HTTP压缩</code> 。</p><p><code>文件压缩</code> ：</p><ul><li>把开发环境的文件( js、css 等)压缩，然后部署到服务器上；</li><li>删除额外的空白，包括换行；</li><li>删除所有注释；</li><li>缩短变量名；</li></ul><p><code>HTTP压缩</code> ：</p><ul><li>服务器对传输给浏览器的代码进行压缩(服务器要进行配置)；</li><li>浏览器对接收的资源进行解压缩，目前五大 Web浏览器都支持解压缩；；</li><li>可以节省传输的字节，减少带宽消耗，加快响应速度；</li><li><strong>原理</strong> ：一个指定了文件 使用了给定格式 进行了压缩的HTTP头 包含在了服务器响应中。接着浏览器会查看该 HTTP头确定文件是否已被压缩，然后使用合适的格式进行解压缩；</li></ul><h3 id="新API"><a href="#新API" class="headerlink" title="新API"></a>新API</h3><p><strong>requestAnimationFrame()</strong></p><ul><li>早期动画循环；</li></ul><p><strong>Page Visiblity API</strong></p><ul><li><code>document.hidden</code> ：查看页面是否隐藏的布尔值。页面隐藏包括在后台标签页中或最小化浏览器；</li><li><code>document.visibilityState</code> ：表示下列4个可能状态的值：<ul><li>页面在后台标签中或浏览器最小化；</li><li>页面在前台标签页中；</li><li>实际的标签页已经隐藏，但用户可以看到页面的预览(比如win7鼠标移到任务栏的图标上看到的预览)；</li><li>页面在屏幕外执行预渲染处理；</li></ul></li><li><code>visibilitychange</code> 事件：文档从可见变为不可见，或从不可见变为可见时触发；</li></ul><p><strong>Geolocation API</strong></p><ul><li>地理定位 API；</li><li><code>navigator.geolocation</code> 对象；</li><li><code>getCurrentPosition</code> ：获取当前位置；</li><li><code>watchPosition</code> ：跟踪用户位置，与定时调用 <code>getCurrentPosition</code> 效果一样；</li><li><code>clearWatch</code> ：取消跟踪用户位置；</li></ul><p><strong>File API</strong></p><ul><li>能够在浏览器端读取本地文件的信息(文件名称，类型，大小，修改时间，文件内容等)；</li><li>使用 <code>&lt;input type=&quot;file&quot;&gt;</code> 元素，返回对象的 <code>files</code> 属性；</li><li><strong>FileReader 类型</strong><ul><li><code>var reader = new FileReader()</code> ；</li><li><code>readAsText(file, encoding)</code> ：以纯文本形式读取文件，数据保存在 <code>result</code> 属性中；</li><li><code>readAsDataURL(file)</code> ：读取文件并将文件以 URI 的形式保存在 <code>result</code> 属性中；</li></ul></li><li><strong>对象 URL</strong><ul><li>引用保存在 <code>File</code> 或 <code>Blob</code> 中数据的 URL；</li><li><code>window.URL.createObjectURL(file)</code> ：获取 <code>file</code> 的URL；</li></ul></li></ul><p><strong>Web 计时</strong></p><ul><li><code>window.performance</code> ：获取页面的所有度量信息(即时间相关信息)；</li></ul><p><strong>Web Workers</strong></p><ul><li><p><strong>JavaScript</strong> 是单线程的；</p></li><li><p>让 <strong>JavaScript</strong> 在后台运行，类似开了一个后台线程；</p></li><li><p>来看下面的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> Worker(<span class="string">"stufftodo.js"</span>);</span><br><span class="line"><span class="comment">// 这行代码会让浏览器下载js，但只有 worker接收到消息才会执行js代码</span></span><br><span class="line"><span class="comment">// 使用 postMessage() 给 workder发送消息，可以是字符串或对象</span></span><br><span class="line">worker.postMessage(<span class="string">"start! "</span>);</span><br><span class="line"><span class="comment">// worker返回到数据保存在 event.data 中</span></span><br><span class="line">worker.onmessage = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> data = event.data;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;;</span><br><span class="line">worker.onerror = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 立即停止 workder 到工作</span></span><br><span class="line">worker.terminate();</span><br></pre></td></tr></table></figure></li></ul><h2 id="跳过的章节"><a href="#跳过的章节" class="headerlink" title="跳过的章节"></a>跳过的章节</h2><p>其中有几章没看跳过了，有些是已经熟悉的，有些是优先级不高暂时跳过了，以后有时间了再补上吧～</p><p>跳过的章节有：</p><ul><li>第8章：BOM；</li><li>第9章：客户端检测；</li><li>第10～12章：DOM；</li><li>第13章：事件；</li><li>第14章：表单；</li><li>第15章：Canvas；</li><li>第18章：JS与XML；</li><li>第19章：E4X；</li></ul><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h2><p>有关 <code>严格模式</code> 与 <code>非严格模式</code> 的区别，请看下篇文章。</p><p><a href="/2019/06/13/strict-mode">点我查看</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;终于把《JavaScript 高级程序设计》看完(假装看完，其实跳过了几章 0.0)了，颇有一些心得，总结一下。&lt;/p&gt;&lt;p&gt;首先就是，这本书的内容，大而全。Js的各方面都有介绍，内容详细，涉及面广。&lt;/p&gt;&lt;p&gt;其次，有些内容相对较旧了。毕竟 &lt;code&gt;第三版&lt;/code&gt; 是2012年3月发行的，当时 &lt;code&gt;ES6&lt;/code&gt; 还没定稿，所以这本书后面有些内容，和现在会稍有不同，主要是最后几章。&lt;/p&gt;&lt;p&gt;接下来，是看完本书后的部分总结。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="js" scheme="http://jian2333.github.io/tags/js/"/>
    
  </entry>
  
</feed>
