<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,Jianww</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jian2333.github.io/"/>
  <updated>2019-05-23T12:59:14.489Z</updated>
  <id>http://jian2333.github.io/</id>
  
  <author>
    <name>Jianww</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浅谈浏览器内核</title>
    <link href="http://jian2333.github.io/2019/05/23/browser-kernel/"/>
    <id>http://jian2333.github.io/2019/05/23/browser-kernel/</id>
    <published>2019-05-23T10:23:37.000Z</published>
    <updated>2019-05-23T12:59:14.489Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内核简介"><a href="#内核简介" class="headerlink" title="内核简介"></a>内核简介</h3><p>一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：<strong>渲染引擎</strong> 和 <strong>js引擎</strong> 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 <strong>渲染引擎</strong> 。</p><p><strong>渲染引擎</strong> ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 <strong>排版引擎</strong> ，我们常说的浏览器内核主要指的就是 <strong>渲染引擎</strong> 。</p><p><strong>js引擎</strong> ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。</p><a id="more"></a><h3 id="5-大主流浏览器-按时间顺序"><a href="#5-大主流浏览器-按时间顺序" class="headerlink" title="5 大主流浏览器(按时间顺序)"></a>5 大主流浏览器(按时间顺序)</h3><h4 id="IE-浏览器"><a href="#IE-浏览器" class="headerlink" title="IE 浏览器"></a>IE 浏览器</h4><p>IE 是微软其下的浏览器，IE4~IE11 使用的都是 <code>Trident</code> 内核。</p><p>Windows10 发布后，IE 将其内置浏览器命名为 <strong>Edge</strong>，使用新内核 <code>EdgeHTML</code> 。</p><p>IE 从版本11开始，初步支持 <code>WebGL</code> 技术。IE8 的js引擎是 <code>jscript</code> ，IE9开始使用 <code>Chakra</code> ，这两个版本差别很大，<code>Chakra</code> 无论是速度还是标准化方面都很出色。</p><p>Edge的JS引擎是 <code>Chakra</code>。</p><h4 id="Opera-浏览器"><a href="#Opera-浏览器" class="headerlink" title="Opera 浏览器"></a>Opera 浏览器</h4><p>Opera 是挪威 Opera Software ASA 公司其下的浏览器。</p><p>1995年，Opera 公司发布第一版 Opera 浏览器，并使用 <code>Presto</code> 内核。</p><p>2016年奇虎360和昆仑万维收购了 Opera 浏览器，并改用当时 Google 开源的 <code>webkit</code> 内核。</p><p>之后 Opera 又跟随 Google 将浏览器内核改为 <code>Blink</code> 。</p><h4 id="Safari-浏览器"><a href="#Safari-浏览器" class="headerlink" title="Safari 浏览器"></a>Safari 浏览器</h4><p>Safari 是 Apple 公司自研的浏览器，主要用于 Apple 自身的产品。</p><p>第二次浏览器大战也是从苹果公司发布 Safari 开始的。</p><p>2003年，苹果公司在苹果手机上开发 Safari 浏览器，利用自己得天独厚的手机市场份额使 Safari 浏览器迅速成为世界主流浏览器。</p><p>Safari 是最早使用 <code>webkit</code> 内核的浏览器，后来升级为 <code>webkit2</code> 内核，也是现在苹果默认的浏览器。</p><p>Safari 的JS引擎是 <code>JavaScriptCore</code> 。</p><h4 id="Firefox-浏览器"><a href="#Firefox-浏览器" class="headerlink" title="Firefox 浏览器"></a>Firefox 浏览器</h4><p>Firefox 是 Mozilla 公司旗下的浏览器，也就是 网景 公司后来的浏览器。</p><p>网景被收购后，网景人员创办了 Mozilla 基金会，这是一个非营利性的组织，他们在2004年推出自己的浏览器 Firefox。</p><p>Firefox 采用 <code>Gecko</code> 内核。</p><p>Firefox 的JS引擎是 <code>SpiderMonkey</code> 。</p><p><code>Gecko</code> 是一个开源的项目，代码完全公开，因此受到很多人的青睐。</p><h4 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h4><p>Chrome 是 Google 公司的浏览器。</p><p>Chrome 最开始使用 <code>webkit</code> 分支出的 <code>Chromium</code> 内核，后来升级为 <code>Blink</code> 内核。</p><p>Chrome 的JS引擎是 <code>V8</code> 。</p><h4 id="浏览器与JS引擎"><a href="#浏览器与JS引擎" class="headerlink" title="浏览器与JS引擎"></a>浏览器与JS引擎</h4><p><img src="/images/bk-2.jpg" alt></p><h3 id="5-大内核"><a href="#5-大内核" class="headerlink" title="5 大内核"></a>5 大内核</h3><h4 id="Trident-内核"><a href="#Trident-内核" class="headerlink" title="Trident 内核"></a>Trident 内核</h4><p>也就是俗称的 <code>IE内核</code> 。</p><p><code>Trident</code> 内核迭代列表</p><p><img src="/images/bk-1.jpg" alt></p><p>使用该内核的浏览器有：IE浏览器，多核浏览器。</p><h4 id="Presto-Opera前内核-已废弃"><a href="#Presto-Opera前内核-已废弃" class="headerlink" title="Presto(Opera前内核)(已废弃)"></a>Presto(Opera前内核)(已废弃)</h4><p>Opera12.17及更早版本曾使用此内核，现已停止开发并废弃。</p><p>Opera在2013年2月宣布放弃 <code>Prosto</code>，转而跟随 Chrome 使用 <code>webkit</code> 的分支 <code>Chromium</code> 引擎作为其核心。</p><p>在 Chrome 与 2013年推出 <code>Blink</code> 核心后，Opera 也紧跟随其脚步使用 <code>Blink</code> 核心。</p><h4 id="Webkit-内核"><a href="#Webkit-内核" class="headerlink" title="Webkit 内核"></a>Webkit 内核</h4><p>苹果公司研发的内核，后来升级为 <code>webkit2</code>。</p><p><code>webkit</code>内核包括：<code>WebCore渲染引擎</code> 和 <code>JavaScriptCore解析引擎</code>，均是从 KDE 的 <code>KHTML</code> 和 <code>KJS</code> 衍生而来的。</p><p>2008年，Google 发布了 Chrome 浏览器，浏览器使用的内核叫做 <code>Chromium</code> 。</p><p><code>Chromium</code> fork 自开源引擎 <code>Webkit</code> ，Google 还研发了自己的JS引擎，即 <code>V8引擎</code> ，极大的提高了 JavaScript 的运行速度。</p><p>使用该内核的浏览器有：Safari，Android 默认浏览器，多核浏览器。</p><h4 id="Gecko-内核"><a href="#Gecko-内核" class="headerlink" title="Gecko 内核"></a>Gecko 内核</h4><p>Netscape6 开始采用的内核，后来的 Mozilla Firefox 也采用了相同的内核。</p><p>使用该内核的浏览器有：Mozilla Firefox，Mozilla SeaMonkey，Flock(早期版本)，K-Meleon 。</p><h4 id="Blink-内核"><a href="#Blink-内核" class="headerlink" title="Blink 内核"></a>Blink 内核</h4><p>2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 <a href="http://blog.chromium.org/2013/04/blink-rendering-engine-for-chromium.html" target="_blank" rel="noopener">博客</a>，称将与苹果的开源浏览器核心 <code>Webkit</code> 分道扬镳，在 Chromium 项目中研发 <code>Blink</code> 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p><p><code>Blink</code> 是一个由 Google 和 Opera Software 开发的浏览器 渲染引擎，Google 计划将这个渲染引擎作为 Chromium 计划的一部分。这一渲染引擎是开源引擎 <code>WebKit</code> 中<code>WebCore</code> 组件的一个分支，并且在 Chrome（28及往后版本）、Opera（15及往后版本）和 Yandex 浏览器中使用<br>此外，Mozilla 与三星也达成合作协议开发”下一代”浏览器渲染引擎Servo。</p><p>使用该内核的浏览器：Chrome，Opera，多核浏览器。</p><h5 id="补充：什么是-Chromium-计划"><a href="#补充：什么是-Chromium-计划" class="headerlink" title="补充：什么是 Chromium 计划"></a>补充：什么是 Chromium 计划</h5><p>Chromium 是 Google 为发展自家的浏览器 Google Chrome（以下简称Chrome）而开启的计划，所以 Chromium 相当于 Chrome 的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在 Chromium 上实现，待验证后才会应用在 Chrome 上，故 Chrome 的功能会相对落后但较稳定。<br>所以，Chromium 和 Chrome 都是浏览器，Chromium 是开发版本，相比起 Chrome 更新速度快很多，有时数个小时就有一个新版本，不过普通人一般用 Chrome 就可以了。</p><h5 id="补充：为什么要搞一个新的-Blink-内核"><a href="#补充：为什么要搞一个新的-Blink-内核" class="headerlink" title="补充：为什么要搞一个新的 Blink 内核"></a>补充：为什么要搞一个新的 Blink 内核</h5><p><code>Blink</code> 其实是 <code>WebKit</code> 的分支，如同 <code>WebKit</code> 是 <code>KHTML</code> 的分支。Google 的 Chromium 项目此前一直使用 <code>WebKit(WebCore)</code> 作为渲染引擎。</p><p>后来，由于苹果推出的 <code>WebKit2</code> 与 <code>Chromium</code> 的沙箱设计存在冲突，所以 <code>Chromium</code> 一直停留在 <code>WebKit</code>，并使用移植的方式来实现和主线 <code>WebKit2</code> 的对接。这增加了 <code>Chromium</code> 的复杂性，且在一定程度上影响了 <code>Chromium</code> 的架构移植工作。</p><p>基于以上原因，Google 决定从 <code>WebKit</code> 衍生出自己的 <code>Blink</code> 引擎（后由 Google 和 Opera Software 共同研发），将在 <code>WebKit</code> 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 <code>WebKit</code> 的影响，创造一个完全独立的 <code>Blink</code> 引擎。</p><h4 id="EdgeHTML-内核"><a href="#EdgeHTML-内核" class="headerlink" title="EdgeHTML 内核"></a>EdgeHTML 内核</h4><p>Windows10后，IE内置浏览器 Edge 使用的内核。</p><p>JS引擎为 <code>Chakra</code> 。</p><p>使用该内核的浏览器：Edge。</p><h3 id="国内其他浏览器"><a href="#国内其他浏览器" class="headerlink" title="国内其他浏览器"></a>国内其他浏览器</h3><p>上面说到的5大主流浏览器(IE，Edge，Opera，Safari，Firefox，Chrome)，都是单核浏览器。相比较，国内很多浏览器则是双核或多核。即由1个 <code>Trident</code> + N个<code>其他核心</code> 组成的。</p><p>常见的国内浏览器核心如下：</p><p>360安全浏览器（1.0-5.0为 <code>Trident</code>，6.0为 <code>Trident+Webkit</code> ，7.0为 <code>Trident+Blink</code> ）<br>360极速浏览器（7.5之前为 <code>Trident+Webkit</code> ，7.5为 <code>Trident+Blink</code>）<br>猎豹安全浏览器（1.0-4.2版本为 <code>Trident+Webkit</code>，4.3及以后版本为 <code>Trident+Blink</code>）<br>傲游浏览器（傲游1.x、2.x为 <code>Trident</code>，3.x为 <code>Trident+Webkit</code>）<br>世界之窗浏览器（最初为 <code>Trident</code>，2013年采用 <code>Trident+Chromium</code>）<br>搜狗高速浏览器（1.x为 <code>Trident</code>，2.0及以后版本为 <code>Trident+Webkit</code>）<br>UC浏览器（ <code>Blink+Trident</code>）</p><p>对于多核浏览器，<code>Trident</code> 指 <code>兼容模式</code>，而 <code>其他内核</code> 指 <code>高速浏览模式</code> 。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考文章：</p><p><a href="https://blog.csdn.net/BonJean/article/details/78453547" target="_blank" rel="noopener">浏览器内核-渲染引擎、js引擎</a></p><p><a href="https://blog.csdn.net/yuyanjing123456789/article/details/78689595" target="_blank" rel="noopener">五大主流浏览器与四大内核</a></p><p><a href="https://segmentfault.com/a/1190000011064695" target="_blank" rel="noopener">聊聊浏览器内核</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内核简介&quot;&gt;&lt;a href=&quot;#内核简介&quot; class=&quot;headerlink&quot; title=&quot;内核简介&quot;&gt;&lt;/a&gt;内核简介&lt;/h3&gt;&lt;p&gt;一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：&lt;strong&gt;渲染引擎&lt;/strong&gt; 和 &lt;strong&gt;js引擎&lt;/strong&gt; 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 &lt;strong&gt;渲染引擎&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;渲染引擎&lt;/strong&gt; ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 &lt;strong&gt;排版引擎&lt;/strong&gt; ，我们常说的浏览器内核主要指的就是 &lt;strong&gt;渲染引擎&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;js引擎&lt;/strong&gt; ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="前端" scheme="http://jian2333.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://jian2333.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>每天一个Linux命令</title>
    <link href="http://jian2333.github.io/2019/05/16/Linux-Command/"/>
    <id>http://jian2333.github.io/2019/05/16/Linux-Command/</id>
    <published>2019-05-16T03:56:46.000Z</published>
    <updated>2019-05-17T12:49:59.846Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学一个系列，每天一个 Linux 命令</p><p>由于之前的笔记是写在 旧版博客 上的</p><p>所以</p><p>这里就不重新整理一份了，hahaha ~</p><p>直接，<a href="http://www.jianwill.cn/md/linuxList_2019-4-9.html" target="_blank" rel="noopener">传送门</a></p><p>(๑•̀ㅂ•́)و✧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学一个系列，每天一个 Linux 命令&lt;/p&gt;&lt;p&gt;由于之前的笔记是写在 旧版博客 上的&lt;/p&gt;&lt;p&gt;所以&lt;/p&gt;&lt;p&gt;这里就不重新整理一份了，hahaha ~&lt;/p&gt;&lt;p&gt;直接，&lt;a href=&quot;http://www.jianwill.cn/md/linuxList
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="http://jian2333.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="http://jian2333.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于 hexo 的一次踩坑之旅</title>
    <link href="http://jian2333.github.io/2019/05/14/hello-hexo/"/>
    <id>http://jian2333.github.io/2019/05/14/hello-hexo/</id>
    <published>2019-05-14T11:46:17.000Z</published>
    <updated>2019-05-23T10:08:58.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-hexo-的一次踩坑之旅。"><a href="#关于-hexo-的一次踩坑之旅。" class="headerlink" title="关于 hexo 的一次踩坑之旅。"></a>关于 hexo 的一次踩坑之旅。</h2><p>之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。</p><p>后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。</p><a id="more"></a><h3 id="npm-权限问题"><a href="#npm-权限问题" class="headerlink" title="npm 权限问题"></a>npm 权限问题</h3><p>因为之前安装 node 的时候自动安装了 npm ， 然后 Mac 下 npm 是默认安装在 <code>/usr/local/</code> 路径下的，而该路径下很多目录和文件时 <strong>只读的</strong> ，然后在安装 hexo 的时候，会报权限错误；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 此处会报权限错误</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>网上找了一下，主要有四种解决方法：</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>为当前用户添加 <code>npm安装目录</code> 下所有文件的写权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R (whoami)(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong> ：如果路径是 <code>/usr/local/</code> 的话不推荐这种方式，因为改权限会弄乱系统的权限，以后可能导致奇怪的错误(比如无法跟当前系统的其他用户共享)。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>把 <strong>npm</strong> 卸载，并安装在一个有读写权限的路径下；</p><p>推荐 <code>~/.npm-global</code> 路径下；</p><p>1.新建一个全局安装的路径；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.npm-global</span><br></pre></td></tr></table></figure><p>2.配置 npm 使用新的路径；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">'~/.npm-global'</span></span><br></pre></td></tr></table></figure><p>3.打开或者新建 <code>~/.profile</code> ，加入下面一行；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>4.重新启动终端；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>5.测试：安装一个全局包试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jslint</span><br><span class="line"></span><br><span class="line">[luncher@localhost aaa]$ ls ~/.npm-global/bin/</span><br><span class="line">jshint</span><br><span class="line">[luncher@localhost aaa]$</span><br></pre></td></tr></table></figure><h4 id="方法三-推荐"><a href="#方法三-推荐" class="headerlink" title="方法三(推荐)"></a>方法三(推荐)</h4><p>使用 <strong>nvm</strong> 。nvm 可以在一台电脑上管理不同版本的 node，并且使用 nvm 安装 npm 后，npm 默认的安装路径是有读写权限的，也就是说，以后 npm 安装任何包都不用再使用 <code>sudo</code> 参数了。</p><p>官网的解决方案：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener"><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></a>；</p><p>这里有个细节要注意：如果你本地已经安装了npm，你得先把本地的npm卸载，再安装nvm，再使用nvm安装npm；</p><p><strong>1.卸载已安装到全局的 node/npm</strong></p><p>node 命令在 <code>/usr/local/bin/node</code>，npm 命令在 <code>/usr/local/lib/node_modules/npm</code> 下；</p><p>查看已经安装的全局模块，以便卸载后再按不同的 node 版本重新安装；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node_modules<span class="comment">#删除全局 node_modules 目录</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/node<span class="comment">#删除 node</span></span><br><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/bin &amp;&amp; ls -l | grep <span class="string">"../lib/node_modules/"</span> | awk <span class="string">'&#123;print $9&#125;'</span>| xargs rm <span class="comment">#删除全局 node 模块注册的软链</span></span><br></pre></td></tr></table></figure><p><strong>2.安装 nvm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><p>借助第三方工具安装 node</p><ul><li>mac 系统借助 <strong>brew</strong> 安装 <code>node</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><ul><li>centos 系统借助 <strong>yum</strong> 安装 <code>node</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install node</span><br></pre></td></tr></table></figure><h3 id="部署分支问题"><a href="#部署分支问题" class="headerlink" title="部署分支问题"></a>部署分支问题</h3><p>由于 hexo 部署(<code>hexo d</code>) 的原理是，把站点上的所有静态文件删除，并把本地待部署的全部静态站点文件(/public/目录下) push 到远程库上，即完全覆盖；所以 hexo 官方文档有这样一句话 <strong>建议使用 master 作为写作分支，新建一个 public 分支作为发布分支</strong>。在按照这样创建分支后，发现网站打不开，然后在 <a href="https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages" target="_blank" rel="noopener">github pages</a> 的文档里看到这样几句话：</p><ul><li>Reponsitory 必须以 username.github.io 命令，这个 username 为 github 的账户名，网站部署成功后，使用 <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 进行访问；</li><li>必须使用 <strong>master</strong> 分支管理网站静态文件。注意这句话，必须使用 <strong>master</strong> 分支。emmmmm….. 就是这么坑。</li></ul><p>所以，github的建议是：</p><p>使用 <strong>master</strong> 作为发布分支，使用 <strong>hexo</strong> 作为写作分支。</p><h3 id="Hexo-的使用"><a href="#Hexo-的使用" class="headerlink" title="Hexo 的使用"></a>Hexo 的使用</h3><p>Hexo 的使用流程一般如下：</p><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a></p><p>1.安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.创建 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>3.新建 文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>4.生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">// or</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>5.本地预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">// or </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>6.部署到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">// or </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>主题的使用很简单，以下几个步骤即可：</p><p>1.clone 主题到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_blog_dir</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/DIYgod/hexo-theme-sagiri.git themes/sagiri</span><br></pre></td></tr></table></figure><p>2.修改 hexo 配置文件使用主题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: sagiri</span><br></pre></td></tr></table></figure><p>3.修改 主题配置文件，进行个性化设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 路径为：your_blog_dir/themes/sagiri/_config.yml</span><br></pre></td></tr></table></figure><h3 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h3><p>搜集了一些比较好看的主题：</p><p><a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener"><strong>sagiri</strong></a> ：<a href="https://diygod.me/" target="_blank" rel="noopener">https://diygod.me</a></p><p><a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener"><strong>Material X</strong></a> ：<a href="https://xaoxuu.com" target="_blank" rel="noopener">https://xaoxuu.com</a></p><p><strong><a href="https://github.com/elmorec/hexo-theme-inside" target="_blank" rel="noopener">Inside</a></strong> ：<a href="https://blog.oniuo.com" target="_blank" rel="noopener">https://blog.oniuo.com</a></p><p><strong><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a></strong> ：<a href="https://blog.tolvyou.cn" target="_blank" rel="noopener">https://blog.tolvyou.cn</a></p><h3 id="旧版博客"><a href="#旧版博客" class="headerlink" title="旧版博客"></a>旧版博客</h3><p>最后，就是巨丑的<a href="http://www.jianwill.cn" target="_blank" rel="noopener">旧版博客</a>了…….</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于-hexo-的一次踩坑之旅。&quot;&gt;&lt;a href=&quot;#关于-hexo-的一次踩坑之旅。&quot; class=&quot;headerlink&quot; title=&quot;关于 hexo 的一次踩坑之旅。&quot;&gt;&lt;/a&gt;关于 hexo 的一次踩坑之旅。&lt;/h2&gt;&lt;p&gt;之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。&lt;/p&gt;&lt;p&gt;后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>博客搬家啦</title>
    <link href="http://jian2333.github.io/2019/05/13/Migrate-Blog/"/>
    <id>http://jian2333.github.io/2019/05/13/Migrate-Blog/</id>
    <published>2019-05-13T12:43:06.000Z</published>
    <updated>2019-05-17T05:34:48.644Z</updated>
    
    <content type="html"><![CDATA[<p>博客搬家啦</p><p>新博客使用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> + <a href="https://pages.github.com/" target="_blank" rel="noopener">github pages</a> 来搭建</p><p>关于旧博客，对，就是巨丑的那个 ~~</p><p>点我！<a href="http://www.jianwill.cn" target="_blank" rel="noopener">点我就能看</a> ….</p><p>(づ｡◕‿‿◕｡)づ</p><a id="more"></a><p>————————– 分 割 线 ————————–</p><p>补充一下</p><p>由于旧博客不是用 <code>博客框架</code> ( <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，<a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">Jekyll</a>，<a href="https://zh-cn.wordpress.com/" target="_blank" rel="noopener">Wordpress</a> )搭建的</p><p>所以很多文章不是用 <code>markdown</code> 写的，部分用 <code>markdown</code> 写的文章也由于内容太长</p><p>然后，迁移起来就比较麻烦…</p><p>o(╯□╰)o</p><p>所以，就直接给个链接代替了..</p><p>hahaha ~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客搬家啦&lt;/p&gt;&lt;p&gt;新博客使用 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt; + &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github pages&lt;/a&gt; 来搭建&lt;/p&gt;&lt;p&gt;关于旧博客，对，就是巨丑的那个 ~~&lt;/p&gt;&lt;p&gt;点我！&lt;a href=&quot;http://www.jianwill.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我就能看&lt;/a&gt; ….&lt;/p&gt;&lt;p&gt;(づ｡◕‿‿◕｡)づ&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://jian2333.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jian2333.github.io/2019/05/12/hello-world/"/>
    <id>http://jian2333.github.io/2019/05/12/hello-world/</id>
    <published>2019-05-12T11:46:17.000Z</published>
    <updated>2019-05-17T03:51:51.488Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
