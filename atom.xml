<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hi,Jianww</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://jian2333.github.io/"/>
  <updated>2019-05-31T14:52:36.652Z</updated>
  <id>http://jian2333.github.io/</id>
  
  <author>
    <name>Jianww</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CSS3 中的Flex</title>
    <link href="http://jian2333.github.io/2019/05/31/flex/"/>
    <id>http://jian2333.github.io/2019/05/31/flex/</id>
    <published>2019-05-31T12:20:37.000Z</published>
    <updated>2019-05-31T14:52:36.652Z</updated>
    
    <content type="html"><![CDATA[<p>CSS3 引入了一种新的布局模式————弹性盒子。</p><p>引入弹性盒子的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。</p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>弹性盒子由 <code>弹性容器(Flex container)</code> 和 <code>弹性子元素(Flex item)</code> 组成。<code>弹性容器</code> 通过设置 <code>display</code> 的值为 <code>flex</code> 或 <code>flex-inline</code> ，将其定义为 <code>弹性容器</code> 。<code>弹性容器</code> 内包含一个或多个 <code>弹性子元素</code> 。</p><p><code>弹性容器</code> 外和 <code>弹性子元素</code> 内都是正常渲染，<code>弹性盒子</code> 只定义了 <code>弹性子元素</code> 如何在 <code>弹性容器</code> 内的布局。</p><p><code>Flex</code> 即为 <code>弹性布局</code>。设置为 <code>Flex</code> 布局之后，<code>子元素</code> 的 <code>float</code>、<code>clear</code> 和 <code>vertical-align</code> 属性将失效。</p><p>接下来，介绍 <code>Flex</code> 常用的几个属性。</p><a id="more"></a><h3 id="常用属性"><a href="#常用属性" class="headerlink" title="常用属性"></a>常用属性</h3><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h4><p><code>flex-direction</code> ：<code>弹性子元素</code> 在 <code>弹性容器</code> 内 <strong>水平方向</strong> 上的排列规则。</p><p>主要有以下几个值：<code>row</code>、<code>row-reverse</code>、<code>column</code>、<code>column-reverse</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>row</strong></p><ul><li><strong>默认值</strong> ；水平方向，从左往右正常排列。</li><li><img src="/images/flex-fd-1.jpg" alt></li></ul><p><strong>row-reverse</strong></p><ul><li>水平方向，从右往左排列。</li><li><img src="/images/flex-fd-2.jpg" alt></li></ul><p><strong>column</strong></p><ul><li>垂直方向，从上往下排列。</li><li><img src="/images/flex-fd-3.jpg" alt></li></ul><p><strong>column-reverse</strong></p><ul><li>垂直方向，从下往上排列。</li><li><img src="/images/flex-fd-4.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置改属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h4><p><code>flex-wrap</code> ：规定 <code>弹性子元素</code> 是一行还是多行显示在 <code>弹性盒子</code> 内。即 <code>弹性子元素</code> 是否换行。</p><p>主要有以下几个值：<code>nowrap</code>、<code>wrap</code>、<code>wrap-reverse</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>nowrap</strong></p><ul><li><strong>默认值</strong> ； <code>弹性子元素</code> 不换行，宽度会改变(压缩)。</li><li><img src="/images/flex-fw-2.jpg" alt></li></ul><p><strong>wrap</strong></p><ul><li><code>弹性子元素</code> 换行，宽度不会改变。</li><li><img src="/images/flex-fw-1.jpg" alt></li></ul><p><strong>wrap-reverse</strong></p><ul><li><code>弹性子元素</code> 换行，宽度不会改变，且从右往左排序。</li><li><img src="/images/flex-fw-3.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h4><p><code>flex-flow</code> ：<code>flex-direction</code> 和 <code>flex-wrap</code> 的组合，第一个参数为 <code>flex-direction</code> ，第二个参数为 <code>flex-wrap</code> 。</p><p><strong>row-reverse wrap</strong></p><ul><li>反向排序，且换行。</li><li><img src="/images/flex-ff-1.jpg" alt></li></ul><h4 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h4><p><code>justify-content</code> ：<code>弹性子元素</code> 关于 <code>弹性盒子</code> 垂直轴，在水平方向上的分布规则。</p><p>主要有以下几个值：<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>space-between</code>、<code>space-around</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>flex-start</strong></p><ul><li><strong>默认值</strong> ；不拆分，紧贴 <code>弹性容器</code> 的左边框。</li><li><img src="/images/flex-jc-1.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li>不拆分，紧贴 <code>弹性容器</code> 的右边框。</li><li><img src="/images/flex-jc-2.jpg" alt></li></ul><p><strong>center</strong></p><ul><li>不拆分，在 <code>弹性容器</code> 内居中显示。</li><li><img src="/images/flex-jc-3.jpg" alt></li></ul><p><strong>space-between</strong></p><ul><li>拆分，分别紧贴 <code>弹性容器</code> 的左、右边框， <code>弹性子元素</code> 之间由 <strong>空白</strong> 分隔。</li><li><img src="/images/flex-jc-4.jpg" alt></li></ul><p><strong>space-around</strong></p><ul><li>拆分，每个 <code>弹性子元素</code> 由宽度相同的 <strong>空白</strong> 围绕。所以 <code>弹性子元素到边框</code> 的距离是 <code>弹性子元素到弹性子元素</code> 距离到一半。</li><li><img src="/images/flex-jc-5.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="align-content"><a href="#align-content" class="headerlink" title="align-content"></a>align-content</h4><p><code>align-content</code> ：<code>弹性子元素</code> 关于 <code>弹性盒子</code> 水平轴，在垂直方向上的分布规则。</p><p>主要有以下几个值：<code>stretch</code>、<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>space-between</code>、<code>space-around</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>stretch</strong> ：</p><ul><li><strong>默认值</strong> ；拆分，<code>弹性子元素</code> 被拉伸以适应 <code>弹性容器</code> 。</li><li><img src="/images/flex-ac-1.jpg" alt></li></ul><p><strong>flex-start</strong></p><ul><li>不拆分，<code>弹性子元素</code> 紧贴 <code>弹性容器</code> 的上边框。</li><li><img src="/images/flex-ac-2.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li>不拆分，<code>弹性子元素</code> 紧贴 <code>弹性容器</code> 的下边框。</li><li><img src="/images/flex-ac-3.jpg" alt></li></ul><p><strong>center</strong></p><ul><li>不拆分，在 <code>弹性容器</code> 内居中显示。</li><li><img src="/images/flex-ac-4.jpg" alt></li></ul><p><strong>space-between</strong></p><ul><li>拆分，分别紧贴 <code>弹性容器</code> 的上、下边框，<code>弹性子元素</code> 之间由 <strong>空白</strong> 分隔。</li><li><img src="/images/flex-ac-5.jpg" alt></li></ul><p><strong>space-around</strong></p><ul><li>拆分，每个 <code>弹性子元素</code> 由宽度相同的 <strong>空白</strong> 围绕。所以 <code>弹性子元素到边框</code> 的距离是 <code>弹性子元素到弹性子元素</code> 距离到一半。</li><li><img src="/images/flex-ac-6.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h4><p><code>align-items</code> ：设置 <code>弹性容器</code> 内的 <strong>所有</strong> 的 <code>弹性子元素</code> 的对齐方式。</p><p>主要有以下几个值：<code>stretch</code>、<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>baseline</code>、<code>initial</code>、<code>inherit</code></p><p><strong>stretch</strong></p><ul><li><strong>默认值</strong> ；拉伸 <code>弹性子元素</code> 以适应 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-1.jpg" alt></li></ul><p><strong>flex-start</strong></p><ul><li><code>弹性子元素</code> 向上对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-2.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li><code>弹性子元素</code> 向下对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-3.jpg" alt></li></ul><p><strong>center</strong></p><ul><li><code>弹性子元素</code> 居中对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-ai-4.jpg" alt></li></ul><p><strong>baseline</strong></p><ul><li><code>弹性子元素</code> 对齐 <code>弹性容器</code> 的基线(基本等效于 <code>flex-start</code> )。</li><li><img src="/images/flex-ai-5.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h4 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h4><p><code>align-items</code> ：设置 <code>弹性容器</code> 内的 <strong>单个</strong> <code>弹性子元素</code> 的对齐方式。</p><p>主要有以下几个值：<code>auto</code>、<code>stretch</code>、<code>flex-start</code>、<code>flex-end</code>、<code>center</code>、<code>baseline</code>、<code>initial</code>、<code>inherit</code> 。</p><p><strong>auto</strong></p><ul><li><strong>默认值</strong> ；继承它的父容器 (<code>弹性容器</code>) 的 <code>align-items</code> 属性，如果没有父容器则该值为 <code>stretch</code> 。</li><li><img src="/images/flex-as-1.jpg" alt></li></ul><p><strong>stretch</strong></p><ul><li>拉伸 <code>弹性子元素</code> 以适应 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-2.jpg" alt></li></ul><p><strong>flex-start</strong></p><ul><li><code>弹性子元素</code> 向上对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-3.jpg" alt></li></ul><p><strong>flex-end</strong></p><ul><li><code>弹性子元素</code> 向下对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-4.jpg" alt></li></ul><p><strong>center</strong></p><ul><li><code>弹性子元素</code> 居中对齐 <code>弹性容器</code> 。</li><li><img src="/images/flex-as-5.jpg" alt></li></ul><p><strong>baseline</strong></p><ul><li><code>弹性子元素</code> 对齐 <code>弹性容器</code> 的基线(基本等效于 <code>flex-start</code> )。</li><li><img src="/images/flex-as-6.jpg" alt></li></ul><p><strong>initial</strong></p><ul><li>设置该属性为它的默认值。</li></ul><p><strong>inherit</strong></p><ul><li>从父元素继承该属性。</li></ul><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.jianshu.com/p/d9373a86b748" target="_blank" rel="noopener">css display:flex 属性</a></p><p><a href="https://www.w3cschool.cn/cssref/css3-pr-flex.html" target="_blank" rel="noopener">CSS flex 属性</a></p><p><a href="https://www.w3cschool.cn/css3/2h6g5xoy.html" target="_blank" rel="noopener">CSS3 弹性盒子(Flex Box)</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CSS3 引入了一种新的布局模式————弹性盒子。&lt;/p&gt;&lt;p&gt;引入弹性盒子的目的是提供一种更加有效的方式来对一个容器中的子元素进行排列、对齐和分配空白空间。&lt;/p&gt;&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;弹性盒子由 &lt;code&gt;弹性容器(Flex container)&lt;/code&gt; 和 &lt;code&gt;弹性子元素(Flex item)&lt;/code&gt; 组成。&lt;code&gt;弹性容器&lt;/code&gt; 通过设置 &lt;code&gt;display&lt;/code&gt; 的值为 &lt;code&gt;flex&lt;/code&gt; 或 &lt;code&gt;flex-inline&lt;/code&gt; ，将其定义为 &lt;code&gt;弹性容器&lt;/code&gt; 。&lt;code&gt;弹性容器&lt;/code&gt; 内包含一个或多个 &lt;code&gt;弹性子元素&lt;/code&gt; 。&lt;/p&gt;&lt;p&gt;&lt;code&gt;弹性容器&lt;/code&gt; 外和 &lt;code&gt;弹性子元素&lt;/code&gt; 内都是正常渲染，&lt;code&gt;弹性盒子&lt;/code&gt; 只定义了 &lt;code&gt;弹性子元素&lt;/code&gt; 如何在 &lt;code&gt;弹性容器&lt;/code&gt; 内的布局。&lt;/p&gt;&lt;p&gt;&lt;code&gt;Flex&lt;/code&gt; 即为 &lt;code&gt;弹性布局&lt;/code&gt;。设置为 &lt;code&gt;Flex&lt;/code&gt; 布局之后，&lt;code&gt;子元素&lt;/code&gt; 的 &lt;code&gt;float&lt;/code&gt;、&lt;code&gt;clear&lt;/code&gt; 和 &lt;code&gt;vertical-align&lt;/code&gt; 属性将失效。&lt;/p&gt;&lt;p&gt;接下来，介绍 &lt;code&gt;Flex&lt;/code&gt; 常用的几个属性。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="css" scheme="http://jian2333.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>输入url之后...</title>
    <link href="http://jian2333.github.io/2019/05/25/after-input-url/"/>
    <id>http://jian2333.github.io/2019/05/25/after-input-url/</id>
    <published>2019-05-25T13:54:02.000Z</published>
    <updated>2019-05-27T01:18:43.462Z</updated>
    
    <content type="html"><![CDATA[<p>最近找工作，发现面试官都会问一个问题：在浏览器输入url之后，会发生什么？</p><p>那么，在浏览器输入url之后，到底会发生什么呢？</p><p>接下来，我们一起学习一下 ~</p><a id="more"></a><h3 id="主要过程"><a href="#主要过程" class="headerlink" title="主要过程"></a>主要过程</h3><p>当我们在浏览器地址栏输入url之后，主要会经过下面几个步骤：</p><p>域名解析 –&gt; 发起TCP的3次握手 –&gt; 建立TCP连接后，发起http请求 –&gt; 服务器响应http请求，发送html代码给浏览器 –&gt; (默认)服务器发送html代码后，发起4次挥手，断开TCP请求 –&gt; 浏览器渲染页面</p><h4 id="1-域名解析"><a href="#1-域名解析" class="headerlink" title="1. 域名解析"></a>1. 域名解析</h4><p>域名解析，又叫 <strong>DNS解析</strong>。用于把地址栏的URL解析成服务器的IP地址，进而访问服务器。</p><p>域名解析按优先级，会有以下几种情况：</p><p><strong>查询浏览器缓存</strong> ：浏览器会缓存之前拿到的DNS 2-30分钟时间，如果没有找到，继续下一种情况；</p><p><strong>查询系统缓存</strong> ：检查 <strong>hosts</strong> 文件，这个文件保存了一些以前访问过的网站的域名和IP的数据。它就像一个本地的数据库，如果找到就可以直接获取目标主机的IP地址了。如果没找到，继续下一种情况；</p><p><strong>查询路由器缓存</strong> ：路由器有自己的DNS缓存，可能包含了需要查询的内容。如果没有，继续下一种情况；</p><p><strong>查询ISP DNS 缓存</strong> ：ISP服务商的DNS缓存（<strong>本地服务器缓存</strong>），那里可能有相关的内容。如果还没有，继续下一种情况；</p><p><strong>递归查询</strong> ：从 <code>根域名服务器</code> –&gt; <code>顶级域名服务器</code> –&gt; <code>权限域名服务器</code> –&gt; <code>得到服务器IP</code> ；</p><p>举个(ISP+递归查询)例子，浏览器发起一个DNS的系统调用，首先会先向本地配置的首选DNS服务器(一般是电信运营商提供的，也可以使用像Google提供的DNS服务器)发起域名解析请求。运营商的DNS服务器首先查找自身的缓存，找到对应的条目，且没有过期，则解析成功。如果没有找到对应的条目，则由运营商的DNS代我们的浏览器发起迭代的DNS解析请求。</p><p>它首先会找一个 <code>根域的DNS的IP地址</code> ，找到 <code>根域</code> 的地址后，就会向其发起请求(请问 <code>www.linux178.com</code> 这个域名的IP地址是多少啊？ )，<code>根域</code> 发现这是一个 <code>顶级域com域</code> 的一个域名，就告诉运营商的DNS我不知道这个域名的IP地址，但我知道 <code>com域</code> 的IP地址，你可以去问它，于是运营商的DNS就得到了 <code>com域</code> 的IP地址，又向 <code>com域</code> 的DNS地址发起了请求(请问 <code>www.linux178.com</code> 这个域名的IP地址是多少啊？)，<code>com域</code> 这台服务器告诉运营商DNS，我不知道 <code>www.linux178.com</code> 这个域名的IP地址，但我知道 <code>linxu178.com</code> 这个域的IP地址，你可以去问它，于是运营商的DNS又向 <code>linux178.com</code> 这个域的DNS地址(这个一般就是由域名注册商提供的，像万网、新网等)发送请求(请问 <code>www.linux178.com</code> 这个域名的IP地址是多少啊？)，这个时候 <code>linux178.com域</code> 的DNS服务器一查，诶，果然在我这里，于是就把找到的结果返回给运营商的DNS服务器，这个时候运营商的DNS服务器就拿到了 <code>www.linux178.com</code> 这个域名的IP地址了，之后再返回给浏览器，浏览器就得到要访问域名的IP地址了。</p><h4 id="2-TCP的三次握手"><a href="#2-TCP的三次握手" class="headerlink" title="2. TCP的三次握手"></a>2. TCP的三次握手</h4><p><img src="/images/aiu-1.jpg" alt></p><p><strong>第一次握手</strong> ：Client首先发送一个连接试探，ACK=0 表示确认号无效，SYN=1 表示这是一个请求连接或连接接受报文，同时表示这个接受报不能携带数据，seq=x 表示Client自己的初始序号(seq=0 就代表这是第0号包)，这时候Client进入 <code>syn_sent</code> ，表示客户端等待服务器的响应；</p><p><strong>第二次握手</strong> ：Server监听到连接请求报文后，如同意建立连接，则向Client发送确认。TCP报文首部中的 SYN 和 ACK 都置1，ack=x+1 表示期望收到对方下一个报文段的第一个数据字节序号是x+1，同时表明x为止的所有数据都已正确收到(ack=1 其实就是 ack=0+1，也就是期望客户端的第1个包)，seq=y 表示Server自己的初始序号(seq=0 就代表这是服务器这边发出的第0号包)。这时服务器进入 <code>syn_rcvd</code> 状态，表示服务器已经收到Client的连接请求，等待Client的确认；</p><p><strong>第三次握手</strong> ：Client收到确认后还需要再次发送确认，同时携带要发送给Server的数据。ACK=1 表示确认号 ack=y+1 有效(代表收到服务器的第1个包)，Client自己的序号seq=x+1(表示这就是我的第一个包，相对于第0个包来说的)，一旦收到Client的确认后，这个TCP连接就进入了 <code>Established</code> 状态，就可以发起http请求了。</p><h5 id="为什么要3次握手"><a href="#为什么要3次握手" class="headerlink" title="为什么要3次握手"></a>为什么要3次握手</h5><p>为了防止已失效的连接请求报文突然又传送到了服务器，进而产生错误。</p><p><strong>举个例子：</strong></p><p>“已失效的连接请求报文段”的产生在这样一种情况下：client发出的第一个连接请求报文段并没有丢失，而是在某个网络节点长时间滞留了，以致延误到连接释放以后的某个时间才到达server。这本来是一个早已失效的报文段，但server收到此报文段后，误认为这是client再出发出的一个新的连接请求。于是就像client发出确认报文段，同意建立连接。假设不采用 <code>三次握手</code> ，那么只要server发出确认，新的连接就建立了。由于现在client并没有发出建立连接的请求，因此不会理睬server的确认，也不会向server发送数据。但server却以为新的连接已经建立了，并一直在等待client发来数据。这样，server的很多资源就白白浪费了。采用 <code>三次握手</code> 的方法就可以防止上述现象的发生。例如刚才那种情况，client不会向server的确认发出确认。server由于收不到确认，就知道client并没有要求建立连接。</p><h4 id="3-传输数据"><a href="#3-传输数据" class="headerlink" title="3. 传输数据"></a>3. 传输数据</h4><h5 id="HTTP请求报文"><a href="#HTTP请求报文" class="headerlink" title="HTTP请求报文"></a>HTTP请求报文</h5><p>一个HTTP请求报文由 <code>请求行(request line)</code> ，<code>请求头部(header)</code> ，<code>空行</code> ，<code>请求数据</code> 4个部分组成，下图给出了请求报文的一般格式。</p><p><img src="/images/aiu-4.jpg" alt></p><p><strong>请求行</strong></p><p>请求行分为三个部分：<code>请求方法</code> ，<code>请求地址</code> 和 <code>协议版本</code> 。</p><p><code>请求方法</code></p><p>HTTP/1.1 定义的请求方法有8中：<code>GET</code>、<code>POST</code>、<code>PUT</code>、<code>DELETE</code>、<code>PATCH</code>、<code>HEAD</code>、<code>OPTIONS</code>、<code>TRACE</code> 。</p><p>最常用的两种是 <code>GET</code> 和 <code>POST</code> ，如果是 RESTful 接口的话一般会用到 <code>GET</code>、<code>POST</code>、<code>DELETE</code>、<code>PUT</code> 。</p><p><code>请求地址</code></p><p>URL：统一资源定位符，是一种资源位置的抽象唯一识别方法。</p><p>组成如下(端口和路径有时可以省略) ：</p><p><img src="/images/aiu-5.jpg" alt></p><p><code>GET</code> 请求时，有时会带参数。</p><p><code>协议版本</code></p><p>协议版本的格式为：<code>HTTP/主版本号.次版本号</code> ，常用的有 <code>HTTP/1.0</code> 和 <code>HTTP/1.1</code> 。</p><p><strong>请求头部</strong></p><p>请求头部为请求报文添加了一些附加信息，由 <strong>名/值</strong> 对组成，每行一对，名和值之间用冒号分隔。</p><p>常见请求头如下：</p><p><img src="/images/aiu-6.jpg" alt></p><p>请求头部的最后会有一个 <code>空行</code> ，表示请求头部结束，接下来为请求数据。这一行非常重要，必不可少。</p><p><strong>请求数据</strong></p><p>可选部分，比如 <code>GET</code> 请求就没有请求数据。</p><p>下面是一个 <code>POST</code> 方法的请求报文：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST 　/index.php　HTTP/1.1 　　 //请求行</span><br><span class="line"><span class="attribute">Host</span>: localhost</span><br><span class="line"><span class="attribute">User-Agent</span>: Mozilla/5.0 (Windows NT 5.1; rv:10.0.2) Gecko/20100101 Firefox/10.0.2　　//请求头</span><br><span class="line"><span class="attribute">Accept</span>: text/html,application/xhtml+xml,application/xml;q=0.9,/;q=0.8</span><br><span class="line"><span class="attribute">Accept-Language</span>: zh-cn,zh;q=0.5</span><br><span class="line"><span class="attribute">Accept-Encoding</span>: gzip, deflate</span><br><span class="line"><span class="attribute">Connection</span>: keep-alive</span><br><span class="line"><span class="attribute">Referer</span>: http://localhost/</span><br><span class="line"><span class="attribute">Content-Length：25</span></span><br><span class="line"><span class="attribute">Content-Type：application/x-www-form-urlencoded</span></span><br><span class="line">　　//空行</span><br><span class="line">username=aa&amp;password=1234　　//请求数据</span><br></pre></td></tr></table></figure><h5 id="HTTP响应报文"><a href="#HTTP响应报文" class="headerlink" title="HTTP响应报文"></a>HTTP响应报文</h5><p>HTTP响应报文主要由 <code>状态行</code> ，<code>响应头部</code> ，<code>空行</code> 和 <code>响应数据</code> 4个部分组成。下图给出了响应报文的一般格式。</p><p><img src="/images/aiu-7.jpg" alt></p><p><strong>状态行</strong></p><p>由3部分组成，分别为：<code>协议版本</code> ，<code>状态码</code> ，<code>状态码描述</code> 。</p><p>其中 <code>协议版本</code> 和请求报文一致，<code>状态码描述</code> 是对状态码的简单描述，所以这里只介绍 <code>状态码</code> 。</p><p><code>状态码</code></p><p><code>状态码</code> 为3位数字。</p><p><strong>1xx</strong> ：指示信息——表示请求已接收，继续处理。</p><p><strong>2xx</strong> ：成功——表示请求已被成功接收、理解、接受。</p><p><strong>3xx</strong> ：重定向——表示要完成请求必须进行进一步的操作。</p><p><strong>4xx</strong> ：客户端错误——请求有语法错误或请求无法实现。</p><p><strong>5xx</strong> ：服务器端错误——服务器未能实现合法的请求。</p><p>下面列举几个常见的：</p><p><img src="/images/aiu-8.jpg" alt></p><p><strong>响应头部</strong></p><p>与 <code>请求头部</code> 类似，为响应报文添加一些附加的信息。</p><p>常见的 <code>响应头部</code> 如下：</p><p><img src="/images/aiu-9.jpg" alt></p><p><strong>响应数据</strong></p><p>用于存放需要返回给客户端的数据信息。</p><p>下面是一个响应报文的实例：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 <span class="number">200</span> OK　　//状态行</span><br><span class="line"><span class="attribute">Date</span>: Sun, 17 Mar 2013 08:12:54 GMT　　//响应头部</span><br><span class="line"><span class="attribute">Server</span>: Apache/2.2.8 (Win32) PHP/5.2.5</span><br><span class="line"><span class="attribute">X-Powered-By</span>: PHP/5.2.5</span><br><span class="line"><span class="attribute">Set-Cookie</span>: PHPSESSID=c0huq7pdkmm5gg6osoe3mgjmm3; path=/</span><br><span class="line"><span class="attribute">Expires</span>: Thu, 19 Nov 1981 08:52:00 GMT</span><br><span class="line"><span class="attribute">Cache-Control</span>: no-store, no-cache, must-revalidate, post-check=0, pre-check=0</span><br><span class="line"><span class="attribute">Pragma</span>: no-cache</span><br><span class="line"><span class="attribute">Content-Length</span>: 4393</span><br><span class="line"><span class="attribute">Keep-Alive</span>: timeout=5, max=100</span><br><span class="line"><span class="attribute">Connection</span>: Keep-Alive</span><br><span class="line"><span class="attribute">Content-Type</span>: text/html; charset=utf-8</span><br><span class="line">　　//空行</span><br><span class="line"></span><br><span class="line">&lt;html&gt;　　响应数据</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;title&gt;HTTP响应示例&lt;title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">Hello HTTP!</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="4-TCP的四次挥手"><a href="#4-TCP的四次挥手" class="headerlink" title="4. TCP的四次挥手"></a>4. TCP的四次挥手</h4><p>默认情况下的TCP连接，在服务器发送一次html数据给浏览器后，服务器就会执行 <strong>四次挥手</strong> 以 <strong>断开TCP连接</strong> ，除了下面这种情况：</p><p><strong>持久连接</strong> ：只要任意一端没有明确的提出断开连接，则保持TCP连接状态。在 <code>请求首部字段</code> 中设置 <code>Connection:keep-alive</code> 即表示使用了持久连接。</p><p><img src="/images/aiu-2.jpg" alt></p><p><strong>注意</strong> ：</p><ul><li>主机1可以是 <code>客户端</code>，也可以是 <code>服务器端</code> ；</li><li>默认情况下，主机1是 <code>客户端</code>，即 <strong>客户端主动断开连接</strong> 的情况 ；</li><li>若 <code>服务器端</code> 主动断开连接，则主机1是 <code>服务器端</code> ；</li></ul><p><strong>过程描述</strong> ：</p><ol><li><code>主机1</code> 进程发出连接释放报文，并停止发送数据。释放数据报文首部，FIN=1，其序列号为seq=u(等于前面已经传送过来的数据的最后一个字节的序号加1)，此时，<code>主机1</code> 进入 FIN-WAIT-1(终止等待1) 状态。TCP规定，FIN报文段即使不携带数据，也要消耗一个序号。</li><li><code>主机2</code> 收到连接释放报文，发出确认报文，ACK=1，ack=u+1，并带上自己的序列号seq=v，此时，<code>主机2</code>就进入了 CLOSE-WAIT(关闭等待) 状态。<code>主机2</code>通知高层的应用程序，<code>主机1</code> 向 <code>主机2</code> 的方向就释放了，这时候处于半关闭状态，即 <code>主机1</code> 已经没有数据要发送了，但是 <code>主机2</code> 若发送数据，<code>主机1</code> 仍然要接受。这个状态还要持续一段时间，也就是整个 CLOSE-WAIT 状态持续的时间。</li><li><code>主机1</code> 收到 <code>主机2</code> 的确认请求后，此时，<code>主机1</code> 就进入 FIN-WAIT-2(终止等待2) 状态，等待 <code>主机2</code> 发送连接释放报文(在这之前还需要接受 <code>主机2</code> 发送的最后的数据)。</li><li><code>主机2</code> 将最后的数据发送完毕后，就向 <code>主机1</code> 发送连接释放报文，FIN=1，ack=u+1，由于在半关闭状态，<code>主机2</code> 很可能又发送了一些数据，假定此时的序列号为seq=w，此时，<code>主机2</code> 就进入了 LAST-ACK(最后确认) 状态，等待 <code>主机1</code> 的确认。</li><li><code>主机1</code> 收到 <code>主机2</code> 的连接释放报文后了，比如发出确认，ACK=1，ack=w+1，而自己的序列号seq=u+1，此时，<code>主机1</code> 就进入了 TIME-WAIT(时间等待) 状态。注意此时TCP链接还没有释放，必须经过 2MSL(最长报文段寿命) 的时间后，当 <code>主机1</code> 撤销相应的TCB后，才进入 CLOSED 状态。</li><li><code>主机2</code> 只要接收到了 <code>主机1</code> 发出的确认，就立即进入 CLOSED 状态。同样，撤销TCB后，就结束了这次的TCP连接。可以看到，<code>主机2</code> 结束TCP连接的时间要比 <code>主机1</code> 早一些。</li></ol><h5 id="为什么要四次挥手"><a href="#为什么要四次挥手" class="headerlink" title="为什么要四次挥手"></a>为什么要四次挥手</h5><p>因为三次握手时只是建立一个连接，之后才传递数据，在握手时是没有数据传输的，所以3次即可。</p><p>而挥手时，<code>主机1</code> 停止向 <code>主机2</code> 传输数据后，<code>主机2</code> 会立刻响应 <code>主机1</code>，先回一个ACK报文，告诉 <code>主机1</code>，”你发的FIN报文我收到了，但只有等我 <code>主机2</code> 的所有报文都发送完毕后，我才能发送FIN报文”，所以挥手的时候 <code>主机2</code> 要分两步，所以挥手需要四次。</p><h5 id="为什么要等待-2MSL"><a href="#为什么要等待-2MSL" class="headerlink" title="为什么要等待 2MSL"></a>为什么要等待 2MSL</h5><p>因为网络可能不稳定，最后一个 ACK报文有可能会丢失，所以，TIME-WAIT 状态就是用来重发可能丢失的 ACK报文(第四步的报文)。</p><p>在四次挥手的过程中，<code>主机2</code> 在 LAST-ACK(最后确认) 状态时，如果没接收到了 <code>主机1</code> 发来的 ACK报文，则不断发送FIN片段。所以 <code>主机1</code> 不能立即关闭，它必须确认 <code>主机2</code> 接收到了该 ACK之后，才关闭连接。所以，<code>主机1</code> 会设置一个计时器，等待 2MSL的时间，如果再次收到FIN，说明之前发送的ACK没有传到 <code>主机2</code>，于是会重新发一个ACK给 <code>主机2</code>；如果等待 2MSL后没有收到FIN，说明 <code>主机2</code> 已收到ACK且已关闭，于是 <code>主机1</code> 也关闭，TCP连接结束。</p><h4 id="5-渲染HTML页面"><a href="#5-渲染HTML页面" class="headerlink" title="5. 渲染HTML页面"></a>5. 渲染HTML页面</h4><p>客户端拿到服务器传输过来的文件后，找到 <strong>HTML</strong> 和 <strong>MIME</strong> 文件，通过 <strong>MIME</strong> 文件，浏览器知道要用页面渲染引擎来处理 <strong>HTML</strong> 文件。</p><p>页面渲染主要有以下几个步骤：</p><p><strong>1. 解析html源码，创建一个DOM树</strong></p><p>在 DOM 树中，每一个 HTML 标签都有一个对应的节点，并且每一个文本也都会有一个对应的文本节点。</p><p><strong>2. 解析CSS代码，计算出最终的样式数据，形成css对象模型CSSOM</strong></p><p>首先会忽略非法的CSS代码，然后按 浏览器默认设置——用户设置——外链样式——内联样式——style样式 的顺序进行渲染。</p><p><strong>3. 利用DOM和CSSOM构建一个渲染树（rendering tree）</strong></p><p>渲染树和 DOM 树有点像，但是是有区别的。</p><p>DOM 树完全和 HTML标签一一对应，但是渲染树会忽略掉不需要渲染的元素，比如 head、display:none 的元素等。</p><p>而且一大段文本中的每一行在渲染树中都是一个独立的节点。</p><p>渲染树中的每一个节点都存储有对应的css属性。</p><p><strong>4. 浏览器根据渲染树，直接把页面绘制到屏幕上</strong></p><h5 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h5><ol><li>JS和图片会阻塞 DOM 的加载和渲染。</li><li>CSS不会阻塞 DOM 的加载，但会阻塞 DOM 的渲染(即浏览器控制台可以打印 DOM 节点了，但页面还是空白，没有渲染)。</li><li>CSS会阻塞JS的加载和执行。</li><li>加载JS时，添加 <code>defer</code> 参数，脚本会立即下载但不执行，在 DOM 加载完成后再执行。多个 <code>defer</code> 的脚本会按顺序执行。</li><li>加载JS时，添加 <code>async</code>参数，脚本会异步加载再执行，执行的时候还是会阻塞 DOM 的加载。多个 <code>async</code> 的脚本不会按顺序执行。</li><li>实际情况下，有时候多个 <code>defer</code> 时加载完后不一定会按顺序执行，所以建议，<strong>尽量合并成一个JS再使用 <code>defer</code></strong>。</li><li>关于 <code>defer</code> 和 <code>async</code> ，可以查看下图：</li></ol><p><img src="/images/aiu-3.jpg" alt></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://www.cnblogs.com/engeng/articles/5959335.html" target="_blank" rel="noopener">1. 一次完整的HTTP请求过程</a></p><p><a href="https://www.cnblogs.com/tisikcci/p/5866753.html" target="_blank" rel="noopener">2. 在浏览器输入URL并按回车后都发生了什么?</a></p><p><a href="https://blog.csdn.net/yezitoo/article/details/78193794" target="_blank" rel="noopener">3. 一次完整的HTTP请求过程</a></p><p><a href="https://blog.csdn.net/bit_clearoff/article/details/60884905" target="_blank" rel="noopener">4. 服务端主动终止连接的情况分析</a></p><p><a href="https://blog.csdn.net/qq_38950316/article/details/81087809" target="_blank" rel="noopener">5. TCP的三次握手和四次挥手理解及面试题（很全面）</a></p><p><a href="https://segmentfault.com/q/1010000000640869" target="_blank" rel="noopener">6. defer和async的区别</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近找工作，发现面试官都会问一个问题：在浏览器输入url之后，会发生什么？&lt;/p&gt;&lt;p&gt;那么，在浏览器输入url之后，到底会发生什么呢？&lt;/p&gt;&lt;p&gt;接下来，我们一起学习一下 ~&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://jian2333.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>浅谈浏览器内核</title>
    <link href="http://jian2333.github.io/2019/05/23/browser-kernel/"/>
    <id>http://jian2333.github.io/2019/05/23/browser-kernel/</id>
    <published>2019-05-23T10:23:37.000Z</published>
    <updated>2019-05-26T07:56:13.671Z</updated>
    
    <content type="html"><![CDATA[<h3 id="内核简介"><a href="#内核简介" class="headerlink" title="内核简介"></a>内核简介</h3><p>一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：<strong>渲染引擎</strong> 和 <strong>js引擎</strong> 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 <strong>渲染引擎</strong> 。</p><p><strong>渲染引擎</strong> ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 <strong>排版引擎</strong> ，我们常说的浏览器内核主要指的就是 <strong>渲染引擎</strong> 。</p><p><strong>js引擎</strong> ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。</p><a id="more"></a><h3 id="5-大主流浏览器-按时间顺序"><a href="#5-大主流浏览器-按时间顺序" class="headerlink" title="5 大主流浏览器(按时间顺序)"></a>5 大主流浏览器(按时间顺序)</h3><h4 id="IE-浏览器"><a href="#IE-浏览器" class="headerlink" title="IE 浏览器"></a>IE 浏览器</h4><p>IE 是微软其下的浏览器，IE4~IE11 使用的都是 <code>Trident</code> 内核。</p><p>Windows10 发布后，IE 将其内置浏览器命名为 <strong>Edge</strong>，使用新内核 <code>EdgeHTML</code> 。</p><p>IE 从版本11开始，初步支持 <code>WebGL</code> 技术。IE8 的js引擎是 <code>jscript</code> ，IE9开始使用 <code>Chakra</code> ，这两个版本差别很大，<code>Chakra</code> 无论是速度还是标准化方面都很出色。</p><p>Edge的JS引擎是 <code>Chakra</code>。</p><h4 id="Opera-浏览器"><a href="#Opera-浏览器" class="headerlink" title="Opera 浏览器"></a>Opera 浏览器</h4><p>Opera 是挪威 Opera Software ASA 公司其下的浏览器。</p><p>1995年，Opera 公司发布第一版 Opera 浏览器，并使用 <code>Presto</code> 内核。</p><p>2016年奇虎360和昆仑万维收购了 Opera 浏览器，并改用当时 Google 开源的 <code>webkit</code> 内核。</p><p>之后 Opera 又跟随 Google 将浏览器内核改为 <code>Blink</code> 。</p><h4 id="Safari-浏览器"><a href="#Safari-浏览器" class="headerlink" title="Safari 浏览器"></a>Safari 浏览器</h4><p>Safari 是 Apple 公司自研的浏览器，主要用于 Apple 自身的产品。</p><p>第二次浏览器大战也是从苹果公司发布 Safari 开始的。</p><p>2003年，苹果公司在苹果手机上开发 Safari 浏览器，利用自己得天独厚的手机市场份额使 Safari 浏览器迅速成为世界主流浏览器。</p><p>Safari 是最早使用 <code>webkit</code> 内核的浏览器，后来升级为 <code>webkit2</code> 内核，也是现在苹果默认的浏览器。</p><p>Safari 的JS引擎是 <code>JavaScriptCore</code> 。</p><h4 id="Firefox-浏览器"><a href="#Firefox-浏览器" class="headerlink" title="Firefox 浏览器"></a>Firefox 浏览器</h4><p>Firefox 是 Mozilla 公司旗下的浏览器，也就是 网景 公司后来的浏览器。</p><p>网景被收购后，网景人员创办了 Mozilla 基金会，这是一个非营利性的组织，他们在2004年推出自己的浏览器 Firefox。</p><p>Firefox 采用 <code>Gecko</code> 内核。</p><p>Firefox 的JS引擎是 <code>SpiderMonkey</code> 。</p><p><code>Gecko</code> 是一个开源的项目，代码完全公开，因此受到很多人的青睐。</p><h4 id="Chrome-浏览器"><a href="#Chrome-浏览器" class="headerlink" title="Chrome 浏览器"></a>Chrome 浏览器</h4><p>Chrome 是 Google 公司的浏览器。</p><p>Chrome 最开始使用 <code>webkit</code> 分支出的 <code>Chromium</code> 内核，后来升级为 <code>Blink</code> 内核。</p><p>Chrome 的JS引擎是 <code>V8</code> 。</p><h4 id="浏览器与JS引擎"><a href="#浏览器与JS引擎" class="headerlink" title="浏览器与JS引擎"></a>浏览器与JS引擎</h4><p><img src="/images/bk-2.jpg" alt></p><h3 id="5-大内核"><a href="#5-大内核" class="headerlink" title="5 大内核"></a>5 大内核</h3><h4 id="Trident-内核"><a href="#Trident-内核" class="headerlink" title="Trident 内核"></a>Trident 内核</h4><p>也就是俗称的 <code>IE内核</code> 。</p><p><code>Trident</code> 内核迭代列表</p><p><img src="/images/bk-1.jpg" alt></p><p>使用该内核的浏览器有：IE浏览器，多核浏览器。</p><h4 id="Presto-Opera前内核-已废弃"><a href="#Presto-Opera前内核-已废弃" class="headerlink" title="Presto(Opera前内核)(已废弃)"></a>Presto(Opera前内核)(已废弃)</h4><p>Opera12.17及更早版本曾使用此内核，现已停止开发并废弃。</p><p>Opera在2013年2月宣布放弃 <code>Prosto</code>，转而跟随 Chrome 使用 <code>webkit</code> 的分支 <code>Chromium</code> 引擎作为其核心。</p><p>在 Chrome 与 2013年推出 <code>Blink</code> 核心后，Opera 也紧跟随其脚步使用 <code>Blink</code> 核心。</p><h4 id="Webkit-内核"><a href="#Webkit-内核" class="headerlink" title="Webkit 内核"></a>Webkit 内核</h4><p>苹果公司研发的内核，后来升级为 <code>webkit2</code>。</p><p><code>webkit</code>内核包括：<code>WebCore渲染引擎</code> 和 <code>JavaScriptCore解析引擎</code>，均是从 KDE 的 <code>KHTML</code> 和 <code>KJS</code> 衍生而来的。</p><p>2008年，Google 发布了 Chrome 浏览器，浏览器使用的内核叫做 <code>Chromium</code> 。</p><p><code>Chromium</code> fork 自开源引擎 <code>Webkit</code> ，Google 还研发了自己的JS引擎，即 <code>V8引擎</code> ，极大的提高了 JavaScript 的运行速度。</p><p>使用该内核的浏览器有：Safari，Android 默认浏览器，多核浏览器。</p><h4 id="Gecko-内核"><a href="#Gecko-内核" class="headerlink" title="Gecko 内核"></a>Gecko 内核</h4><p>Netscape6 开始采用的内核，后来的 Mozilla Firefox 也采用了相同的内核。</p><p>使用该内核的浏览器有：Mozilla Firefox，Mozilla SeaMonkey，Flock(早期版本)，K-Meleon 。</p><h4 id="Blink-内核"><a href="#Blink-内核" class="headerlink" title="Blink 内核"></a>Blink 内核</h4><p>2013 年 4 月 3 日，谷歌在 Chromium Blog 上发表 <a href="http://blog.chromium.org/2013/04/blink-rendering-engine-for-chromium.html" target="_blank" rel="noopener">博客</a>，称将与苹果的开源浏览器核心 <code>Webkit</code> 分道扬镳，在 Chromium 项目中研发 <code>Blink</code> 渲染引擎（即浏览器核心），内置于 Chrome 浏览器之中。</p><p><code>Blink</code> 是一个由 Google 和 Opera Software 开发的浏览器 渲染引擎，Google 计划将这个渲染引擎作为 Chromium 计划的一部分。这一渲染引擎是开源引擎 <code>WebKit</code> 中<code>WebCore</code> 组件的一个分支，并且在 Chrome（28及往后版本）、Opera（15及往后版本）和 Yandex 浏览器中使用<br>此外，Mozilla 与三星也达成合作协议开发”下一代”浏览器渲染引擎Servo。</p><p>使用该内核的浏览器：Chrome，Opera，多核浏览器。</p><h5 id="补充：什么是-Chromium-计划"><a href="#补充：什么是-Chromium-计划" class="headerlink" title="补充：什么是 Chromium 计划"></a>补充：什么是 Chromium 计划</h5><p>Chromium 是 Google 为发展自家的浏览器 Google Chrome（以下简称Chrome）而开启的计划，所以 Chromium 相当于 Chrome 的工程版或称实验版（尽管Chrome自身也有β版阶段），新功能会率先在 Chromium 上实现，待验证后才会应用在 Chrome 上，故 Chrome 的功能会相对落后但较稳定。<br>所以，Chromium 和 Chrome 都是浏览器，Chromium 是开发版本，相比起 Chrome 更新速度快很多，有时数个小时就有一个新版本，不过普通人一般用 Chrome 就可以了。</p><h5 id="补充：为什么要搞一个新的-Blink-内核"><a href="#补充：为什么要搞一个新的-Blink-内核" class="headerlink" title="补充：为什么要搞一个新的 Blink 内核"></a>补充：为什么要搞一个新的 Blink 内核</h5><p><code>Blink</code> 其实是 <code>WebKit</code> 的分支，如同 <code>WebKit</code> 是 <code>KHTML</code> 的分支。Google 的 Chromium 项目此前一直使用 <code>WebKit(WebCore)</code> 作为渲染引擎。</p><p>后来，由于苹果推出的 <code>WebKit2</code> 与 <code>Chromium</code> 的沙箱设计存在冲突，所以 <code>Chromium</code> 一直停留在 <code>WebKit</code>，并使用移植的方式来实现和主线 <code>WebKit2</code> 的对接。这增加了 <code>Chromium</code> 的复杂性，且在一定程度上影响了 <code>Chromium</code> 的架构移植工作。</p><p>基于以上原因，Google 决定从 <code>WebKit</code> 衍生出自己的 <code>Blink</code> 引擎（后由 Google 和 Opera Software 共同研发），将在 <code>WebKit</code> 代码的基础上研发更加快速和简约的渲染引擎，并逐步脱离 <code>WebKit</code> 的影响，创造一个完全独立的 <code>Blink</code> 引擎。</p><h4 id="EdgeHTML-内核"><a href="#EdgeHTML-内核" class="headerlink" title="EdgeHTML 内核"></a>EdgeHTML 内核</h4><p>Windows10后，IE内置浏览器 Edge 使用的内核。</p><p>JS引擎为 <code>Chakra</code> 。</p><p>使用该内核的浏览器：Edge。</p><h3 id="国内其他浏览器"><a href="#国内其他浏览器" class="headerlink" title="国内其他浏览器"></a>国内其他浏览器</h3><p>上面说到的5大主流浏览器(IE，Edge，Opera，Safari，Firefox，Chrome)，都是单核浏览器。相比较，国内很多浏览器则是双核或多核。即由1个 <code>Trident</code> + N个<code>其他核心</code> 组成的。</p><p>常见的国内浏览器核心如下：</p><p>360安全浏览器（1.0-5.0为 <code>Trident</code>，6.0为 <code>Trident+Webkit</code> ，7.0为 <code>Trident+Blink</code> ）<br>360极速浏览器（7.5之前为 <code>Trident+Webkit</code> ，7.5为 <code>Trident+Blink</code>）<br>猎豹安全浏览器（1.0-4.2版本为 <code>Trident+Webkit</code>，4.3及以后版本为 <code>Trident+Blink</code>）<br>傲游浏览器（傲游1.x、2.x为 <code>Trident</code>，3.x为 <code>Trident+Webkit</code>）<br>世界之窗浏览器（最初为 <code>Trident</code>，2013年采用 <code>Trident+Chromium</code>）<br>搜狗高速浏览器（1.x为 <code>Trident</code>，2.0及以后版本为 <code>Trident+Webkit</code>）<br>UC浏览器（ <code>Blink+Trident</code>）</p><p>对于多核浏览器，<code>Trident</code> 指 <code>兼容模式</code>，而 <code>其他内核</code> 指 <code>高速浏览模式</code> 。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>参考文章：</p><p><a href="https://blog.csdn.net/BonJean/article/details/78453547" target="_blank" rel="noopener">1. 浏览器内核-渲染引擎、js引擎</a></p><p><a href="https://blog.csdn.net/yuyanjing123456789/article/details/78689595" target="_blank" rel="noopener">2. 五大主流浏览器与四大内核</a></p><p><a href="https://segmentfault.com/a/1190000011064695" target="_blank" rel="noopener">3. 聊聊浏览器内核</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;内核简介&quot;&gt;&lt;a href=&quot;#内核简介&quot; class=&quot;headerlink&quot; title=&quot;内核简介&quot;&gt;&lt;/a&gt;内核简介&lt;/h3&gt;&lt;p&gt;一个完整的浏览器包含浏览器内核和浏览器外壳(shell)，浏览器核心––––内核分为两部分：&lt;strong&gt;渲染引擎&lt;/strong&gt; 和 &lt;strong&gt;js引擎&lt;/strong&gt; 。由于js引擎越来越独立，所以现在说的浏览器内核一般指 &lt;strong&gt;渲染引擎&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;渲染引擎&lt;/strong&gt; ：解析DOM文档和CSS规则并将内容和样式显示到浏览器中。也叫 &lt;strong&gt;排版引擎&lt;/strong&gt; ，我们常说的浏览器内核主要指的就是 &lt;strong&gt;渲染引擎&lt;/strong&gt; 。&lt;/p&gt;&lt;p&gt;&lt;strong&gt;js引擎&lt;/strong&gt; ：解析和执行JS脚本的模块，如 V8引擎，JavaScriptCore 等。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
      <category term="浏览器" scheme="http://jian2333.github.io/tags/%E6%B5%8F%E8%A7%88%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>每天一个Linux命令</title>
    <link href="http://jian2333.github.io/2019/05/16/Linux-Command/"/>
    <id>http://jian2333.github.io/2019/05/16/Linux-Command/</id>
    <published>2019-05-16T03:56:46.000Z</published>
    <updated>2019-05-17T12:49:59.846Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学一个系列，每天一个 Linux 命令</p><p>由于之前的笔记是写在 旧版博客 上的</p><p>所以</p><p>这里就不重新整理一份了，hahaha ~</p><p>直接，<a href="http://www.jianwill.cn/md/linuxList_2019-4-9.html" target="_blank" rel="noopener">传送门</a></p><p>(๑•̀ㅂ•́)و✧</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学一个系列，每天一个 Linux 命令&lt;/p&gt;&lt;p&gt;由于之前的笔记是写在 旧版博客 上的&lt;/p&gt;&lt;p&gt;所以&lt;/p&gt;&lt;p&gt;这里就不重新整理一份了，hahaha ~&lt;/p&gt;&lt;p&gt;直接，&lt;a href=&quot;http://www.jianwill.cn/md/linuxList
      
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="后端" scheme="http://jian2333.github.io/tags/%E5%90%8E%E7%AB%AF/"/>
    
      <category term="Linux" scheme="http://jian2333.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>关于 hexo 的一次踩坑之旅</title>
    <link href="http://jian2333.github.io/2019/05/14/hello-hexo/"/>
    <id>http://jian2333.github.io/2019/05/14/hello-hexo/</id>
    <published>2019-05-14T11:46:17.000Z</published>
    <updated>2019-05-23T10:08:58.133Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于-hexo-的一次踩坑之旅。"><a href="#关于-hexo-的一次踩坑之旅。" class="headerlink" title="关于 hexo 的一次踩坑之旅。"></a>关于 hexo 的一次踩坑之旅。</h2><p>之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。</p><p>后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。</p><a id="more"></a><h3 id="npm-权限问题"><a href="#npm-权限问题" class="headerlink" title="npm 权限问题"></a>npm 权限问题</h3><p>因为之前安装 node 的时候自动安装了 npm ， 然后 Mac 下 npm 是默认安装在 <code>/usr/local/</code> 路径下的，而该路径下很多目录和文件时 <strong>只读的</strong> ，然后在安装 hexo 的时候，会报权限错误；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 此处会报权限错误</span><br><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>网上找了一下，主要有四种解决方法：</p><h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>为当前用户添加 <code>npm安装目录</code> 下所有文件的写权限。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R (whoami)(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;</span><br></pre></td></tr></table></figure><p><strong>注意</strong> ：如果路径是 <code>/usr/local/</code> 的话不推荐这种方式，因为改权限会弄乱系统的权限，以后可能导致奇怪的错误(比如无法跟当前系统的其他用户共享)。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>把 <strong>npm</strong> 卸载，并安装在一个有读写权限的路径下；</p><p>推荐 <code>~/.npm-global</code> 路径下；</p><p>1.新建一个全局安装的路径；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir ~/.npm-global</span><br></pre></td></tr></table></figure><p>2.配置 npm 使用新的路径；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">'~/.npm-global'</span></span><br></pre></td></tr></table></figure><p>3.打开或者新建 <code>~/.profile</code> ，加入下面一行；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=~/.npm-global/bin:<span class="variable">$PATH</span></span><br></pre></td></tr></table></figure><p>4.重新启动终端；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> ~/.profile</span><br></pre></td></tr></table></figure><p>5.测试：安装一个全局包试试</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jslint</span><br><span class="line"></span><br><span class="line">[luncher@localhost aaa]$ ls ~/.npm-global/bin/</span><br><span class="line">jshint</span><br><span class="line">[luncher@localhost aaa]$</span><br></pre></td></tr></table></figure><h4 id="方法三-推荐"><a href="#方法三-推荐" class="headerlink" title="方法三(推荐)"></a>方法三(推荐)</h4><p>使用 <strong>nvm</strong> 。nvm 可以在一台电脑上管理不同版本的 node，并且使用 nvm 安装 npm 后，npm 默认的安装路径是有读写权限的，也就是说，以后 npm 安装任何包都不用再使用 <code>sudo</code> 参数了。</p><p>官网的解决方案：<a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener"><a href="https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally" target="_blank" rel="noopener">https://docs.npmjs.com/resolving-eacces-permissions-errors-when-installing-packages-globally</a></a>；</p><p>这里有个细节要注意：如果你本地已经安装了npm，你得先把本地的npm卸载，再安装nvm，再使用nvm安装npm；</p><p><strong>1.卸载已安装到全局的 node/npm</strong></p><p>node 命令在 <code>/usr/local/bin/node</code>，npm 命令在 <code>/usr/local/lib/node_modules/npm</code> 下；</p><p>查看已经安装的全局模块，以便卸载后再按不同的 node 版本重新安装；</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm ls -g --depth=0</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -rf /usr/<span class="built_in">local</span>/lib/node_modules<span class="comment">#删除全局 node_modules 目录</span></span><br><span class="line">sudo rm /usr/<span class="built_in">local</span>/bin/node<span class="comment">#删除 node</span></span><br><span class="line"><span class="built_in">cd</span>  /usr/<span class="built_in">local</span>/bin &amp;&amp; ls -l | grep <span class="string">"../lib/node_modules/"</span> | awk <span class="string">'&#123;print $9&#125;'</span>| xargs rm <span class="comment">#删除全局 node 模块注册的软链</span></span><br></pre></td></tr></table></figure><p><strong>2.安装 nvm</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.32.1/install.sh | bash</span><br></pre></td></tr></table></figure><h4 id="方法四"><a href="#方法四" class="headerlink" title="方法四"></a>方法四</h4><p>借助第三方工具安装 node</p><ul><li>mac 系统借助 <strong>brew</strong> 安装 <code>node</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install node</span><br></pre></td></tr></table></figure><ul><li>centos 系统借助 <strong>yum</strong> 安装 <code>node</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install node</span><br></pre></td></tr></table></figure><h3 id="部署分支问题"><a href="#部署分支问题" class="headerlink" title="部署分支问题"></a>部署分支问题</h3><p>由于 hexo 部署(<code>hexo d</code>) 的原理是，把站点上的所有静态文件删除，并把本地待部署的全部静态站点文件(/public/目录下) push 到远程库上，即完全覆盖；所以 hexo 官方文档有这样一句话 <strong>建议使用 master 作为写作分支，新建一个 public 分支作为发布分支</strong>。在按照这样创建分支后，发现网站打不开，然后在 <a href="https://help.github.com/en/articles/configuring-a-publishing-source-for-github-pages" target="_blank" rel="noopener">github pages</a> 的文档里看到这样几句话：</p><ul><li>Reponsitory 必须以 username.github.io 命令，这个 username 为 github 的账户名，网站部署成功后，使用 <a href="https://username.github.io" target="_blank" rel="noopener">https://username.github.io</a> 进行访问；</li><li>必须使用 <strong>master</strong> 分支管理网站静态文件。注意这句话，必须使用 <strong>master</strong> 分支。emmmmm….. 就是这么坑。</li></ul><p>所以，github的建议是：</p><p>使用 <strong>master</strong> 作为发布分支，使用 <strong>hexo</strong> 作为写作分支。</p><h3 id="Hexo-的使用"><a href="#Hexo-的使用" class="headerlink" title="Hexo 的使用"></a>Hexo 的使用</h3><p>Hexo 的使用流程一般如下：</p><p><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官方文档</a></p><p>1.安装 hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>2.创建 项目</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init &lt;folder&gt;</span><br><span class="line"><span class="built_in">cd</span> &lt;folder&gt;</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>3.新建 文章</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [layout] &lt;title&gt;</span><br></pre></td></tr></table></figure><p>4.生成静态文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">// or</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure><p>5.本地预览</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br><span class="line">// or </span><br><span class="line">hexo server</span><br></pre></td></tr></table></figure><p>6.部署到服务器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br><span class="line">// or </span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure><h3 id="关于主题"><a href="#关于主题" class="headerlink" title="关于主题"></a>关于主题</h3><p>主题的使用很简单，以下几个步骤即可：</p><p>1.clone 主题到本地</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> your_blog_dir</span><br><span class="line">git <span class="built_in">clone</span> https://github.com/DIYgod/hexo-theme-sagiri.git themes/sagiri</span><br></pre></td></tr></table></figure><p>2.修改 hexo 配置文件使用主题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line">theme: sagiri</span><br></pre></td></tr></table></figure><p>3.修改 主题配置文件，进行个性化设置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">// 路径为：your_blog_dir/themes/sagiri/_config.yml</span><br></pre></td></tr></table></figure><h3 id="推荐主题"><a href="#推荐主题" class="headerlink" title="推荐主题"></a>推荐主题</h3><p>搜集了一些比较好看的主题：</p><p><a href="https://github.com/DIYgod/hexo-theme-sagiri" target="_blank" rel="noopener"><strong>sagiri</strong></a> ：<a href="https://diygod.me/" target="_blank" rel="noopener">https://diygod.me</a></p><p><a href="https://xaoxuu.com/wiki/material-x/" target="_blank" rel="noopener"><strong>Material X</strong></a> ：<a href="https://xaoxuu.com" target="_blank" rel="noopener">https://xaoxuu.com</a></p><p><strong><a href="https://github.com/elmorec/hexo-theme-inside" target="_blank" rel="noopener">Inside</a></strong> ：<a href="https://blog.oniuo.com" target="_blank" rel="noopener">https://blog.oniuo.com</a></p><p><strong><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">Next</a></strong> ：<a href="https://blog.tolvyou.cn" target="_blank" rel="noopener">https://blog.tolvyou.cn</a></p><h3 id="旧版博客"><a href="#旧版博客" class="headerlink" title="旧版博客"></a>旧版博客</h3><p>最后，就是巨丑的<a href="http://www.jianwill.cn" target="_blank" rel="noopener">旧版博客</a>了…….</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于-hexo-的一次踩坑之旅。&quot;&gt;&lt;a href=&quot;#关于-hexo-的一次踩坑之旅。&quot; class=&quot;headerlink&quot; title=&quot;关于 hexo 的一次踩坑之旅。&quot;&gt;&lt;/a&gt;关于 hexo 的一次踩坑之旅。&lt;/h2&gt;&lt;p&gt;之前一直是在自己搭的网站写博客，markdown写好后用编辑器转成 html 格式，然后直接扔上去。emmmmm… 巨丑。&lt;/p&gt;&lt;p&gt;后来决定弄个漂亮点的博客，研究了下，决定用 hexo + github 来部署。看完文档感觉挺简单，结果花了几天时间才弄好，中间也碰到几个坑，记录一下。&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
      <category term="web前端" scheme="http://jian2333.github.io/tags/web%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>博客搬家啦</title>
    <link href="http://jian2333.github.io/2019/05/13/Migrate-Blog/"/>
    <id>http://jian2333.github.io/2019/05/13/Migrate-Blog/</id>
    <published>2019-05-13T12:43:06.000Z</published>
    <updated>2019-05-17T05:34:48.644Z</updated>
    
    <content type="html"><![CDATA[<p>博客搬家啦</p><p>新博客使用 <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">hexo</a> + <a href="https://pages.github.com/" target="_blank" rel="noopener">github pages</a> 来搭建</p><p>关于旧博客，对，就是巨丑的那个 ~~</p><p>点我！<a href="http://www.jianwill.cn" target="_blank" rel="noopener">点我就能看</a> ….</p><p>(づ｡◕‿‿◕｡)づ</p><a id="more"></a><p>————————– 分 割 线 ————————–</p><p>补充一下</p><p>由于旧博客不是用 <code>博客框架</code> ( <a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo</a>，<a href="https://www.jekyll.com.cn/" target="_blank" rel="noopener">Jekyll</a>，<a href="https://zh-cn.wordpress.com/" target="_blank" rel="noopener">Wordpress</a> )搭建的</p><p>所以很多文章不是用 <code>markdown</code> 写的，部分用 <code>markdown</code> 写的文章也由于内容太长</p><p>然后，迁移起来就比较麻烦…</p><p>o(╯□╰)o</p><p>所以，就直接给个链接代替了..</p><p>hahaha ~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博客搬家啦&lt;/p&gt;&lt;p&gt;新博客使用 &lt;a href=&quot;https://hexo.io/zh-cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hexo&lt;/a&gt; + &lt;a href=&quot;https://pages.github.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;github pages&lt;/a&gt; 来搭建&lt;/p&gt;&lt;p&gt;关于旧博客，对，就是巨丑的那个 ~~&lt;/p&gt;&lt;p&gt;点我！&lt;a href=&quot;http://www.jianwill.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点我就能看&lt;/a&gt; ….&lt;/p&gt;&lt;p&gt;(づ｡◕‿‿◕｡)づ&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://jian2333.github.io/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://jian2333.github.io/2019/05/12/hello-world/"/>
    <id>http://jian2333.github.io/2019/05/12/hello-world/</id>
    <published>2019-05-12T11:46:17.000Z</published>
    <updated>2019-05-17T03:51:51.488Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
      <category term="学习笔记" scheme="http://jian2333.github.io/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="hexo" scheme="http://jian2333.github.io/tags/hexo/"/>
    
  </entry>
  
</feed>
